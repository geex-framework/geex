{
  "api/MongoDB.Entities.AsObjectIdAttribute.html": {
    "href": "api/MongoDB.Entities.AsObjectIdAttribute.html",
    "title": "Class AsObjectIdAttribute | MongoDB.Entities",
    "keywords": "Class AsObjectIdAttribute Use this attribute to mark a string property to store the value in MongoDB as ObjectID if it is a valid ObjectId string. If it is not a valid ObjectId string, it will be stored as string. This is useful when using custom formats for the ID field. Inheritance System.Object System.Attribute MongoDB.Bson.Serialization.Attributes.BsonSerializerAttribute AsObjectIdAttribute Implements MongoDB.Bson.Serialization.IBsonMemberMapAttribute Inherited Members MongoDB.Bson.Serialization.Attributes.BsonSerializerAttribute.Apply(MongoDB.Bson.Serialization.BsonMemberMap) MongoDB.Bson.Serialization.Attributes.BsonSerializerAttribute.SerializerType System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public class AsObjectIdAttribute : BsonSerializerAttribute, IBsonMemberMapAttribute Constructors AsObjectIdAttribute() Declaration public AsObjectIdAttribute() Implements MongoDB.Bson.Serialization.IBsonMemberMapAttribute"
  },
  "api/MongoDB.Entities.Coordinates2D.html": {
    "href": "api/MongoDB.Entities.Coordinates2D.html",
    "title": "Class Coordinates2D | MongoDB.Entities",
    "keywords": "Class Coordinates2D Represents a GeoJsonPoint of GeoJson2DGeographicCoordinates Inheritance System.Object MongoDB.Driver.GeoJsonObjectModel.GeoJsonObject < MongoDB.Driver.GeoJsonObjectModel.GeoJson2DGeographicCoordinates > MongoDB.Driver.GeoJsonObjectModel.GeoJsonGeometry < MongoDB.Driver.GeoJsonObjectModel.GeoJson2DGeographicCoordinates > MongoDB.Driver.GeoJsonObjectModel.GeoJsonPoint < MongoDB.Driver.GeoJsonObjectModel.GeoJson2DGeographicCoordinates > Coordinates2D Inherited Members MongoDB.Driver.GeoJsonObjectModel.GeoJsonPoint<MongoDB.Driver.GeoJsonObjectModel.GeoJson2DGeographicCoordinates>.Coordinates MongoDB.Driver.GeoJsonObjectModel.GeoJsonPoint<MongoDB.Driver.GeoJsonObjectModel.GeoJson2DGeographicCoordinates>.Type MongoDB.Driver.GeoJsonObjectModel.GeoJsonObject<MongoDB.Driver.GeoJsonObjectModel.GeoJson2DGeographicCoordinates>.BoundingBox MongoDB.Driver.GeoJsonObjectModel.GeoJsonObject<MongoDB.Driver.GeoJsonObjectModel.GeoJson2DGeographicCoordinates>.CoordinateReferenceSystem MongoDB.Driver.GeoJsonObjectModel.GeoJsonObject<MongoDB.Driver.GeoJsonObjectModel.GeoJson2DGeographicCoordinates>.ExtraMembers System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public class Coordinates2D : GeoJsonPoint<GeoJson2DGeographicCoordinates> Constructors Coordinates2D(Double, Double) Instantiate a new Coordinates2D instance with the supplied longtitude and latitude Declaration public Coordinates2D(double longitude, double latitude) Parameters Type Name Description System.Double longitude System.Double latitude Properties coordinates Declaration public double[] coordinates { get; set; } Property Value Type Description System.Double [] type Declaration public string type { get; set; } Property Value Type Description System.String Methods GeoJsonPoint(Double, Double) Create a GeoJsonPoint of GeoJson2DGeographicCoordinates with supplied longitude and latitude Declaration public static GeoJsonPoint<GeoJson2DGeographicCoordinates> GeoJsonPoint(double longitude, double latitude) Parameters Type Name Description System.Double longitude System.Double latitude Returns Type Description MongoDB.Driver.GeoJsonObjectModel.GeoJsonPoint < MongoDB.Driver.GeoJsonObjectModel.GeoJson2DGeographicCoordinates > ToGeoJsonPoint() Converts a Coordinates2D instance to a GeoJsonPoint of GeoJson2DGeographicCoordinates Declaration public GeoJsonPoint<GeoJson2DGeographicCoordinates> ToGeoJsonPoint() Returns Type Description MongoDB.Driver.GeoJsonObjectModel.GeoJsonPoint < MongoDB.Driver.GeoJsonObjectModel.GeoJson2DGeographicCoordinates >"
  },
  "api/MongoDB.Entities.DataStreamer.html": {
    "href": "api/MongoDB.Entities.DataStreamer.html",
    "title": "Class DataStreamer | MongoDB.Entities",
    "keywords": "Class DataStreamer Provides the interface for uploading and downloading data chunks for file entities. Inheritance System.Object DataStreamer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public class DataStreamer Constructors DataStreamer(FileEntity) Declaration public DataStreamer(FileEntity parent) Parameters Type Name Description FileEntity parent Methods DownloadAsync(Stream, Int32, CancellationToken, IClientSessionHandle) Download binary data for this file entity from mongodb in chunks into a given stream. Declaration public Task DownloadAsync(Stream stream, int batchSize = 1, CancellationToken cancellation = default(CancellationToken), IClientSessionHandle session = null) Parameters Type Name Description System.IO.Stream stream The output stream to write the data System.Int32 batchSize The number of chunks you want returned at once System.Threading.CancellationToken cancellation An optional cancellation token. MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction Returns Type Description System.Threading.Tasks.Task DownloadWithTimeoutAsync(Stream, Int32, Int32, IClientSessionHandle) Download binary data for this file entity from mongodb in chunks into a given stream with a timeout period. Declaration public Task DownloadWithTimeoutAsync(Stream stream, int timeOutSeconds, int batchSize = 1, IClientSessionHandle session = null) Parameters Type Name Description System.IO.Stream stream The output stream to write the data System.Int32 timeOutSeconds The maximum number of seconds allowed for the operation to complete System.Int32 batchSize MongoDB.Driver.IClientSessionHandle session Returns Type Description System.Threading.Tasks.Task UploadAsync(Stream, Int32, CancellationToken, IClientSessionHandle) Upload binary data for this file entity into mongodb in chunks from a given stream. TIP: Make sure to save the entity before calling this method. Declaration public Task UploadAsync(Stream stream, int chunkSizeKB = 256, CancellationToken cancellation = default(CancellationToken), IClientSessionHandle session = null) Parameters Type Name Description System.IO.Stream stream The input stream to read the data from System.Int32 chunkSizeKB The 'average' size of one chunk in KiloBytes System.Threading.CancellationToken cancellation An optional cancellation token. MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction Returns Type Description System.Threading.Tasks.Task UploadWithTimeoutAsync(Stream, Int32, Int32, IClientSessionHandle) Upload binary data for this file entity into mongodb in chunks from a given stream with a timeout period. Declaration public Task UploadWithTimeoutAsync(Stream stream, int timeOutSeconds, int chunkSizeKB = 256, IClientSessionHandle session = null) Parameters Type Name Description System.IO.Stream stream The input stream to read the data from System.Int32 timeOutSeconds The maximum number of seconds allowed for the operation to complete System.Int32 chunkSizeKB The 'average' size of one chunk in KiloBytes MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction Returns Type Description System.Threading.Tasks.Task"
  },
  "api/MongoDB.Entities.Date.html": {
    "href": "api/MongoDB.Entities.Date.html",
    "title": "Class Date | MongoDB.Entities",
    "keywords": "Class Date A custom date/time type for precision datetime handling Inheritance System.Object Date Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public class Date Properties DateTime Declaration public DateTime DateTime { get; set; } Property Value Type Description System.DateTime Ticks Declaration public long Ticks { get; set; } Property Value Type Description System.Int64 Operators Implicit(Date to DateTime) Declaration public static implicit operator DateTime(Date date) Parameters Type Name Description Date date Returns Type Description System.DateTime Implicit(DateTime to Date) Declaration public static implicit operator Date(DateTime datetime) Parameters Type Name Description System.DateTime datetime Returns Type Description Date"
  },
  "api/MongoDB.Entities.DB.html": {
    "href": "api/MongoDB.Entities.DB.html",
    "title": "Class DB | MongoDB.Entities",
    "keywords": "Class DB The main entrypoint for all data access methods of the library Inheritance System.Object DB Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public static class DB Methods ChangeDefaultDatabase(String) Switches the default database at runtime WARNING: Use at your own risk!!! Might result in entities getting saved in the wrong databases under high concurrency situations. TIP: Make sure to cancel any watchers (change-streams) before switching the default database. Declaration public static void ChangeDefaultDatabase(string name) Parameters Type Name Description System.String name The name of the database to mark as the new default database Collection<T>() Gets the IMongoCollection for a given IEntity type. TIP: Try never to use this unless really necessary. Declaration public static IMongoCollection<T> Collection<T>() where T : IEntity Returns Type Description MongoDB.Driver.IMongoCollection <T> Type Parameters Name Description T Any class that implements IEntity CollectionName<T>() Gets the collection name for a given entity type Declaration public static string CollectionName<T>() where T : IEntity Returns Type Description System.String Type Parameters Name Description T The type of entity to get the collection name for CountAsync<T>(FilterDefinition<T>, IClientSessionHandle, CancellationToken) Gets an accurate count of how many total entities are in the collection for a given entity type Declaration public static Task<long> CountAsync<T>(FilterDefinition<T> filter, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description MongoDB.Driver.FilterDefinition <T> filter A filter definition MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.Int64 > Type Parameters Name Description T The entity type to get the count for CountAsync<T>(IClientSessionHandle, CancellationToken) Gets an accurate count of how many total entities are in the collection for a given entity type Declaration public static Task<long> CountAsync<T>(IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.Int64 > Type Parameters Name Description T The entity type to get the count for CountAsync<T>(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>, IClientSessionHandle, CancellationToken) Gets an accurate count of how many total entities are in the collection for a given entity type Declaration public static Task<long> CountAsync<T>(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>> filter, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description System.Func < MongoDB.Driver.FilterDefinitionBuilder <T>, MongoDB.Driver.FilterDefinition <T>> filter f => f.Eq(x => x.Prop, Value) & f.Gt(x => x.Prop, Value) MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.Int64 > Type Parameters Name Description T The entity type to get the count for CountAsync<T>(Expression<Func<T, Boolean>>, IClientSessionHandle, CancellationToken) Gets an accurate count of how many entities are matched for a given expression/filter Declaration public static Task<long> CountAsync<T>(Expression<Func<T, bool>> expression, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> expression A lambda expression for getting the count for a subset of the data MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.Int64 > Type Parameters Name Description T The entity type to get the count for CountEstimatedAsync<T>(CancellationToken) Gets a fast estimation of how many documents are in the collection using metadata. HINT: The estimation may not be exactly accurate. Declaration public static Task<long> CountEstimatedAsync<T>(CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.Int64 > Type Parameters Name Description T The entity type to get the count for Database(String) Gets the IMongoDatabase for a given database name if it has been previously initialized. You can also get the default database by passing 'default' or 'null' for the name parameter. Declaration public static IMongoDatabase Database(string name) Parameters Type Name Description System.String name The name of the database to retrieve Returns Type Description MongoDB.Driver.IMongoDatabase Database<T>() Gets the IMongoDatabase for the given entity type Declaration public static IMongoDatabase Database<T>() where T : IEntity Returns Type Description MongoDB.Driver.IMongoDatabase Type Parameters Name Description T The type of entity DatabaseFor<T>(String) Specifies the database that a given entity type should be stored in. Only needed for entity types you want stored in a db other than the default db. Declaration public static void DatabaseFor<T>(string database) where T : IEntity Parameters Type Name Description System.String database The name of the database Type Parameters Name Description T Any class that implements IEntity DatabaseName<T>() Gets the name of the database a given entity type is attached to. Returns name of default database if not specifically attached. Declaration public static string DatabaseName<T>() where T : IEntity Returns Type Description System.String Type Parameters Name Description T Any class that implements IEntity DeleteAsync<T>(IEnumerable<String>, IClientSessionHandle, CancellationToken) Deletes entities using a collection of IDs HINT: If more than 100,000 IDs are passed in, they will be processed in batches of 100k. HINT: If these entities are referenced by one-to-many/many-to-many relationships, those references are also deleted. Declaration public static Task<DeleteResult> DeleteAsync<T>(IEnumerable<string> IDs, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > IDs An IEnumerable of entity IDs MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.DeleteResult > Type Parameters Name Description T Any class that implements IEntity DeleteAsync<T>(Expression<Func<T, Boolean>>, IClientSessionHandle, CancellationToken) Deletes matching entities with an expression HINT: If the expression matches more than 100,000 entities, they will be deleted in batches of 100k. HINT: If these entities are referenced by one-to-many/many-to-many relationships, those references are also deleted. Declaration public static Task<DeleteResult> DeleteAsync<T>(Expression<Func<T, bool>> expression, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> expression A lambda expression for matching entities to delete. MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.DeleteResult > Type Parameters Name Description T Any class that implements IEntity DeleteAsync<T>(String, IClientSessionHandle, CancellationToken) Deletes a single entity from MongoDB. HINT: If this entity is referenced by one-to-many/many-to-many relationships, those references are also deleted. Declaration public static Task<DeleteResult> DeleteAsync<T>(string ID, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description System.String ID The Id of the entity to delete MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.DeleteResult > Type Parameters Name Description T Any class that implements IEntity DropCollectionAsync<T>(IClientSessionHandle) Deletes the collection of a given entity type as well as the join collections for that entity. TIP: When deleting a collection, all relationships associated with that entity type is also deleted. Declaration public static Task DropCollectionAsync<T>(IClientSessionHandle session = null) where T : IEntity Parameters Type Name Description MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T The entity type to drop the collection of Entity<T>() Returns a new instance of the supplied IEntity type Declaration public static T Entity<T>() where T : IEntity, new() Returns Type Description T Type Parameters Name Description T Any class that implements IEntity Entity<T>(String) Returns a new instance of the supplied IEntity type with the ID set to the supplied value Declaration public static T Entity<T>(string ID) where T : IEntity, new() Parameters Type Name Description System.String ID The ID to set on the returned instance Returns Type Description T Type Parameters Name Description T Any class that implements IEntity File<T>(String) Returns a DataStreamer object to enable downloading file data directly by supplying the ID of the file entity Declaration public static DataStreamer File<T>(string ID) where T : FileEntity, new() Parameters Type Name Description System.String ID The ID of the file entity Returns Type Description DataStreamer Type Parameters Name Description T The file entity type Filter<T>() Exposes the mongodb Filter Definition Builder for a given type. Declaration public static FilterDefinitionBuilder<T> Filter<T>() where T : IEntity Returns Type Description MongoDB.Driver.FilterDefinitionBuilder <T> Type Parameters Name Description T Any class that implements IEntity Find<T>(IClientSessionHandle) Represents a MongoDB Find command TIP: Specify your criteria using .Match() .Sort() .Skip() .Take() .Project() .Option() methods and finally call .Execute() Declaration public static Find<T> Find<T>(IClientSessionHandle session = null) where T : IEntity Parameters Type Name Description MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction Returns Type Description Find <T> Type Parameters Name Description T Any class that implements IEntity Find<T, TProjection>(IClientSessionHandle) Represents a MongoDB Find command TIP: Specify your criteria using .Match() .Sort() .Skip() .Take() .Project() .Option() methods and finally call .Execute() Declaration public static Find<T, TProjection> Find<T, TProjection>(IClientSessionHandle session = null) where T : IEntity Parameters Type Name Description MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction Returns Type Description Find <T, TProjection> Type Parameters Name Description T Any class that implements IEntity TProjection The type that is returned by projection Fluent<T>(AggregateOptions, IClientSessionHandle) Exposes the MongoDB collection for the given IEntity as an IAggregateFluent in order to facilitate Fluent queries. Declaration public static IAggregateFluent<T> Fluent<T>(AggregateOptions options = null, IClientSessionHandle session = null) where T : IEntity Parameters Type Name Description MongoDB.Driver.AggregateOptions options The options for the aggregation. This is not required. MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction Returns Type Description MongoDB.Driver.IAggregateFluent <T> Type Parameters Name Description T Any class that implements IEntity FluentGeoNear<T>(Coordinates2D, Expression<Func<T, Object>>, Boolean, Nullable<Double>, Nullable<Double>, Nullable<Int32>, BsonDocument, Nullable<Double>, Expression<Func<T, Object>>, String, AggregateOptions, IClientSessionHandle) Start a fluent aggregation pipeline with a $GeoNear stage with the supplied parameters. Declaration public static IAggregateFluent<T> FluentGeoNear<T>(Coordinates2D NearCoordinates, Expression<Func<T, object>> DistanceField, bool Spherical = true, double? MaxDistance = default(double? ), double? MinDistance = default(double? ), int? Limit = default(int? ), BsonDocument Query = null, double? DistanceMultiplier = default(double? ), Expression<Func<T, object>> IncludeLocations = null, string IndexKey = null, AggregateOptions options = null, IClientSessionHandle session = null) where T : IEntity Parameters Type Name Description Coordinates2D NearCoordinates The coordinates from which to find documents from System.Linq.Expressions.Expression < System.Func <T, System.Object >> DistanceField x => x.Distance System.Boolean Spherical Calculate distances using spherical geometry or not System.Nullable < System.Double > MaxDistance The maximum distance in meters from the center point that the documents can be System.Nullable < System.Double > MinDistance The minimum distance in meters from the center point that the documents can be System.Nullable < System.Int32 > Limit The maximum number of documents to return MongoDB.Bson.BsonDocument Query Limits the results to the documents that match the query System.Nullable < System.Double > DistanceMultiplier The factor to multiply all distances returned by the query System.Linq.Expressions.Expression < System.Func <T, System.Object >> IncludeLocations Specify the output field to store the point used to calculate the distance System.String IndexKey MongoDB.Driver.AggregateOptions options The options for the aggregation. This is not required. MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction Returns Type Description MongoDB.Driver.IAggregateFluent <T> Type Parameters Name Description T FluentTextSearch<T>(Search, String, Boolean, Boolean, String, AggregateOptions, IClientSessionHandle) Start a fluent aggregation pipeline with a $text stage with the supplied parameters. TIP: Make sure to define a text index with DB.Index<T>() before searching Declaration public static IAggregateFluent<T> FluentTextSearch<T>(Search searchType, string searchTerm, bool caseSensitive = false, bool diacriticSensitive = false, string language = null, AggregateOptions options = null, IClientSessionHandle session = null) where T : IEntity Parameters Type Name Description Search searchType The type of text matching to do System.String searchTerm The search term System.Boolean caseSensitive Case sensitivity of the search (optional) System.Boolean diacriticSensitive Diacritic sensitivity of the search (optional) System.String language The language for the search (optional) MongoDB.Driver.AggregateOptions options Options for finding documents (not required) MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction Returns Type Description MongoDB.Driver.IAggregateFluent <T> Type Parameters Name Description T Index<T>() Represents an index for a given IEntity TIP: Define the keys first with .Key() method and finally call the .Create() method. Declaration public static Index<T> Index<T>() where T : IEntity Returns Type Description Index <T> Type Parameters Name Description T Any class that implements IEntity InitAsync(String, MongoClientSettings) Initializes a MongoDB connection with the given connection parameters. You can call this method as many times as you want (such as in serverless functions) with the same parameters and the connections won't get duplicated. Declaration public static Task InitAsync(string database, MongoClientSettings settings) Parameters Type Name Description System.String database Name of the database MongoDB.Driver.MongoClientSettings settings A MongoClientSettings object Returns Type Description System.Threading.Tasks.Task InitAsync(String, String, Int32) Initializes a MongoDB connection with the given connection parameters. You can call this method as many times as you want (such as in serverless functions) with the same parameters and the connections won't get duplicated. Declaration public static Task InitAsync(string database, string host = \"127.0.0.1\", int port = 27017) Parameters Type Name Description System.String database Name of the database System.String host Address of the MongoDB server System.Int32 port Port number of the server Returns Type Description System.Threading.Tasks.Task MigrateAsync() Executes migration classes that implement the IMigration interface in the correct order to transform the database. TIP: Write classes with names such as: _001_rename_a_field.cs, _002_delete_a_field.cs, etc. and implement IMigration interface on them. Call this method at the startup of the application in order to run the migrations. Declaration public static Task MigrateAsync() Returns Type Description System.Threading.Tasks.Task MigrateAsync<T>() Discover and run migrations from the same assembly as the specified type. Declaration public static Task MigrateAsync<T>() where T : class Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T A type that is from the same assembly as the migrations you want to run NextSequentialNumberAsync(String, CancellationToken) Returns an atomically generated sequential number for the given sequence name everytime the method is called Declaration public static Task<ulong> NextSequentialNumberAsync(string sequenceName, CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.String sequenceName The name of the sequence to get the next number for System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.UInt64 > NextSequentialNumberAsync<T>(CancellationToken) Returns an atomically generated sequential number for the given Entity type everytime the method is called Declaration public static Task<ulong> NextSequentialNumberAsync<T>(CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.UInt64 > Type Parameters Name Description T The type of entity to get the next sequential number for PipelineAsync<T, TResult>(Template<T, TResult>, AggregateOptions, IClientSessionHandle, CancellationToken) Executes an aggregation pipeline by supplying a 'Template' object and get a list of results Declaration public static Task<List<TResult>> PipelineAsync<T, TResult>(Template<T, TResult> template, AggregateOptions options = null, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description Template <T, TResult> template A 'Template' object with tags replaced MongoDB.Driver.AggregateOptions options The options for the aggregation. This is not required. MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.List <TResult>> Type Parameters Name Description T Any class that implements IEntity TResult The type of the resulting objects PipelineCursorAsync<T, TResult>(Template<T, TResult>, AggregateOptions, IClientSessionHandle, CancellationToken) Executes an aggregation pipeline by supplying a 'Template' object and returns a cursor Declaration public static Task<IAsyncCursor<TResult>> PipelineCursorAsync<T, TResult>(Template<T, TResult> template, AggregateOptions options = null, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description Template <T, TResult> template A 'Template' object with tags replaced MongoDB.Driver.AggregateOptions options The options for the aggregation. This is not required. MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.IAsyncCursor <TResult>> Type Parameters Name Description T Any class that implements IEntity TResult The type of the resulting objects PipelineFirstAsync<T, TResult>(Template<T, TResult>, AggregateOptions, IClientSessionHandle, CancellationToken) Executes an aggregation pipeline by supplying a 'Template' object and get the first result or default value if not found. Declaration public static Task<TResult> PipelineFirstAsync<T, TResult>(Template<T, TResult> template, AggregateOptions options = null, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description Template <T, TResult> template A 'Template' object with tags replaced MongoDB.Driver.AggregateOptions options The options for the aggregation. This is not required. MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task <TResult> Type Parameters Name Description T Any class that implements IEntity TResult The type of the resulting object PipelineSingleAsync<T, TResult>(Template<T, TResult>, AggregateOptions, IClientSessionHandle, CancellationToken) Executes an aggregation pipeline by supplying a 'Template' object and get a single result or default value if not found. Declaration public static Task<TResult> PipelineSingleAsync<T, TResult>(Template<T, TResult> template, AggregateOptions options = null, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description Template <T, TResult> template A 'Template' object with tags replaced MongoDB.Driver.AggregateOptions options The options for the aggregation. This is not required. MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task <TResult> Type Parameters Name Description T Any class that implements IEntity TResult The type of the resulting object Projection<T>() Exposes the mongodb Projection Definition Builder for a given type. Declaration public static ProjectionDefinitionBuilder<T> Projection<T>() where T : IEntity Returns Type Description MongoDB.Driver.ProjectionDefinitionBuilder <T> Type Parameters Name Description T Any class that implements IEntity Queryable<T>(AggregateOptions, IClientSessionHandle) Exposes the MongoDB collection for the given IEntity as an IQueryable in order to facilitate LINQ queries. Declaration public static IMongoQueryable<T> Queryable<T>(AggregateOptions options = null, IClientSessionHandle session = null) where T : IEntity Parameters Type Name Description MongoDB.Driver.AggregateOptions options The aggregate options MongoDB.Driver.IClientSessionHandle session An optional session if used within a transaction Returns Type Description MongoDB.Driver.Linq.IMongoQueryable <T> Type Parameters Name Description T Any class that implements IEntity SaveAsync<T>(T, IClientSessionHandle, CancellationToken) Saves a complete entity replacing an existing entity or creating a new one if it does not exist. If ID value is null, a new entity is created. If ID has a value, then existing entity is replaced. Declaration public static Task<ReplaceOneResult> SaveAsync<T>(T entity, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description T entity The instance to persist MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation And optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.ReplaceOneResult > Type Parameters Name Description T Any class that implements IEntity SaveAsync<T>(IEnumerable<T>, IClientSessionHandle, CancellationToken) Saves a batch of complete entities replacing existing ones or creating new ones if they do not exist. If ID value is null, a new entity is created. If ID has a value, then existing entity is replaced. Declaration public static Task<BulkWriteResult<T>> SaveAsync<T>(IEnumerable<T> entities, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The entities to persist MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation And optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.BulkWriteResult <T>> Type Parameters Name Description T Any class that implements IEntity SaveExceptAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken) Saves an entity partially excluding the specified subset of properties. If ID value is null, a new entity is created. If ID has a value, then existing entity is updated. TIP: The properties to be excluded can be specified with a 'New' expression. You can only specify root level properties with the expression. Declaration public static Task<UpdateResult> SaveExceptAsync<T>(T entity, Expression<Func<T, object>> members, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description T entity The entity to save System.Linq.Expressions.Expression < System.Func <T, System.Object >> members x => new { x.PropOne, x.PropTwo } MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.UpdateResult > Type Parameters Name Description T Any class that implements IEntity SaveExceptAsync<T>(IEnumerable<T>, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken) Saves a batch of entities partially excluding the specified subset of properties. If ID value is null, a new entity is created. If ID has a value, then existing entity is updated. TIP: The properties to be excluded can be specified with a 'New' expression. You can only specify root level properties with the expression. Declaration public static Task<BulkWriteResult<T>> SaveExceptAsync<T>(IEnumerable<T> entities, Expression<Func<T, object>> members, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The batch of entities to save System.Linq.Expressions.Expression < System.Func <T, System.Object >> members x => new { x.PropOne, x.PropTwo } MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.BulkWriteResult <T>> Type Parameters Name Description T Any class that implements IEntity SaveOnlyAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken) Saves an entity partially with only the specified subset of properties. If ID value is null, a new entity is created. If ID has a value, then existing entity is updated. TIP: The properties to be saved can be specified with a 'New' expression. You can only specify root level properties with the expression. Declaration public static Task<UpdateResult> SaveOnlyAsync<T>(T entity, Expression<Func<T, object>> members, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description T entity The entity to save System.Linq.Expressions.Expression < System.Func <T, System.Object >> members x => new { x.PropOne, x.PropTwo } MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.UpdateResult > Type Parameters Name Description T Any class that implements IEntity SaveOnlyAsync<T>(IEnumerable<T>, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken) Saves a batch of entities partially with only the specified subset of properties. If ID value is null, a new entity is created. If ID has a value, then existing entity is updated. TIP: The properties to be saved can be specified with a 'New' expression. You can only specify root level properties with the expression. Declaration public static Task<BulkWriteResult<T>> SaveOnlyAsync<T>(IEnumerable<T> entities, Expression<Func<T, object>> members, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The batch of entities to save System.Linq.Expressions.Expression < System.Func <T, System.Object >> members x => new { x.PropOne, x.PropTwo } MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.BulkWriteResult <T>> Type Parameters Name Description T Any class that implements IEntity SavePreservingAsync<T>(T, IClientSessionHandle, CancellationToken) Saves an entity partially while excluding some properties. The properties to be excluded can be specified using the [Preserve] or [DontPreserve] attributes. Declaration public static Task<UpdateResult> SavePreservingAsync<T>(T entity, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description T entity The entity to save MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.UpdateResult > Type Parameters Name Description T Any class that implements IEntity Sort<T>() Exposes the mongodb Sort Definition Builder for a given type. Declaration public static SortDefinitionBuilder<T> Sort<T>() where T : IEntity Returns Type Description MongoDB.Driver.SortDefinitionBuilder <T> Type Parameters Name Description T Any class that implements IEntity Transaction(String, ClientSessionOptions) Gets a transaction context/scope for a given database or the default database if not specified. Declaration public static Transaction Transaction(string database = null, ClientSessionOptions options = null) Parameters Type Name Description System.String database The name of the database which this transaction is for (not required) MongoDB.Driver.ClientSessionOptions options Client session options (not required) Returns Type Description Transaction Transaction<T>(ClientSessionOptions) Gets a transaction context/scope for a given entity type's database Declaration public static Transaction Transaction<T>(ClientSessionOptions options = null) where T : IEntity Parameters Type Name Description MongoDB.Driver.ClientSessionOptions options Client session options (not required) Returns Type Description Transaction Type Parameters Name Description T The entity type to determine the database from for the transaction Update<T>(IClientSessionHandle) Represents an update command TIP: Specify a filter first with the .Match() method. Then set property values with .Modify() and finally call .Execute() to run the command. Declaration public static Update<T> Update<T>(IClientSessionHandle session = null) where T : IEntity Parameters Type Name Description MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction Returns Type Description Update <T> Type Parameters Name Description T Any class that implements IEntity UpdateAndGet<T>(IClientSessionHandle) Update and retrieve the first document that was updated. TIP: Specify a filter first with the .Match(). Then set property values with .Modify() and finally call .Execute() to run the command. Declaration public static UpdateAndGet<T> UpdateAndGet<T>(IClientSessionHandle session = null) where T : IEntity Parameters Type Name Description MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction Returns Type Description UpdateAndGet <T> Type Parameters Name Description T Any class that implements IEntity UpdateAndGet<T, TProjection>(IClientSessionHandle) Update and retrieve the first document that was updated. TIP: Specify a filter first with the .Match(). Then set property values with .Modify() and finally call .Execute() to run the command. Declaration public static UpdateAndGet<T, TProjection> UpdateAndGet<T, TProjection>(IClientSessionHandle session = null) where T : IEntity Parameters Type Name Description MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction Returns Type Description UpdateAndGet <T, TProjection> Type Parameters Name Description T Any class that implements IEntity TProjection The type to project to Watcher<T>(String) Retrieves the 'change-stream' watcher instance for a given unique name. If an instance for the name does not exist, it will return a new instance. If an instance already exists, that instance will be returned. Declaration public static Watcher<T> Watcher<T>(string name) where T : IEntity Parameters Type Name Description System.String name A unique name for the watcher of this entity type. Names can be duplicate among different entity types. Returns Type Description Watcher <T> Type Parameters Name Description T The entity type to get a watcher for Watchers<T>() Returns all the watchers for a given entity type Declaration public static IEnumerable<Watcher<T>> Watchers<T>() where T : IEntity Returns Type Description System.Collections.Generic.IEnumerable < Watcher <T>> Type Parameters Name Description T The entity type to get the watcher of"
  },
  "api/MongoDB.Entities.DBContext.html": {
    "href": "api/MongoDB.Entities.DBContext.html",
    "title": "Class DBContext | MongoDB.Entities",
    "keywords": "Class DBContext This db context class can be used as an alternative entry point instead of the DB static class. All methods on this class can be overriden if needed. Inheritance System.Object DBContext Transaction Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public class DBContext Fields session Declaration protected IClientSessionHandle session Field Value Type Description MongoDB.Driver.IClientSessionHandle Methods CountAsync<T>(FilterDefinition<T>, CancellationToken) Gets an accurate count of how many total entities are in the collection for a given entity type in the transaction scope. Declaration public virtual Task<long> CountAsync<T>(FilterDefinition<T> filter, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description MongoDB.Driver.FilterDefinition <T> filter A filter definition System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.Int64 > Type Parameters Name Description T The entity type to get the count for CountAsync<T>(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>, CancellationToken) Gets an accurate count of how many total entities are in the collection for a given entity type in the transaction scope. Declaration public virtual Task<long> CountAsync<T>(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>> filter, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description System.Func < MongoDB.Driver.FilterDefinitionBuilder <T>, MongoDB.Driver.FilterDefinition <T>> filter f => f.Eq(x => x.Prop, Value) & f.Gt(x => x.Prop, Value) System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.Int64 > Type Parameters Name Description T The entity type to get the count for CountAsync<T>(Expression<Func<T, Boolean>>, CancellationToken) Gets an accurate count of how many entities are matched for a given expression/filter in the transaction scope. Declaration public virtual Task<long> CountAsync<T>(Expression<Func<T, bool>> expression, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> expression A lambda expression for getting the count for a subset of the data System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.Int64 > Type Parameters Name Description T The entity type to get the count for CountAsync<T>(CancellationToken) Gets an accurate count of how many total entities are in the collection for a given entity type in the transaction scope. Declaration public virtual Task<long> CountAsync<T>(CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.Int64 > Type Parameters Name Description T The entity type to get the count for DeleteAsync<T>(IEnumerable<String>, CancellationToken) Deletes matching entities from MongoDB in the transaction scope HINT: If these entities are referenced by one-to-many/many-to-many relationships, those references are also deleted. TIP: Try to keep the number of entities to delete under 100 in a single call Declaration public virtual Task<DeleteResult> DeleteAsync<T>(IEnumerable<string> IDs, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > IDs An IEnumerable of entity IDs System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.DeleteResult > Type Parameters Name Description T The type of entity DeleteAsync<T>(Expression<Func<T, Boolean>>, CancellationToken) Deletes matching entities from MongoDB in the transaction scope HINT: If these entities are referenced by one-to-many/many-to-many relationships, those references are also deleted. TIP: Try to keep the number of entities to delete under 100 in a single call Declaration public virtual Task<DeleteResult> DeleteAsync<T>(Expression<Func<T, bool>> expression, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> expression A lambda expression for matching entities to delete. System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.DeleteResult > Type Parameters Name Description T The type of entity DeleteAsync<T>(String, CancellationToken) Deletes a single entity from MongoDB in the transaction scope. HINT: If this entity is referenced by one-to-many/many-to-many relationships, those references are also deleted. Declaration public virtual Task<DeleteResult> DeleteAsync<T>(string ID, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description System.String ID The Id of the entity to delete System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.DeleteResult > Type Parameters Name Description T The type of entity Find<T>() Starts a find command for the given entity type in the transaction scope. Declaration public virtual Find<T> Find<T>() where T : IEntity Returns Type Description Find <T> Type Parameters Name Description T The type of entity Find<T, TProjection>() Starts a find command with projection support for the given entity type in the transaction scope. Declaration public virtual Find<T, TProjection> Find<T, TProjection>() where T : IEntity Returns Type Description Find <T, TProjection> Type Parameters Name Description T The type of entity TProjection The type of the end result Fluent<T>(AggregateOptions) Exposes the MongoDB collection for the given entity type as IAggregateFluent in order to facilitate Fluent queries in the transaction sope. Declaration public virtual IAggregateFluent<T> Fluent<T>(AggregateOptions options = null) where T : IEntity Parameters Type Name Description MongoDB.Driver.AggregateOptions options The options for the aggregation. This is not required. Returns Type Description MongoDB.Driver.IAggregateFluent <T> Type Parameters Name Description T The type of entity FluentTextSearch<T>(Search, String, Boolean, Boolean, String, AggregateOptions) Start a fluent aggregation pipeline with a $text stage with the supplied parameters in the transaction scope. TIP: Make sure to define a text index with DB.Index<T>() before searching Declaration public virtual IAggregateFluent<T> FluentTextSearch<T>(Search searchType, string searchTerm, bool caseSensitive = false, bool diacriticSensitive = false, string language = null, AggregateOptions options = null) where T : IEntity Parameters Type Name Description Search searchType The type of text matching to do System.String searchTerm The search term System.Boolean caseSensitive Case sensitivity of the search (optional) System.Boolean diacriticSensitive Diacritic sensitivity of the search (optional) System.String language The language for the search (optional) MongoDB.Driver.AggregateOptions options Options for finding documents (not required) Returns Type Description MongoDB.Driver.IAggregateFluent <T> Type Parameters Name Description T GeoNear<T>(Coordinates2D, Expression<Func<T, Object>>, Boolean, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, BsonDocument, Nullable<Int32>, Expression<Func<T, Object>>, String, AggregateOptions) Start a fluent aggregation pipeline with a $GeoNear stage with the supplied parameters in the transaction scope. Declaration public virtual IAggregateFluent<T> GeoNear<T>(Coordinates2D NearCoordinates, Expression<Func<T, object>> DistanceField, bool Spherical = true, int? MaxDistance = default(int? ), int? MinDistance = default(int? ), int? Limit = default(int? ), BsonDocument Query = null, int? DistanceMultiplier = default(int? ), Expression<Func<T, object>> IncludeLocations = null, string IndexKey = null, AggregateOptions options = null) where T : IEntity Parameters Type Name Description Coordinates2D NearCoordinates The coordinates from which to find documents from System.Linq.Expressions.Expression < System.Func <T, System.Object >> DistanceField x => x.Distance System.Boolean Spherical Calculate distances using spherical geometry or not System.Nullable < System.Int32 > MaxDistance The maximum distance in meters from the center point that the documents can be System.Nullable < System.Int32 > MinDistance The minimum distance in meters from the center point that the documents can be System.Nullable < System.Int32 > Limit The maximum number of documents to return MongoDB.Bson.BsonDocument Query Limits the results to the documents that match the query System.Nullable < System.Int32 > DistanceMultiplier The factor to multiply all distances returned by the query System.Linq.Expressions.Expression < System.Func <T, System.Object >> IncludeLocations Specify the output field to store the point used to calculate the distance System.String IndexKey MongoDB.Driver.AggregateOptions options The options for the aggregation. This is not required. Returns Type Description MongoDB.Driver.IAggregateFluent <T> Type Parameters Name Description T The type of entity PipelineAsync<T, TResult>(Template<T, TResult>, AggregateOptions, CancellationToken) Executes an aggregation pipeline in the transaction scope by supplying a 'Template' object. Gets a list back as the result. Declaration public virtual Task<List<TResult>> PipelineAsync<T, TResult>(Template<T, TResult> template, AggregateOptions options = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description Template <T, TResult> template A 'Template' object with tags replaced MongoDB.Driver.AggregateOptions options The options for the aggregation. This is not required. System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.List <TResult>> Type Parameters Name Description T The type of entity TResult The type of the resulting objects PipelineCursorAsync<T, TResult>(Template<T, TResult>, AggregateOptions, CancellationToken) Executes an aggregation pipeline in the transaction scope by supplying a 'Template' object. Gets a cursor back as the result. Declaration public virtual Task<IAsyncCursor<TResult>> PipelineCursorAsync<T, TResult>(Template<T, TResult> template, AggregateOptions options = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description Template <T, TResult> template A 'Template' object with tags replaced MongoDB.Driver.AggregateOptions options The options for the aggregation. This is not required. System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.IAsyncCursor <TResult>> Type Parameters Name Description T The type of entity TResult The type of the resulting objects PipelineFirstAsync<T, TResult>(Template<T, TResult>, AggregateOptions, CancellationToken) Executes an aggregation pipeline in the transaction scope by supplying a 'Template' object. Gets the first or default value as the result. Declaration public virtual Task<TResult> PipelineFirstAsync<T, TResult>(Template<T, TResult> template, AggregateOptions options = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description Template <T, TResult> template A 'Template' object with tags replaced MongoDB.Driver.AggregateOptions options The options for the aggregation. This is not required. System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task <TResult> Type Parameters Name Description T The type of entity TResult The type of the resulting objects PipelineSingleAsync<T, TResult>(Template<T, TResult>, AggregateOptions, CancellationToken) Executes an aggregation pipeline in the transaction scope by supplying a 'Template' object. Gets a single or default value as the result. Declaration public virtual Task<TResult> PipelineSingleAsync<T, TResult>(Template<T, TResult> template, AggregateOptions options = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description Template <T, TResult> template A 'Template' object with tags replaced MongoDB.Driver.AggregateOptions options The options for the aggregation. This is not required. System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task <TResult> Type Parameters Name Description T The type of entity TResult The type of the resulting objects Queryable<T>(AggregateOptions) Exposes the MongoDB collection for the given entity type as IQueryable in order to facilitate LINQ queries in the transaction scope. Declaration public virtual IMongoQueryable<T> Queryable<T>(AggregateOptions options = null) where T : IEntity Parameters Type Name Description MongoDB.Driver.AggregateOptions options The aggregate options Returns Type Description MongoDB.Driver.Linq.IMongoQueryable <T> Type Parameters Name Description T The type of entity SaveAsync<T>(T, CancellationToken) Saves a complete entity replacing an existing entity or creating a new one if it does not exist. If ID value is null, a new entity is created. If ID has a value, then existing entity is replaced. Declaration public virtual Task<ReplaceOneResult> SaveAsync<T>(T entity, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description T entity The instance to persist System.Threading.CancellationToken cancellation And optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.ReplaceOneResult > Type Parameters Name Description T The type of entity SaveAsync<T>(IEnumerable<T>, CancellationToken) Saves a batch of complete entities replacing an existing entities or creating a new ones if they do not exist. If ID value is null, a new entity is created. If ID has a value, then existing entity is replaced. Declaration public virtual Task<BulkWriteResult<T>> SaveAsync<T>(IEnumerable<T> entities, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The entities to persist System.Threading.CancellationToken cancellation And optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.BulkWriteResult <T>> Type Parameters Name Description T The type of entity SaveExceptAsync<T>(T, Expression<Func<T, Object>>, CancellationToken) Saves an entity partially excluding the specified subset of properties. If ID value is null, a new entity is created. If ID has a value, then existing entity is updated. TIP: The properties to be excluded can be specified with a 'New' expression. You can only specify root level properties with the expression. Declaration public virtual Task<UpdateResult> SaveExceptAsync<T>(T entity, Expression<Func<T, object>> members, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description T entity The entity to save System.Linq.Expressions.Expression < System.Func <T, System.Object >> members x => new { x.PropOne, x.PropTwo } System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.UpdateResult > Type Parameters Name Description T Any class that implements IEntity SaveExceptAsync<T>(IEnumerable<T>, Expression<Func<T, Object>>, CancellationToken) Saves a batch of entities partially excluding the specified subset of properties. If ID value is null, a new entity is created. If ID has a value, then existing entity is updated. TIP: The properties to be excluded can be specified with a 'New' expression. You can only specify root level properties with the expression. Declaration public virtual Task<BulkWriteResult<T>> SaveExceptAsync<T>(IEnumerable<T> entities, Expression<Func<T, object>> members, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The batch of entities to save System.Linq.Expressions.Expression < System.Func <T, System.Object >> members x => new { x.PropOne, x.PropTwo } System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.BulkWriteResult <T>> Type Parameters Name Description T Any class that implements IEntity SaveOnlyAsync<T>(T, Expression<Func<T, Object>>, CancellationToken) Saves an entity partially with only the specified subset of properties. If ID value is null, a new entity is created. If ID has a value, then existing entity is updated. TIP: The properties to be saved can be specified with a 'New' expression. You can only specify root level properties with the expression. Declaration public virtual Task<UpdateResult> SaveOnlyAsync<T>(T entity, Expression<Func<T, object>> members, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description T entity The entity to save System.Linq.Expressions.Expression < System.Func <T, System.Object >> members x => new { x.PropOne, x.PropTwo } System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.UpdateResult > Type Parameters Name Description T Any class that implements IEntity SaveOnlyAsync<T>(IEnumerable<T>, Expression<Func<T, Object>>, CancellationToken) Saves a batch of entities partially with only the specified subset of properties. If ID value is null, a new entity is created. If ID has a value, then existing entity is updated. TIP: The properties to be saved can be specified with a 'New' expression. You can only specify root level properties with the expression. Declaration public virtual Task<BulkWriteResult<T>> SaveOnlyAsync<T>(IEnumerable<T> entities, Expression<Func<T, object>> members, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The batch of entities to save System.Linq.Expressions.Expression < System.Func <T, System.Object >> members x => new { x.PropOne, x.PropTwo } System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.BulkWriteResult <T>> Type Parameters Name Description T Any class that implements IEntity SavePreservingAsync<T>(T, CancellationToken) Saves an entity partially while excluding some properties in the transaction scope. The properties to be excluded can be specified using the [Preserve] or [DontPreserve] attributes. Declaration public virtual Task<UpdateResult> SavePreservingAsync<T>(T entity, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description T entity The entity to save System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.UpdateResult > Type Parameters Name Description T The type of entity Update<T>() Starts an update command for the given entity type in the transaction scope. Declaration public virtual Update<T> Update<T>() where T : IEntity Returns Type Description Update <T> Type Parameters Name Description T The type of entity UpdateAndGet<T>() Starts an update-and-get command for the given entity type in the transaction scope. Declaration public virtual UpdateAndGet<T> UpdateAndGet<T>() where T : IEntity Returns Type Description UpdateAndGet <T> Type Parameters Name Description T The type of entity UpdateAndGet<T, TProjection>() Starts an update-and-get command with projection support for the given entity type in the transaction scope. Declaration public virtual UpdateAndGet<T, TProjection> UpdateAndGet<T, TProjection>() where T : IEntity Returns Type Description UpdateAndGet <T, TProjection> Type Parameters Name Description T The type of entity TProjection The type of the end result"
  },
  "api/MongoDB.Entities.DontPreserveAttribute.html": {
    "href": "api/MongoDB.Entities.DontPreserveAttribute.html",
    "title": "Class DontPreserveAttribute | MongoDB.Entities",
    "keywords": "Class DontPreserveAttribute Properties that don't have this attribute will be omitted when using SavePreserving() TIP: These attribute decorations are only effective if you do not specify a preservation expression when calling SavePreserving() Inheritance System.Object System.Attribute DontPreserveAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public class DontPreserveAttribute : Attribute"
  },
  "api/MongoDB.Entities.Entity.html": {
    "href": "api/MongoDB.Entities.Entity.html",
    "title": "Class Entity | MongoDB.Entities",
    "keywords": "Class Entity Inherit this class for all entities you want to store in their own collection. Inheritance System.Object Entity FileEntity JoinRecord Migration Implements IEntity Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public abstract class Entity : IEntity Properties ID This property is auto managed. A new ID will be assigned for new entities upon saving. Declaration [BsonId] [ObjectId] public string ID { get; set; } Property Value Type Description System.String Methods GenerateNewID() Override this method in order to control the generation of IDs for new entities. Declaration public virtual string GenerateNewID() Returns Type Description System.String Implements IEntity Extension Methods Extensions.Database<T>(T) Extensions.DatabaseName<T>(T) Extensions.Collection<T>(T) Extensions.CollectionName<T>(T) Extensions.Queryable<T>(T, AggregateOptions) Extensions.Fluent<T>(T, IClientSessionHandle, AggregateOptions) Extensions.ToReference<T>(T) Extensions.ToDocument<T>(T) Extensions.SaveAsync<T>(T, IClientSessionHandle, CancellationToken) Extensions.SaveOnlyAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken) Extensions.SaveExceptAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken) Extensions.SavePreservingAsync<T>(T, IClientSessionHandle, CancellationToken) Extensions.DeleteAsync<T>(T, IClientSessionHandle) Extensions.NextSequentialNumberAsync<T>(T) Extensions.InitOneToMany<TChild>(IEntity, Expression<Func<Many<TChild>>>) Extensions.InitManyToMany<TChild>(IEntity, Expression<Func<Many<TChild>>>, Expression<Func<TChild, Object>>)"
  },
  "api/MongoDB.Entities.EventType.html": {
    "href": "api/MongoDB.Entities.EventType.html",
    "title": "Enum EventType | MongoDB.Entities",
    "keywords": "Enum EventType Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax [Flags] public enum EventType Fields Name Description Created Deleted Updated"
  },
  "api/MongoDB.Entities.Extensions.html": {
    "href": "api/MongoDB.Entities.Extensions.html",
    "title": "Class Extensions | MongoDB.Entities",
    "keywords": "Class Extensions Extension methods for entities Inheritance System.Object Extensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public static class Extensions Methods Collection<T>(T) Gets the IMongoCollection for a given IEntity type. TIP: Try never to use this unless really neccessary. Declaration public static IMongoCollection<T> Collection<T>(this T _) where T : IEntity Parameters Type Name Description T _ Returns Type Description MongoDB.Driver.IMongoCollection <T> Type Parameters Name Description T Any class that implements IEntity CollectionName<T>(T) Gets the collection name for this entity Declaration public static string CollectionName<T>(this T _) where T : IEntity Parameters Type Name Description T _ Returns Type Description System.String Type Parameters Name Description T Database<T>(T) Gets the IMongoDatabase for the given entity type Declaration public static IMongoDatabase Database<T>(this T _) where T : IEntity Parameters Type Name Description T _ Returns Type Description MongoDB.Driver.IMongoDatabase Type Parameters Name Description T The type of entity DatabaseName<T>(T) Gets the name of the database this entity is attached to. Returns name of default database if not specifically attached. Declaration public static string DatabaseName<T>(this T _) where T : IEntity Parameters Type Name Description T _ Returns Type Description System.String Type Parameters Name Description T DeleteAllAsync<T>(IEnumerable<T>, IClientSessionHandle) Deletes multiple entities from the database HINT: If these entities are referenced by one-to-many/many-to-many relationships, those references are also deleted. Declaration public static Task<DeleteResult> DeleteAllAsync<T>(this IEnumerable<T> entities, IClientSessionHandle session = null) where T : IEntity Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities MongoDB.Driver.IClientSessionHandle session Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.DeleteResult > Type Parameters Name Description T DeleteAsync<T>(T, IClientSessionHandle) Deletes a single entity from MongoDB. HINT: If this entity is referenced by one-to-many/many-to-many relationships, those references are also deleted. Declaration public static Task<DeleteResult> DeleteAsync<T>(this T entity, IClientSessionHandle session = null) where T : IEntity Parameters Type Name Description T entity MongoDB.Driver.IClientSessionHandle session Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.DeleteResult > Type Parameters Name Description T Distinct<T>(IAggregateFluent<T>) Adds a distinct aggregation stage to a fluent pipeline. Declaration public static IAggregateFluent<T> Distinct<T>(this IAggregateFluent<T> aggregate) where T : IEntity Parameters Type Name Description MongoDB.Driver.IAggregateFluent <T> aggregate Returns Type Description MongoDB.Driver.IAggregateFluent <T> Type Parameters Name Description T Any class that implements IEntity Fluent<T>(T, IClientSessionHandle, AggregateOptions) An IAggregateFluent collection of sibling Entities. Declaration public static IAggregateFluent<T> Fluent<T>(this T _, IClientSessionHandle session = null, AggregateOptions options = null) where T : IEntity Parameters Type Name Description T _ MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction MongoDB.Driver.AggregateOptions options The options for the aggregation. This is not required. Returns Type Description MongoDB.Driver.IAggregateFluent <T> Type Parameters Name Description T FullPath<T>(Expression<Func<T, Object>>) Returns the full dotted path of a property for the given expression Declaration public static string FullPath<T>(this Expression<Func<T, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> expression Returns Type Description System.String Type Parameters Name Description T Any class that implements IEntity InitManyToMany<TChild>(IEntity, Expression<Func<Many<TChild>>>, Expression<Func<TChild, Object>>) Initializes supplied property with a new Many-To-Many relationship. Declaration public static void InitManyToMany<TChild>(this IEntity parent, Expression<Func<Many<TChild>>> propertyToInit, Expression<Func<TChild, object>> propertyOtherSide) where TChild : IEntity Parameters Type Name Description IEntity parent System.Linq.Expressions.Expression < System.Func < Many <TChild>>> propertyToInit () = > PropertyName System.Linq.Expressions.Expression < System.Func <TChild, System.Object >> propertyOtherSide x => x.PropertyName Type Parameters Name Description TChild InitOneToMany<TChild>(IEntity, Expression<Func<Many<TChild>>>) Initializes supplied property with a new One-To-Many relationship. Declaration public static void InitOneToMany<TChild>(this IEntity parent, Expression<Func<Many<TChild>>> propertyToInit) where TChild : IEntity Parameters Type Name Description IEntity parent System.Linq.Expressions.Expression < System.Func < Many <TChild>>> propertyToInit () => PropertyName Type Parameters Name Description TChild Match<T>(IAggregateFluent<T>, Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>) Appends a match stage to the pipeline with a filter expression Declaration public static IAggregateFluent<T> Match<T>(this IAggregateFluent<T> aggregate, Func<FilterDefinitionBuilder<T>, FilterDefinition<T>> filter) where T : IEntity Parameters Type Name Description MongoDB.Driver.IAggregateFluent <T> aggregate System.Func < MongoDB.Driver.FilterDefinitionBuilder <T>, MongoDB.Driver.FilterDefinition <T>> filter f => f.Eq(x => x.Prop, Value) & f.Gt(x => x.Prop, Value) Returns Type Description MongoDB.Driver.IAggregateFluent <T> Type Parameters Name Description T Any class that implements IEntity MatchExpression<T>(IAggregateFluent<T>, String) Appends a match stage to the pipeline with an aggregation expression (i.e. $expr) Declaration public static IAggregateFluent<T> MatchExpression<T>(this IAggregateFluent<T> aggregate, string expression) where T : IEntity Parameters Type Name Description MongoDB.Driver.IAggregateFluent <T> aggregate System.String expression { $gt: ['$Property1', '$Property2'] } Returns Type Description MongoDB.Driver.IAggregateFluent <T> Type Parameters Name Description T Any class that implements IEntity NextSequentialNumberAsync<T>(T) Returns an atomically generated sequential number for the given Entity type everytime the method is called Declaration public static Task<ulong> NextSequentialNumberAsync<T>(this T _) where T : IEntity Parameters Type Name Description T _ Returns Type Description System.Threading.Tasks.Task < System.UInt64 > Type Parameters Name Description T The type of entity to get the next sequential number for Queryable<T>(T, AggregateOptions) An IQueryable collection of sibling Entities. Declaration public static IMongoQueryable<T> Queryable<T>(this T _, AggregateOptions options = null) where T : IEntity Parameters Type Name Description T _ MongoDB.Driver.AggregateOptions options Returns Type Description MongoDB.Driver.Linq.IMongoQueryable <T> Type Parameters Name Description T SaveAsync<T>(T, IClientSessionHandle, CancellationToken) Saves a complete entity replacing an existing entity or creating a new one if it does not exist. If ID value is null, a new entity is created. If ID has a value, then existing entity is replaced. Declaration public static Task<ReplaceOneResult> SaveAsync<T>(this T entity, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description T entity MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.ReplaceOneResult > Type Parameters Name Description T SaveAsync<T>(IEnumerable<T>, IClientSessionHandle, CancellationToken) Saves a batch of complete entities replacing existing ones or creating new ones if they do not exist. If ID value is null, a new entity is created. If ID has a value, then existing entity is replaced. Declaration public static Task<BulkWriteResult<T>> SaveAsync<T>(this IEnumerable<T> entities, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.BulkWriteResult <T>> Type Parameters Name Description T SaveExceptAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken) Saves an entity partially excluding the specified subset of properties. If ID value is null, a new entity is created. If ID has a value, then existing entity is updated. TIP: The properties to be excluded can be specified with a 'New' expression. You can only specify root level properties with the expression. Declaration public static Task<UpdateResult> SaveExceptAsync<T>(this T entity, Expression<Func<T, object>> members, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description T entity The entity to save System.Linq.Expressions.Expression < System.Func <T, System.Object >> members x => new { x.PropOne, x.PropTwo } MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.UpdateResult > Type Parameters Name Description T Any class that implements IEntity SaveExceptAsync<T>(IEnumerable<T>, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken) Saves a batch of entities partially excluding the specified subset of properties. If ID value is null, a new entity is created. If ID has a value, then existing entity is updated. TIP: The properties to be excluded can be specified with a 'New' expression. You can only specify root level properties with the expression. Declaration public static Task<BulkWriteResult<T>> SaveExceptAsync<T>(this IEnumerable<T> entities, Expression<Func<T, object>> members, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The batch of entities to save System.Linq.Expressions.Expression < System.Func <T, System.Object >> members x => new { x.PropOne, x.PropTwo } MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.BulkWriteResult <T>> Type Parameters Name Description T Any class that implements IEntity SaveOnlyAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken) Saves an entity partially with only the specified subset of properties. If ID value is null, a new entity is created. If ID has a value, then existing entity is updated. TIP: The properties to be saved can be specified with a 'New' expression. You can only specify root level properties with the expression. Declaration public static Task<UpdateResult> SaveOnlyAsync<T>(this T entity, Expression<Func<T, object>> members, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description T entity The entity to save System.Linq.Expressions.Expression < System.Func <T, System.Object >> members x => new { x.PropOne, x.PropTwo } MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.UpdateResult > Type Parameters Name Description T Any class that implements IEntity SaveOnlyAsync<T>(IEnumerable<T>, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken) Saves a batch of entities partially with only the specified subset of properties. If ID value is null, a new entity is created. If ID has a value, then existing entity is updated. TIP: The properties to be saved can be specified with a 'New' expression. You can only specify root level properties with the expression. Declaration public static Task<BulkWriteResult<T>> SaveOnlyAsync<T>(this IEnumerable<T> entities, Expression<Func<T, object>> members, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities The batch of entities to save System.Linq.Expressions.Expression < System.Func <T, System.Object >> members x => new { x.PropOne, x.PropTwo } MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.BulkWriteResult <T>> Type Parameters Name Description T Any class that implements IEntity SavePreservingAsync<T>(T, IClientSessionHandle, CancellationToken) Saves an entity partially while excluding some properties. The properties to be excluded can be specified using the [Preserve] attribute. Declaration public static Task<UpdateResult> SavePreservingAsync<T>(this T entity, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) where T : IEntity Parameters Type Name Description T entity The entity to save MongoDB.Driver.IClientSessionHandle session System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.UpdateResult > Type Parameters Name Description T Any class that implements IEntity SortByRelevance<T>(IEnumerable<T>, String, Func<T, String>, Nullable<Int32>) Sort a list of objects by relevance to a given string using Levenshtein Distance Declaration public static IEnumerable<T> SortByRelevance<T>(this IEnumerable<T> objects, string searchTerm, Func<T, string> propertyToSortBy, int? maxDistance = default(int? )) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> objects The list of objects to sort System.String searchTerm The term to measure relevance to System.Func <T, System.String > propertyToSortBy x => x.PropertyName [the term will be matched against the value of this property] System.Nullable < System.Int32 > maxDistance The maximum levenstein distance to qualify an item for inclusion in the returned list Returns Type Description System.Collections.Generic.IEnumerable <T> Type Parameters Name Description T Any object type ToBatches<T>(IEnumerable<T>, Int32) Extension method for processing collections in batches with streaming (yield return) Declaration public static IEnumerable<IEnumerable<T>> ToBatches<T>(this IEnumerable<T> collection, int batchSize = 100) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> collection The source collection System.Int32 batchSize The size of each batch Returns Type Description System.Collections.Generic.IEnumerable < System.Collections.Generic.IEnumerable <T>> Type Parameters Name Description T The type of the objects inside the source collection ToDocument<T>(T) Creates an unlinked duplicate of the original IEntity ready for embedding with a blank ID. Declaration public static T ToDocument<T>(this T entity) where T : IEntity Parameters Type Name Description T entity Returns Type Description T Type Parameters Name Description T ToDocuments<T>(T[]) Creates unlinked duplicates of the original Entities ready for embedding with blank IDs. Declaration public static T[] ToDocuments<T>(this T[] entities) where T : IEntity Parameters Type Name Description T[] entities Returns Type Description T[] Type Parameters Name Description T ToDocuments<T>(IEnumerable<T>) Creates unlinked duplicates of the original Entities ready for embedding with blank IDs. Declaration public static IEnumerable<T> ToDocuments<T>(this IEnumerable<T> entities) where T : IEntity Parameters Type Name Description System.Collections.Generic.IEnumerable <T> entities Returns Type Description System.Collections.Generic.IEnumerable <T> Type Parameters Name Description T ToDoubleMetaphoneHash(String) Converts a search term to Double Metaphone hash code suitable for fuzzy text searching. Declaration public static string ToDoubleMetaphoneHash(this string term) Parameters Type Name Description System.String term A single or multiple word search term Returns Type Description System.String ToReference<T>(T) Returns a reference to this entity. Declaration public static One<T> ToReference<T>(this T entity) where T : IEntity Parameters Type Name Description T entity Returns Type Description One <T> Type Parameters Name Description T"
  },
  "api/MongoDB.Entities.FileEntity.html": {
    "href": "api/MongoDB.Entities.FileEntity.html",
    "title": "Class FileEntity | MongoDB.Entities",
    "keywords": "Class FileEntity Inherit this base class in order to create your own File Entities Inheritance System.Object Entity FileEntity Implements IEntity Inherited Members Entity.ID Entity.GenerateNewID() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public abstract class FileEntity : Entity, IEntity Properties ChunkCount The number of chunks that have been created so far Declaration [BsonElement] public int ChunkCount { get; } Property Value Type Description System.Int32 Data Access the DataStreamer class for uploading and downloading data Declaration public DataStreamer Data { get; } Property Value Type Description DataStreamer FileSize The total amount of data in bytes that has been uploaded so far Declaration [BsonElement] public long FileSize { get; } Property Value Type Description System.Int64 UploadSuccessful Returns true only when all the chunks have been stored successfully in mongodb Declaration [BsonElement] public bool UploadSuccessful { get; } Property Value Type Description System.Boolean Implements IEntity Extension Methods Extensions.Database<T>(T) Extensions.DatabaseName<T>(T) Extensions.Collection<T>(T) Extensions.CollectionName<T>(T) Extensions.Queryable<T>(T, AggregateOptions) Extensions.Fluent<T>(T, IClientSessionHandle, AggregateOptions) Extensions.ToReference<T>(T) Extensions.ToDocument<T>(T) Extensions.SaveAsync<T>(T, IClientSessionHandle, CancellationToken) Extensions.SaveOnlyAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken) Extensions.SaveExceptAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken) Extensions.SavePreservingAsync<T>(T, IClientSessionHandle, CancellationToken) Extensions.DeleteAsync<T>(T, IClientSessionHandle) Extensions.NextSequentialNumberAsync<T>(T) Extensions.InitOneToMany<TChild>(IEntity, Expression<Func<Many<TChild>>>) Extensions.InitManyToMany<TChild>(IEntity, Expression<Func<Many<TChild>>>, Expression<Func<TChild, Object>>)"
  },
  "api/MongoDB.Entities.Find-1.html": {
    "href": "api/MongoDB.Entities.Find-1.html",
    "title": "Class Find<T> | MongoDB.Entities",
    "keywords": "Class Find<T> Represents a MongoDB Find command. TIP: Specify your criteria using .Match() .Sort() .Skip() .Take() .Project() .Option() methods and finally call .Execute() Note: For building queries, use the DB.Fluent* interfaces Inheritance System.Object Find <T, T> Find<T> Inherited Members Find<T, T>.OneAsync(String, CancellationToken) Find<T, T>.ManyAsync(Expression<Func<T, Boolean>>, CancellationToken) Find<T, T>.ManyAsync(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>, CancellationToken) Find<T, T>.MatchID(String) Find<T, T>.Match(String) Find<T, T>.Match(Expression<Func<T, Boolean>>) Find<T, T>.Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>) Find<T, T>.Match(Template) Find<T, T>.Match(Search, String, Boolean, Boolean, String) Find<T, T>.Match(Expression<Func<T, Object>>, Coordinates2D, Nullable<Double>, Nullable<Double>) Find<T, T>.MatchString(String) Find<T, T>.MatchExpression(String) Find<T, T>.MatchExpression(Template) Find<T, T>.Sort(Expression<Func<T, Object>>, Order) Find<T, T>.SortByTextScore() Find<T, T>.SortByTextScore(Expression<Func<T, Object>>) Find<T, T>.Sort(Func<SortDefinitionBuilder<T>, SortDefinition<T>>) Find<T, T>.Skip(Int32) Find<T, T>.Limit(Int32) Find<T, T>.Project(Expression<Func<T, T>>) Find<T, T>.Project(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, T>>) Find<T, T>.ProjectExcluding(Expression<Func<T, Object>>) Find<T, T>.Option(Action<FindOptions<T, T>>) Find<T, T>.ExecuteAsync(CancellationToken) Find<T, T>.ExecuteSingleAsync(CancellationToken) Find<T, T>.ExecuteFirstAsync(CancellationToken) Find<T, T>.ExecuteCursorAsync(CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public class Find<T> : Find<T, T> where T : IEntity Type Parameters Name Description T Any class that implements IEntity"
  },
  "api/MongoDB.Entities.Find-2.html": {
    "href": "api/MongoDB.Entities.Find-2.html",
    "title": "Class Find<T, TProjection> | MongoDB.Entities",
    "keywords": "Class Find<T, TProjection> Represents a MongoDB Find command with the ability to project to a different result type. TIP: Specify your criteria using .Match() .Sort() .Skip() .Take() .Project() .Option() methods and finally call .Execute() Inheritance System.Object Find<T, TProjection> Find<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public class Find<T, TProjection> where T : IEntity Type Parameters Name Description T Any class that implements IEntity TProjection The type you'd like to project the results to. Methods ExecuteAsync(CancellationToken) Run the Find command in MongoDB server and get a list of results Declaration public Task<List<TProjection>> ExecuteAsync(CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.List <TProjection>> ExecuteCursorAsync(CancellationToken) Run the Find command in MongoDB server and get a cursor instead of materialized results Declaration public Task<IAsyncCursor<TProjection>> ExecuteCursorAsync(CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.IAsyncCursor <TProjection>> ExecuteFirstAsync(CancellationToken) Run the Find command in MongoDB server and get the first result or the default value if not found Declaration public Task<TProjection> ExecuteFirstAsync(CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task <TProjection> ExecuteSingleAsync(CancellationToken) Run the Find command in MongoDB server and get a single result or the default value if not found. If more than one entity is found, it will throw an exception. Declaration public Task<TProjection> ExecuteSingleAsync(CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task <TProjection> Limit(Int32) Specify how many entities to Take/Limit Declaration public Find<T, TProjection> Limit(int takeCount) Parameters Type Name Description System.Int32 takeCount The number to limit/take Returns Type Description Find <T, TProjection> ManyAsync(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>, CancellationToken) Find entities by supplying a filter expression Declaration public Task<List<TProjection>> ManyAsync(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>> filter, CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.Func < MongoDB.Driver.FilterDefinitionBuilder <T>, MongoDB.Driver.FilterDefinition <T>> filter f => f.Eq(x => x.Prop, Value) & f.Gt(x => x.Prop, Value) System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.List <TProjection>> A list of Entities ManyAsync(Expression<Func<T, Boolean>>, CancellationToken) Find entities by supplying a lambda expression Declaration public Task<List<TProjection>> ManyAsync(Expression<Func<T, bool>> expression, CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> expression x => x.Property == Value System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.List <TProjection>> A list of Entities Match(Search, String, Boolean, Boolean, String) Specify a search term to find results from the text index of this particular collection. TIP: Make sure to define a text index with DB.Index<T>() before searching Declaration public Find<T, TProjection> Match(Search searchType, string searchTerm, bool caseSensitive = false, bool diacriticSensitive = false, string language = null) Parameters Type Name Description Search searchType The type of text matching to do System.String searchTerm The search term System.Boolean caseSensitive Case sensitivity of the search (optional) System.Boolean diacriticSensitive Diacritic sensitivity of the search (optional) System.String language The language for the search (optional) Returns Type Description Find <T, TProjection> Match(Template) Specify the matching criteria with a template Declaration public Find<T, TProjection> Match(Template template) Parameters Type Name Description Template template A Template with a find query Returns Type Description Find <T, TProjection> Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>) Specify the matching criteria with a filter expression Declaration public Find<T, TProjection> Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>> filter) Parameters Type Name Description System.Func < MongoDB.Driver.FilterDefinitionBuilder <T>, MongoDB.Driver.FilterDefinition <T>> filter f => f.Eq(x => x.Prop, Value) & f.Gt(x => x.Prop, Value) Returns Type Description Find <T, TProjection> Match(Expression<Func<T, Boolean>>) Specify the matching criteria with a lambda expression Declaration public Find<T, TProjection> Match(Expression<Func<T, bool>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> expression x => x.Property == Value Returns Type Description Find <T, TProjection> Match(Expression<Func<T, Object>>, Coordinates2D, Nullable<Double>, Nullable<Double>) Specify criteria for matching entities based on GeoSpatial data (longitude & latitude) TIP: Make sure to define a Geo2DSphere index with DB.Index<T>() before searching Note: DB.FluentGeoNear() supports more advanced options Declaration public Find<T, TProjection> Match(Expression<Func<T, object>> coordinatesProperty, Coordinates2D nearCoordinates, double? maxDistance = default(double? ), double? minDistance = default(double? )) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> coordinatesProperty The property where 2DCoordinates are stored Coordinates2D nearCoordinates The search point System.Nullable < System.Double > maxDistance Maximum distance in meters from the search point System.Nullable < System.Double > minDistance Minimum distance in meters from the search point Returns Type Description Find <T, TProjection> Match(String) Specify an IEntity ID as the matching criteria Declaration public Find<T, TProjection> Match(string ID) Parameters Type Name Description System.String ID A unique IEntity ID Returns Type Description Find <T, TProjection> MatchExpression(Template) Specify the matching criteria with a Template Declaration public Find<T, TProjection> MatchExpression(Template template) Parameters Type Name Description Template template A Template object Returns Type Description Find <T, TProjection> MatchExpression(String) Specify the matching criteria with an aggregation expression (i.e. $expr) Declaration public Find<T, TProjection> MatchExpression(string expression) Parameters Type Name Description System.String expression { $gt: ['$Property1', '$Property2'] } Returns Type Description Find <T, TProjection> MatchID(String) Specify an IEntity ID as the matching criteria Declaration public Find<T, TProjection> MatchID(string ID) Parameters Type Name Description System.String ID A unique IEntity ID Returns Type Description Find <T, TProjection> MatchString(String) Specify the matching criteria with a JSON string Declaration public Find<T, TProjection> MatchString(string jsonString) Parameters Type Name Description System.String jsonString { Title : 'The Power Of Now' } Returns Type Description Find <T, TProjection> OneAsync(String, CancellationToken) Find a single IEntity by ID Declaration public Task<TProjection> OneAsync(string ID, CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.String ID The unique ID of an IEntity System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task <TProjection> A single entity or null if not found Option(Action<FindOptions<T, TProjection>>) Specify an option for this find command (use multiple times if needed) Declaration public Find<T, TProjection> Option(Action<FindOptions<T, TProjection>> option) Parameters Type Name Description System.Action < MongoDB.Driver.FindOptions <T, TProjection>> option x => x.OptionName = OptionValue Returns Type Description Find <T, TProjection> Project(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, TProjection>>) Specify how to project the results using a projection expression Declaration public Find<T, TProjection> Project(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, TProjection>> projection) Parameters Type Name Description System.Func < MongoDB.Driver.ProjectionDefinitionBuilder <T>, MongoDB.Driver.ProjectionDefinition <T, TProjection>> projection p => p.Include(\"Prop1\").Exclude(\"Prop2\") Returns Type Description Find <T, TProjection> Project(Expression<Func<T, TProjection>>) Specify how to project the results using a lambda expression Declaration public Find<T, TProjection> Project(Expression<Func<T, TProjection>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, TProjection>> expression x => new Test { PropName = x.Prop } Returns Type Description Find <T, TProjection> ProjectExcluding(Expression<Func<T, Object>>) Specify how to project the results using an exclusion projection expression. Declaration public Find<T, TProjection> ProjectExcluding(Expression<Func<T, object>> exclusion) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> exclusion x => new { x.PropToExclude, x.AnotherPropToExclude } Returns Type Description Find <T, TProjection> Skip(Int32) Specify how many entities to skip Declaration public Find<T, TProjection> Skip(int skipCount) Parameters Type Name Description System.Int32 skipCount The number to skip Returns Type Description Find <T, TProjection> Sort(Func<SortDefinitionBuilder<T>, SortDefinition<T>>) Specify how to sort using a sort expression Declaration public Find<T, TProjection> Sort(Func<SortDefinitionBuilder<T>, SortDefinition<T>> sortFunction) Parameters Type Name Description System.Func < MongoDB.Driver.SortDefinitionBuilder <T>, MongoDB.Driver.SortDefinition <T>> sortFunction s => s.Ascending(\"Prop1\").MetaTextScore(\"Prop2\") Returns Type Description Find <T, TProjection> Sort(Expression<Func<T, Object>>, Order) Specify which property and order to use for sorting (use multiple times if needed) Declaration public Find<T, TProjection> Sort(Expression<Func<T, object>> propertyToSortBy, Order sortOrder) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> propertyToSortBy x => x.Prop Order sortOrder The sort order Returns Type Description Find <T, TProjection> SortByTextScore() Sort the results of a text search by the MetaTextScore TIP: Use this method after .Project() if you need to do a projection also Declaration public Find<T, TProjection> SortByTextScore() Returns Type Description Find <T, TProjection> SortByTextScore(Expression<Func<T, Object>>) Sort the results of a text search by the MetaTextScore and get back the score as well TIP: Use this method after .Project() if you need to do a projection also Declaration public Find<T, TProjection> SortByTextScore(Expression<Func<T, object>> scoreProperty) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> scoreProperty x => x.TextScoreProp Returns Type Description Find <T, TProjection>"
  },
  "api/MongoDB.Entities.FuzzyString.html": {
    "href": "api/MongoDB.Entities.FuzzyString.html",
    "title": "Class FuzzyString | MongoDB.Entities",
    "keywords": "Class FuzzyString Use this type to store strings if you need fuzzy text searching with MongoDB TIP: There's a default limit of 250 characters for ensuring best performance. If you exceed the default limit, an exception will be thrown. You can increase the limit by sacrificing performance/resource utilization by setting the static property FuzzyString.CharacterLimit = 500 at startup. Inheritance System.Object FuzzyString Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public class FuzzyString Properties CharacterLimit Declaration public static int CharacterLimit { get; set; } Property Value Type Description System.Int32 Value Declaration public string Value { get; set; } Property Value Type Description System.String Operators Implicit(FuzzyString to String) Declaration public static implicit operator string (FuzzyString fuzzyString) Parameters Type Name Description FuzzyString fuzzyString Returns Type Description System.String Implicit(String to FuzzyString) Declaration public static implicit operator FuzzyString(string value) Parameters Type Name Description System.String value Returns Type Description FuzzyString"
  },
  "api/MongoDB.Entities.GeoNear-1.html": {
    "href": "api/MongoDB.Entities.GeoNear-1.html",
    "title": "Class GeoNear<T> | MongoDB.Entities",
    "keywords": "Class GeoNear<T> Fluent aggregation pipeline builder for GeoNear Inheritance System.Object GeoNear<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public class GeoNear<T> where T : IEntity Type Parameters Name Description T The type of entity Properties distanceField Declaration public string distanceField { get; set; } Property Value Type Description System.String distanceMultiplier Declaration [BsonIgnoreIfNull] public double? distanceMultiplier { get; set; } Property Value Type Description System.Nullable < System.Double > includeLocs Declaration [BsonIgnoreIfNull] public string includeLocs { get; set; } Property Value Type Description System.String key Declaration [BsonIgnoreIfNull] public string key { get; set; } Property Value Type Description System.String limit Declaration [BsonIgnoreIfNull] public int? limit { get; set; } Property Value Type Description System.Nullable < System.Int32 > maxDistance Declaration [BsonIgnoreIfNull] public double? maxDistance { get; set; } Property Value Type Description System.Nullable < System.Double > minDistance Declaration [BsonIgnoreIfNull] public double? minDistance { get; set; } Property Value Type Description System.Nullable < System.Double > near Declaration public Coordinates2D near { get; set; } Property Value Type Description Coordinates2D query Declaration [BsonIgnoreIfNull] public BsonDocument query { get; set; } Property Value Type Description MongoDB.Bson.BsonDocument spherical Declaration public bool spherical { get; set; } Property Value Type Description System.Boolean"
  },
  "api/MongoDB.Entities.html": {
    "href": "api/MongoDB.Entities.html",
    "title": "Namespace MongoDB.Entities | MongoDB.Entities",
    "keywords": "Namespace MongoDB.Entities Classes AsObjectIdAttribute Use this attribute to mark a string property to store the value in MongoDB as ObjectID if it is a valid ObjectId string. If it is not a valid ObjectId string, it will be stored as string. This is useful when using custom formats for the ID field. Coordinates2D Represents a GeoJsonPoint of GeoJson2DGeographicCoordinates DataStreamer Provides the interface for uploading and downloading data chunks for file entities. Date A custom date/time type for precision datetime handling DB The main entrypoint for all data access methods of the library DBContext This db context class can be used as an alternative entry point instead of the DB static class. All methods on this class can be overriden if needed. DontPreserveAttribute Properties that don't have this attribute will be omitted when using SavePreserving() TIP: These attribute decorations are only effective if you do not specify a preservation expression when calling SavePreserving() Entity Inherit this class for all entities you want to store in their own collection. Extensions Extension methods for entities FileEntity Inherit this base class in order to create your own File Entities Find<T> Represents a MongoDB Find command. TIP: Specify your criteria using .Match() .Sort() .Skip() .Take() .Project() .Option() methods and finally call .Execute() Note: For building queries, use the DB.Fluent* interfaces Find<T, TProjection> Represents a MongoDB Find command with the ability to project to a different result type. TIP: Specify your criteria using .Match() .Sort() .Skip() .Take() .Project() .Option() methods and finally call .Execute() FuzzyString Use this type to store strings if you need fuzzy text searching with MongoDB TIP: There's a default limit of 250 characters for ensuring best performance. If you exceed the default limit, an exception will be thrown. You can increase the limit by sacrificing performance/resource utilization by setting the static property FuzzyString.CharacterLimit = 500 at startup. GeoNear<T> Fluent aggregation pipeline builder for GeoNear IgnoreAttribute Indicates that this property should be ignored when this class is persisted to MongoDB. Index<T> Represents an index creation command TIP: Define the keys first with .Key() method and finally call the .Create() method. InverseSideAttribute Indicates that this property is the inverse side of a many-to-many relationship JoinRecord Represents a parent-child relationship between two entities. TIP: The ParentID and ChildID switches around for many-to-many relationships depending on the side of the relationship you're accessing. Many<TChild> Represents a one-to-many/many-to-many relationship between two Entities. WARNING: You have to initialize all instances of this class before accessing any of it's members. Initialize from the constructor of the parent entity as follows: this.InitOneToMany(() => Property) this.InitManyToMany(() => Property, x => x.OtherProperty) Many<TChild>.Joined<T> A class used to hold join results when joining relationships ManyBase Base class providing shared state for Many'1 classes Migration Represents a migration history item in the database NameAttribute Use this attribute to specify a custom MongoDB collection name for an IEntity. ObjectIdAttribute Use this attribute to mark a property in order to save it in MongoDB server as ObjectId One<T> Represents a one-to-one relationship with an IEntity. OwnerSideAttribute Indicates that this property is the owner side of a many-to-many relationship PreserveAttribute Use this attribute on properties that you want to omit when using SavePreserving() instead of supplying an expression. TIP: These attribute decorations are only effective if you do not specify a preservation expression when calling SavePreserving() Prop This class provides methods to generate property path strings from lambda expression. Template A helper class to build a JSON command from a string with tag replacement Template<T> A helper class to build a JSON command from a string with tag replacement Template<TInput, TResult> A helper class to build a JSON command from a string with tag replacement Transaction Represents a transaction used to carry out inter-related write operations. TIP: Remember to always call .Dispose() after use or enclose in a 'Using' statement. IMPORTANT: Use the methods on this transaction to perform operations and not the methods on the DB class. Update<T> Represents an update command TIP: Specify a filter first with the .Match(). Then set property values with .Modify() and finally call .Execute() to run the command. UpdateAndGet<T> Update and retrieve the first document that was updated. TIP: Specify a filter first with the .Match(). Then set property values with .Modify() and finally call .Execute() to run the command. UpdateAndGet<T, TProjection> Update and retrieve the first document that was updated. TIP: Specify a filter first with the .Match(). Then set property values with .Modify() and finally call .Execute() to run the command. Watcher<T> Watcher for subscribing to mongodb change streams. Interfaces ICreatedOn Implement this interface on entities you want the library to automatically store the creation date with IEntity The contract for Entity classes IMigration The contract for writing user data migration classes IModifiedOn Implement this interface on entities you want the library to automatically store the modified date with Enums EventType KeyType Order Search"
  },
  "api/MongoDB.Entities.ICreatedOn.html": {
    "href": "api/MongoDB.Entities.ICreatedOn.html",
    "title": "Interface ICreatedOn | MongoDB.Entities",
    "keywords": "Interface ICreatedOn Implement this interface on entities you want the library to automatically store the creation date with Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public interface ICreatedOn Properties CreatedOn This property will be automatically set by the library when an entity is created. TIP: This property is useful when sorting by creation date. Declaration DateTime CreatedOn { get; set; } Property Value Type Description System.DateTime"
  },
  "api/MongoDB.Entities.IEntity.html": {
    "href": "api/MongoDB.Entities.IEntity.html",
    "title": "Interface IEntity | MongoDB.Entities",
    "keywords": "Interface IEntity The contract for Entity classes Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public interface IEntity Properties ID The ID property for this entity type. IMPORTANT: make sure to decorate this property with the [BsonId] attribute when implementing this interface Declaration string ID { get; set; } Property Value Type Description System.String Methods GenerateNewID() Generate and return a new ID string from this method. It will be used when saving new entities that don't have their ID set. That is, if an entity has a null ID, this method will be called for getting a new ID value. If you're not doing custom ID generation, simply do return ObjectId.GenerateNewId().ToString() Declaration string GenerateNewID() Returns Type Description System.String Extension Methods Extensions.Database<T>(T) Extensions.DatabaseName<T>(T) Extensions.Collection<T>(T) Extensions.CollectionName<T>(T) Extensions.Queryable<T>(T, AggregateOptions) Extensions.Fluent<T>(T, IClientSessionHandle, AggregateOptions) Extensions.ToReference<T>(T) Extensions.ToDocument<T>(T) Extensions.SaveAsync<T>(T, IClientSessionHandle, CancellationToken) Extensions.SaveOnlyAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken) Extensions.SaveExceptAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken) Extensions.SavePreservingAsync<T>(T, IClientSessionHandle, CancellationToken) Extensions.DeleteAsync<T>(T, IClientSessionHandle) Extensions.NextSequentialNumberAsync<T>(T) Extensions.InitOneToMany<TChild>(IEntity, Expression<Func<Many<TChild>>>) Extensions.InitManyToMany<TChild>(IEntity, Expression<Func<Many<TChild>>>, Expression<Func<TChild, Object>>)"
  },
  "api/MongoDB.Entities.IgnoreAttribute.html": {
    "href": "api/MongoDB.Entities.IgnoreAttribute.html",
    "title": "Class IgnoreAttribute | MongoDB.Entities",
    "keywords": "Class IgnoreAttribute Indicates that this property should be ignored when this class is persisted to MongoDB. Inheritance System.Object System.Attribute MongoDB.Bson.Serialization.Attributes.BsonIgnoreAttribute IgnoreAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public class IgnoreAttribute : BsonIgnoreAttribute"
  },
  "api/MongoDB.Entities.IMigration.html": {
    "href": "api/MongoDB.Entities.IMigration.html",
    "title": "Interface IMigration | MongoDB.Entities",
    "keywords": "Interface IMigration The contract for writing user data migration classes Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public interface IMigration Methods UpgradeAsync() Declaration Task UpgradeAsync() Returns Type Description System.Threading.Tasks.Task"
  },
  "api/MongoDB.Entities.IModifiedOn.html": {
    "href": "api/MongoDB.Entities.IModifiedOn.html",
    "title": "Interface IModifiedOn | MongoDB.Entities",
    "keywords": "Interface IModifiedOn Implement this interface on entities you want the library to automatically store the modified date with Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public interface IModifiedOn Properties ModifiedOn This property will be automatically set by the library when an entity is updated. TIP: This property is useful when sorting by update date. Declaration DateTime ModifiedOn { get; set; } Property Value Type Description System.DateTime"
  },
  "api/MongoDB.Entities.Index-1.html": {
    "href": "api/MongoDB.Entities.Index-1.html",
    "title": "Class Index<T> | MongoDB.Entities",
    "keywords": "Class Index<T> Represents an index creation command TIP: Define the keys first with .Key() method and finally call the .Create() method. Inheritance System.Object Index<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public class Index<T> where T : IEntity Type Parameters Name Description T Any class that implements IEntity Methods CreateAsync(CancellationToken) Call this method to finalize defining the index after setting the index keys and options. Declaration public Task<string> CreateAsync(CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.String > The name of the created index DropAllAsync(CancellationToken) Drops all indexes for this entity type Declaration public Task DropAllAsync(CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task DropAsync(String, CancellationToken) Drops an index by name for this entity type Declaration public Task DropAsync(string name, CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.String name The name of the index to drop System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task Key(Expression<Func<T, Object>>, KeyType) Adds a key definition to the index TIP: At least one key definition is required Declaration public Index<T> Key(Expression<Func<T, object>> propertyToIndex, KeyType type) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> propertyToIndex x => x.PropertyName KeyType type The type of the key Returns Type Description Index <T> Option(Action<CreateIndexOptions<T>>) Set the options for this index definition TIP: Setting options is not required. Declaration public Index<T> Option(Action<CreateIndexOptions<T>> option) Parameters Type Name Description System.Action < MongoDB.Driver.CreateIndexOptions <T>> option x => x.OptionName = OptionValue Returns Type Description Index <T>"
  },
  "api/MongoDB.Entities.InverseSideAttribute.html": {
    "href": "api/MongoDB.Entities.InverseSideAttribute.html",
    "title": "Class InverseSideAttribute | MongoDB.Entities",
    "keywords": "Class InverseSideAttribute Indicates that this property is the inverse side of a many-to-many relationship Inheritance System.Object System.Attribute InverseSideAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public class InverseSideAttribute : Attribute"
  },
  "api/MongoDB.Entities.JoinRecord.html": {
    "href": "api/MongoDB.Entities.JoinRecord.html",
    "title": "Class JoinRecord | MongoDB.Entities",
    "keywords": "Class JoinRecord Represents a parent-child relationship between two entities. TIP: The ParentID and ChildID switches around for many-to-many relationships depending on the side of the relationship you're accessing. Inheritance System.Object Entity JoinRecord Many<TChild>.Joined<T> Implements IEntity Inherited Members Entity.ID Entity.GenerateNewID() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public class JoinRecord : Entity, IEntity Properties ChildID The ID of the child IEntity in one-to-many relationships and the ID of the inverse side IEntity in many-to-many relationships. Declaration [AsObjectId] public string ChildID { get; set; } Property Value Type Description System.String ParentID The ID of the parent IEntity for both one-to-many and the owner side of many-to-many relationships. Declaration [AsObjectId] public string ParentID { get; set; } Property Value Type Description System.String Implements IEntity Extension Methods Extensions.Database<T>(T) Extensions.DatabaseName<T>(T) Extensions.Collection<T>(T) Extensions.CollectionName<T>(T) Extensions.Queryable<T>(T, AggregateOptions) Extensions.Fluent<T>(T, IClientSessionHandle, AggregateOptions) Extensions.ToReference<T>(T) Extensions.ToDocument<T>(T) Extensions.SaveAsync<T>(T, IClientSessionHandle, CancellationToken) Extensions.SaveOnlyAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken) Extensions.SaveExceptAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken) Extensions.SavePreservingAsync<T>(T, IClientSessionHandle, CancellationToken) Extensions.DeleteAsync<T>(T, IClientSessionHandle) Extensions.NextSequentialNumberAsync<T>(T) Extensions.InitOneToMany<TChild>(IEntity, Expression<Func<Many<TChild>>>) Extensions.InitManyToMany<TChild>(IEntity, Expression<Func<Many<TChild>>>, Expression<Func<TChild, Object>>)"
  },
  "api/MongoDB.Entities.KeyType.html": {
    "href": "api/MongoDB.Entities.KeyType.html",
    "title": "Enum KeyType | MongoDB.Entities",
    "keywords": "Enum KeyType Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public enum KeyType Fields Name Description Ascending Descending Geo2D Geo2DSphere Hashed Text Wildcard"
  },
  "api/MongoDB.Entities.Many-1.html": {
    "href": "api/MongoDB.Entities.Many-1.html",
    "title": "Class Many<TChild> | MongoDB.Entities",
    "keywords": "Class Many<TChild> Represents a one-to-many/many-to-many relationship between two Entities. WARNING: You have to initialize all instances of this class before accessing any of it's members. Initialize from the constructor of the parent entity as follows: this.InitOneToMany(() => Property) this.InitManyToMany(() => Property, x => x.OtherProperty) Inheritance System.Object ManyBase Many<TChild> Implements System.Collections.Generic.IEnumerable <TChild> System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public class Many<TChild> : ManyBase, IEnumerable<TChild>, IEnumerable where TChild : IEntity Type Parameters Name Description TChild Type of the child IEntity. Properties JoinCollection Gets the IMongoCollection of JoinRecords for this relationship. TIP: Try never to use this unless really neccessary. Declaration public IMongoCollection<JoinRecord> JoinCollection { get; } Property Value Type Description MongoDB.Driver.IMongoCollection < JoinRecord > Methods AddAsync(TChild, IClientSessionHandle, CancellationToken) Adds a new child reference. WARNING: Make sure to save the parent and child Entities before calling this method. Declaration public Task AddAsync(TChild child, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description TChild child The child Entity to add. MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task AddAsync(IEnumerable<TChild>, IClientSessionHandle, CancellationToken) Adds multiple child references in a single bulk operation WARNING: Make sure to save the parent and child Entities before calling this method. Declaration public Task AddAsync(IEnumerable<TChild> children, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.Collections.Generic.IEnumerable <TChild> children The child Entities to add MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task AddAsync(IEnumerable<String>, IClientSessionHandle, CancellationToken) Adds multiple child references in a single bulk operation WARNING: Make sure to save the parent and child Entities before calling this method. Declaration public Task AddAsync(IEnumerable<string> childIDs, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > childIDs The IDs of the child Entities to add. MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task AddAsync(String, IClientSessionHandle, CancellationToken) Adds a new child reference. WARNING: Make sure to save the parent and child Entities before calling this method. Declaration public Task AddAsync(string childID, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.String childID The ID of the child Entity to add. MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task ChildrenCountAsync(IClientSessionHandle, CountOptions, CancellationToken) Get the number of children for a relationship Declaration public Task<long> ChildrenCountAsync(IClientSessionHandle session = null, CountOptions options = null, CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction MongoDB.Driver.CountOptions options An optional AggregateOptions object System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < System.Int64 > ChildrenFluent(IClientSessionHandle, AggregateOptions) An IAggregateFluent of child Entities for the parent. Declaration public IAggregateFluent<TChild> ChildrenFluent(IClientSessionHandle session = null, AggregateOptions options = null) Parameters Type Name Description MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction MongoDB.Driver.AggregateOptions options An optional AggregateOptions object Returns Type Description MongoDB.Driver.IAggregateFluent <TChild> ChildrenQueryable(IClientSessionHandle, AggregateOptions) An IQueryable of child Entities for the parent. Declaration public IMongoQueryable<TChild> ChildrenQueryable(IClientSessionHandle session = null, AggregateOptions options = null) Parameters Type Name Description MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction MongoDB.Driver.AggregateOptions options An optional AggregateOptions object Returns Type Description MongoDB.Driver.Linq.IMongoQueryable <TChild> GetEnumerator() Declaration public IEnumerator<TChild> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <TChild> JoinFluent(IClientSessionHandle, AggregateOptions) An IAggregateFluent of JoinRecords for this relationship Declaration public IAggregateFluent<JoinRecord> JoinFluent(IClientSessionHandle session = null, AggregateOptions options = null) Parameters Type Name Description MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction MongoDB.Driver.AggregateOptions options An optional AggregateOptions object Returns Type Description MongoDB.Driver.IAggregateFluent < JoinRecord > JoinQueryable(IClientSessionHandle, AggregateOptions) An IQueryable of JoinRecords for this relationship Declaration public IMongoQueryable<JoinRecord> JoinQueryable(IClientSessionHandle session = null, AggregateOptions options = null) Parameters Type Name Description MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction MongoDB.Driver.AggregateOptions options An optional AggregateOptions object Returns Type Description MongoDB.Driver.Linq.IMongoQueryable < JoinRecord > ParentsFluent<TParent>(IAggregateFluent<TChild>) Get an IAggregateFluent of parents matching a supplied IAggregateFluent of children for this relationship. Declaration public IAggregateFluent<TParent> ParentsFluent<TParent>(IAggregateFluent<TChild> children) where TParent : IEntity Parameters Type Name Description MongoDB.Driver.IAggregateFluent <TChild> children An IAggregateFluent of children Returns Type Description MongoDB.Driver.IAggregateFluent <TParent> Type Parameters Name Description TParent The type of the parent IEntity ParentsFluent<TParent>(IEnumerable<String>, IClientSessionHandle, AggregateOptions) Get an IAggregateFluent of parents matching multiple child IDs for this relationship. Declaration public IAggregateFluent<TParent> ParentsFluent<TParent>(IEnumerable<string> childIDs, IClientSessionHandle session = null, AggregateOptions options = null) where TParent : IEntity Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > childIDs An IEnumerable of child IDs MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction MongoDB.Driver.AggregateOptions options An optional AggregateOptions object Returns Type Description MongoDB.Driver.IAggregateFluent <TParent> Type Parameters Name Description TParent The type of the parent IEntity ParentsFluent<TParent>(String, IClientSessionHandle, AggregateOptions) Get an IAggregateFluent of parents matching a single child ID for this relationship. Declaration public IAggregateFluent<TParent> ParentsFluent<TParent>(string childID, IClientSessionHandle session = null, AggregateOptions options = null) where TParent : IEntity Parameters Type Name Description System.String childID An child ID MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction MongoDB.Driver.AggregateOptions options An optional AggregateOptions object Returns Type Description MongoDB.Driver.IAggregateFluent <TParent> Type Parameters Name Description TParent The type of the parent IEntity ParentsQueryable<TParent>(IMongoQueryable<TChild>, IClientSessionHandle, AggregateOptions) Get an IQueryable of parents matching a supplied IQueryable of children for this relationship. Declaration public IMongoQueryable<TParent> ParentsQueryable<TParent>(IMongoQueryable<TChild> children, IClientSessionHandle session = null, AggregateOptions options = null) where TParent : IEntity Parameters Type Name Description MongoDB.Driver.Linq.IMongoQueryable <TChild> children An IQueryable of children MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction MongoDB.Driver.AggregateOptions options An optional AggregateOptions object Returns Type Description MongoDB.Driver.Linq.IMongoQueryable <TParent> Type Parameters Name Description TParent The type of the parent IEntity ParentsQueryable<TParent>(IEnumerable<String>, IClientSessionHandle, AggregateOptions) Get an IQueryable of parents matching multiple child IDs for this relationship. Declaration public IMongoQueryable<TParent> ParentsQueryable<TParent>(IEnumerable<string> childIDs, IClientSessionHandle session = null, AggregateOptions options = null) where TParent : IEntity Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > childIDs An IEnumerable of child IDs MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction MongoDB.Driver.AggregateOptions options An optional AggregateOptions object Returns Type Description MongoDB.Driver.Linq.IMongoQueryable <TParent> Type Parameters Name Description TParent The type of the parent IEntity ParentsQueryable<TParent>(String, IClientSessionHandle, AggregateOptions) Get an IQueryable of parents matching a single child ID for this relationship. Declaration public IMongoQueryable<TParent> ParentsQueryable<TParent>(string childID, IClientSessionHandle session = null, AggregateOptions options = null) where TParent : IEntity Parameters Type Name Description System.String childID A child ID MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction MongoDB.Driver.AggregateOptions options An optional AggregateOptions object Returns Type Description MongoDB.Driver.Linq.IMongoQueryable <TParent> Type Parameters Name Description TParent The type of the parent IEntity RemoveAsync(TChild, IClientSessionHandle, CancellationToken) Removes a child reference. Declaration public Task RemoveAsync(TChild child, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description TChild child The child IEntity to remove the reference of. MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task RemoveAsync(IEnumerable<TChild>, IClientSessionHandle, CancellationToken) Removes child references. Declaration public Task RemoveAsync(IEnumerable<TChild> children, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.Collections.Generic.IEnumerable <TChild> children The child Entities to remove the references of. MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task RemoveAsync(IEnumerable<String>, IClientSessionHandle, CancellationToken) Removes child references. Declaration public Task RemoveAsync(IEnumerable<string> childIDs, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > childIDs The IDs of the child Entities to remove the references of MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task RemoveAsync(String, IClientSessionHandle, CancellationToken) Removes a child reference. Declaration public Task RemoveAsync(string childID, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.String childID The ID of the child Entity to remove the reference of. MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods Extensions.ToBatches<T>(IEnumerable<T>, Int32) Extensions.ToDocuments<T>(IEnumerable<T>) Extensions.SaveAsync<T>(IEnumerable<T>, IClientSessionHandle, CancellationToken) Extensions.SaveOnlyAsync<T>(IEnumerable<T>, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken) Extensions.SaveExceptAsync<T>(IEnumerable<T>, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken) Extensions.DeleteAllAsync<T>(IEnumerable<T>, IClientSessionHandle) Extensions.SortByRelevance<T>(IEnumerable<T>, String, Func<T, String>, Nullable<Int32>)"
  },
  "api/MongoDB.Entities.Many-1.Joined-1.html": {
    "href": "api/MongoDB.Entities.Many-1.Joined-1.html",
    "title": "Class Many<TChild>.Joined<T> | MongoDB.Entities",
    "keywords": "Class Many<TChild>.Joined<T> A class used to hold join results when joining relationships Inheritance System.Object Entity JoinRecord Many<TChild>.Joined<T> Implements IEntity Inherited Members JoinRecord.ParentID JoinRecord.ChildID Entity.ID Entity.GenerateNewID() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public class Joined<T> : JoinRecord, IEntity Type Parameters Name Description T The type of the resulting objects Properties Results Declaration public T[] Results { get; set; } Property Value Type Description T[] Implements IEntity Extension Methods Extensions.Database<T>(T) Extensions.DatabaseName<T>(T) Extensions.Collection<T>(T) Extensions.CollectionName<T>(T) Extensions.Queryable<T>(T, AggregateOptions) Extensions.Fluent<T>(T, IClientSessionHandle, AggregateOptions) Extensions.ToReference<T>(T) Extensions.ToDocument<T>(T) Extensions.SaveAsync<T>(T, IClientSessionHandle, CancellationToken) Extensions.SaveOnlyAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken) Extensions.SaveExceptAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken) Extensions.SavePreservingAsync<T>(T, IClientSessionHandle, CancellationToken) Extensions.DeleteAsync<T>(T, IClientSessionHandle) Extensions.NextSequentialNumberAsync<T>(T) Extensions.InitOneToMany<TChild>(IEntity, Expression<Func<Many<TChild>>>) Extensions.InitManyToMany<TChild>(IEntity, Expression<Func<Many<TChild>>>, Expression<Func<TChild, Object>>)"
  },
  "api/MongoDB.Entities.ManyBase.html": {
    "href": "api/MongoDB.Entities.ManyBase.html",
    "title": "Class ManyBase | MongoDB.Entities",
    "keywords": "Class ManyBase Base class providing shared state for Many'1 classes Inheritance System.Object ManyBase Many<TChild> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public abstract class ManyBase"
  },
  "api/MongoDB.Entities.Migration.html": {
    "href": "api/MongoDB.Entities.Migration.html",
    "title": "Class Migration | MongoDB.Entities",
    "keywords": "Class Migration Represents a migration history item in the database Inheritance System.Object Entity Migration Implements IEntity Inherited Members Entity.ID Entity.GenerateNewID() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax [Name(\"_migration_history_\")] public class Migration : Entity, IEntity Properties Name Declaration public string Name { get; set; } Property Value Type Description System.String Number Declaration public int Number { get; set; } Property Value Type Description System.Int32 TimeTakenSeconds Declaration public double TimeTakenSeconds { get; set; } Property Value Type Description System.Double Implements IEntity Extension Methods Extensions.Database<T>(T) Extensions.DatabaseName<T>(T) Extensions.Collection<T>(T) Extensions.CollectionName<T>(T) Extensions.Queryable<T>(T, AggregateOptions) Extensions.Fluent<T>(T, IClientSessionHandle, AggregateOptions) Extensions.ToReference<T>(T) Extensions.ToDocument<T>(T) Extensions.SaveAsync<T>(T, IClientSessionHandle, CancellationToken) Extensions.SaveOnlyAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken) Extensions.SaveExceptAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken) Extensions.SavePreservingAsync<T>(T, IClientSessionHandle, CancellationToken) Extensions.DeleteAsync<T>(T, IClientSessionHandle) Extensions.NextSequentialNumberAsync<T>(T) Extensions.InitOneToMany<TChild>(IEntity, Expression<Func<Many<TChild>>>) Extensions.InitManyToMany<TChild>(IEntity, Expression<Func<Many<TChild>>>, Expression<Func<TChild, Object>>)"
  },
  "api/MongoDB.Entities.NameAttribute.html": {
    "href": "api/MongoDB.Entities.NameAttribute.html",
    "title": "Class NameAttribute | MongoDB.Entities",
    "keywords": "Class NameAttribute Use this attribute to specify a custom MongoDB collection name for an IEntity. Inheritance System.Object System.Attribute NameAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public class NameAttribute : Attribute Constructors NameAttribute(String) Use this attribute to specify a custom MongoDB collection name for an IEntity. Declaration public NameAttribute(string name) Parameters Type Name Description System.String name The name you want to use for the collection Properties Name Declaration public string Name { get; } Property Value Type Description System.String"
  },
  "api/MongoDB.Entities.ObjectIdAttribute.html": {
    "href": "api/MongoDB.Entities.ObjectIdAttribute.html",
    "title": "Class ObjectIdAttribute | MongoDB.Entities",
    "keywords": "Class ObjectIdAttribute Use this attribute to mark a property in order to save it in MongoDB server as ObjectId Inheritance System.Object System.Attribute MongoDB.Bson.Serialization.Attributes.BsonSerializationOptionsAttribute MongoDB.Bson.Serialization.Attributes.BsonRepresentationAttribute ObjectIdAttribute Implements MongoDB.Bson.Serialization.IBsonMemberMapAttribute Inherited Members MongoDB.Bson.Serialization.Attributes.BsonRepresentationAttribute.Apply(MongoDB.Bson.Serialization.IBsonSerializer) MongoDB.Bson.Serialization.Attributes.BsonRepresentationAttribute.Representation MongoDB.Bson.Serialization.Attributes.BsonRepresentationAttribute.AllowOverflow MongoDB.Bson.Serialization.Attributes.BsonRepresentationAttribute.AllowTruncation MongoDB.Bson.Serialization.Attributes.BsonSerializationOptionsAttribute.Apply(MongoDB.Bson.Serialization.BsonMemberMap) System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public class ObjectIdAttribute : BsonRepresentationAttribute, IBsonMemberMapAttribute Constructors ObjectIdAttribute() Declaration public ObjectIdAttribute() Implements MongoDB.Bson.Serialization.IBsonMemberMapAttribute"
  },
  "api/MongoDB.Entities.One-1.html": {
    "href": "api/MongoDB.Entities.One-1.html",
    "title": "Class One<T> | MongoDB.Entities",
    "keywords": "Class One<T> Represents a one-to-one relationship with an IEntity. Inheritance System.Object One<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public class One<T> where T : IEntity Type Parameters Name Description T Any type that implements IEntity Constructors One() Declaration public One() Properties ID The Id of the entity referenced by this instance. Declaration [AsObjectId] public string ID { get; set; } Property Value Type Description System.String Methods ToEntityAsync(IClientSessionHandle, CancellationToken) Fetches the actual entity this reference represents from the database. Declaration public Task<T> ToEntityAsync(IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description MongoDB.Driver.IClientSessionHandle session An optional session System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task <T> A Task containing the actual entity ToEntityAsync(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, T>>, IClientSessionHandle, CancellationToken) Fetches the actual entity this reference represents from the database with a projection. Declaration public Task<T> ToEntityAsync(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, T>> projection, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.Func < MongoDB.Driver.ProjectionDefinitionBuilder <T>, MongoDB.Driver.ProjectionDefinition <T, T>> projection p=> p.Include(\"Prop1\").Exclude(\"Prop2\") MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task <T> A Task containing the actual projected entity ToEntityAsync(Expression<Func<T, T>>, IClientSessionHandle, CancellationToken) Fetches the actual entity this reference represents from the database with a projection. Declaration public Task<T> ToEntityAsync(Expression<Func<T, T>> projection, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, T>> projection x => new Test { PropName = x.Prop } MongoDB.Driver.IClientSessionHandle session An optional session if using within a transaction System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task <T> A Task containing the actual projected entity Operators Implicit(T to One<T>) Operator for returning a new One<T> object from an entity Declaration public static implicit operator One<T>(T entity) Parameters Type Name Description T entity The entity to make a reference to Returns Type Description One <T> Implicit(String to One<T>) Operator for returning a new One<T> object from a string ID Declaration public static implicit operator One<T>(string id) Parameters Type Name Description System.String id The ID to create a new One<T> with Returns Type Description One <T>"
  },
  "api/MongoDB.Entities.Order.html": {
    "href": "api/MongoDB.Entities.Order.html",
    "title": "Enum Order | MongoDB.Entities",
    "keywords": "Enum Order Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public enum Order Fields Name Description Ascending Descending"
  },
  "api/MongoDB.Entities.OwnerSideAttribute.html": {
    "href": "api/MongoDB.Entities.OwnerSideAttribute.html",
    "title": "Class OwnerSideAttribute | MongoDB.Entities",
    "keywords": "Class OwnerSideAttribute Indicates that this property is the owner side of a many-to-many relationship Inheritance System.Object System.Attribute OwnerSideAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public class OwnerSideAttribute : Attribute"
  },
  "api/MongoDB.Entities.PreserveAttribute.html": {
    "href": "api/MongoDB.Entities.PreserveAttribute.html",
    "title": "Class PreserveAttribute | MongoDB.Entities",
    "keywords": "Class PreserveAttribute Use this attribute on properties that you want to omit when using SavePreserving() instead of supplying an expression. TIP: These attribute decorations are only effective if you do not specify a preservation expression when calling SavePreserving() Inheritance System.Object System.Attribute PreserveAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public class PreserveAttribute : Attribute"
  },
  "api/MongoDB.Entities.Prop.html": {
    "href": "api/MongoDB.Entities.Prop.html",
    "title": "Class Prop | MongoDB.Entities",
    "keywords": "Class Prop This class provides methods to generate property path strings from lambda expression. Inheritance System.Object Prop Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public static class Prop Methods Collection<T>() Returns the collection/entity name of a given entity type Declaration public static string Collection<T>() where T : IEntity Returns Type Description System.String Type Parameters Name Description T The type of the entity to get the collection name of Elements<T>(Int32, Expression<Func<T, Object>>) Returns a path with the filtered positional identifier prepended to the property path. EX: 0, x => x.Rating > a.Rating EX: 1, x => x.Rating > b.Rating TIP: Index positions start from '0' which is converted to 'a' and so on. Declaration public static string Elements<T>(int index, Expression<Func<T, object>> expression) Parameters Type Name Description System.Int32 index 0=a 1=b 2=c 3=d and so on... System.Linq.Expressions.Expression < System.Func <T, System.Object >> expression x => x.SomeProp Returns Type Description System.String Type Parameters Name Description T Elements<T>(Expression<Func<T, Object>>) Returns a path without any filtered positional identifier prepended to it. EX: b => b.Tags > Tags Declaration public static string Elements<T>(Expression<Func<T, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> expression x => x.SomeProp Returns Type Description System.String Type Parameters Name Description T Path<T>(Expression<Func<T, Object>>) Returns the full dotted path for a given expression. EX: Authors[0].Books[0].Title > Authors.Books.Title Declaration public static string Path<T>(Expression<Func<T, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> expression x => x.SomeList[0].SomeProp Returns Type Description System.String Type Parameters Name Description T PosAll<T>(Expression<Func<T, Object>>) Returns a path with the all positional operator $[] for a given expression. EX: Authors[0].Name > Authors.$[].Name Declaration public static string PosAll<T>(Expression<Func<T, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> expression x => x.SomeList[0].SomeProp Returns Type Description System.String Type Parameters Name Description T PosFiltered<T>(Expression<Func<T, Object>>) Returns a path with filtered positional identifiers $[x] for a given expression. EX: Authors[0].Name > Authors.$[a].Name EX: Authors[1].Age > Authors.$[b].Age EX: Authors[2].Books[3].Title > Authors.$[c].Books.$[d].Title TIP: Index positions start from [0] which is converted to $[a] and so on. Declaration public static string PosFiltered<T>(Expression<Func<T, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> expression x => x.SomeList[0].SomeProp Returns Type Description System.String Type Parameters Name Description T PosFirst<T>(Expression<Func<T, Object>>) Returns a path with the first positional operator $ for a given expression. EX: Authors[0].Name > Authors.$.Name Declaration public static string PosFirst<T>(Expression<Func<T, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> expression x => x.SomeList[0].SomeProp Returns Type Description System.String Type Parameters Name Description T Property<T>(Expression<Func<T, Object>>) Returns the name of the property for a given expression. EX: Authors[0].Books[0].Title > Title Declaration public static string Property<T>(Expression<Func<T, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> expression x => x.SomeList[0].SomeProp Returns Type Description System.String Type Parameters Name Description T"
  },
  "api/MongoDB.Entities.Search.html": {
    "href": "api/MongoDB.Entities.Search.html",
    "title": "Enum Search | MongoDB.Entities",
    "keywords": "Enum Search Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public enum Search Fields Name Description Full Fuzzy"
  },
  "api/MongoDB.Entities.Template.html": {
    "href": "api/MongoDB.Entities.Template.html",
    "title": "Class Template | MongoDB.Entities",
    "keywords": "Class Template A helper class to build a JSON command from a string with tag replacement Inheritance System.Object Template Template<TInput, TResult> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public class Template Constructors Template(String) Initialize a command builder with the supplied template string. Declaration public Template(string template) Parameters Type Name Description System.String template The template string with tags for targeting replacements such as \"<Author.Name>\" Methods Collection<TEntity>() Gets the collection name of a given entity type and replaces matching tags in the template such as \"<EntityName>\" Declaration public Template Collection<TEntity>() where TEntity : IEntity Returns Type Description Template Type Parameters Name Description TEntity The type of entity to get the collection name of Elements<T>(Int32, Expression<Func<T, Object>>) Turns the given index and expression into a path with the filtered positional identifier prepended to the property path like \"a.Name\" and replaces matching tags in the template such as \"<a.Name>\" Declaration public Template Elements<T>(int index, Expression<Func<T, object>> expression) Parameters Type Name Description System.Int32 index 0=a 1=b 2=c 3=d and so on... System.Linq.Expressions.Expression < System.Func <T, System.Object >> expression x => x.SomeProp Returns Type Description Template Type Parameters Name Description T Elements<T>(Expression<Func<T, Object>>) Turns the given expression into a path without any filtered positional identifier prepended to it like \"Name\" and replaces matching tags in the template such as \"<Name>\" Declaration public Template Elements<T>(Expression<Func<T, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> expression x => x.SomeProp Returns Type Description Template Type Parameters Name Description T Path<T>(Expression<Func<T, Object>>) Turns the given expression into a dotted path like \"SomeList.SomeProp\" and replaces matching tags in the template such as \"<SomeList.SomeProp>\" Declaration public Template Path<T>(Expression<Func<T, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> expression x => x.SomeList[0].SomeProp Returns Type Description Template Type Parameters Name Description T Paths<T>(Expression<Func<T, Object>>) Turns the property paths in the given new expression into paths like \"Prop1.Child1 & Prop2.Child2\" and replaces matching tags in the template. Declaration public Template Paths<T>(Expression<Func<T, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> expression x => new { x.Prop1.Child1, x.Prop2.Child2 } Returns Type Description Template Type Parameters Name Description T PosAll<T>(Expression<Func<T, Object>>) Turns the given expression into a path with the all positional operator like \"Authors.$[].Name\" and replaces matching tags in the template such as \"<Authors.$[].Name>\" Declaration public Template PosAll<T>(Expression<Func<T, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> expression x => x.SomeList[0].SomeProp Returns Type Description Template Type Parameters Name Description T PosFiltered<T>(Expression<Func<T, Object>>) Turns the given expression into a positional filtered path like \"Authors.$[a].Name\" and replaces matching tags in the template such as \"<Authors.$[a].Name>\" TIP: Index positions start from [0] which is converted to $[a] and so on. Declaration public Template PosFiltered<T>(Expression<Func<T, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> expression x => x.SomeList[0].SomeProp Returns Type Description Template Type Parameters Name Description T PosFirst<T>(Expression<Func<T, Object>>) Turns the given expression into a path with the first positional operator like \"Authors.$.Name\" and replaces matching tags in the template such as \"<Authors.$.Name>\" Declaration public Template PosFirst<T>(Expression<Func<T, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> expression x => x.SomeList[0].SomeProp Returns Type Description Template Type Parameters Name Description T Property<T>(Expression<Func<T, Object>>) Turns the given member expression into a property name like \"SomeProp\" and replaces matching tags in the template such as \"<SomeProp>\" Declaration public Template Property<T>(Expression<Func<T, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> expression x => x.RootProp.SomeProp Returns Type Description Template Type Parameters Name Description T Tag(String, String) Replaces the given tag in the template like \"<search_term>\" with the supplied value. Declaration public Template Tag(string tagName, string replacementValue) Parameters Type Name Description System.String tagName The tag name without the surrounding < and > System.String replacementValue The value to replace with Returns Type Description Template ToArrayFilters<T>() Executes the tag replacement and returns array filter definitions. TIP: if all the tags don't match, an exception will be thrown. Declaration public IEnumerable<ArrayFilterDefinition> ToArrayFilters<T>() Returns Type Description System.Collections.Generic.IEnumerable < MongoDB.Driver.ArrayFilterDefinition > Type Parameters Name Description T ToPipeline<TInput, TOutput>() Executes the tag replacement and returns a pipeline definition. TIP: if all the tags don't match, an exception will be thrown. Declaration public PipelineDefinition<TInput, TOutput> ToPipeline<TInput, TOutput>() Returns Type Description MongoDB.Driver.PipelineDefinition <TInput, TOutput> Type Parameters Name Description TInput The input type TOutput The output type ToStages() Executes the tag replacement and returns the pipeline stages as an array of BsonDocuments. TIP: if all the tags don't match, an exception will be thrown. Declaration public IEnumerable<BsonDocument> ToStages() Returns Type Description System.Collections.Generic.IEnumerable < MongoDB.Bson.BsonDocument > ToString() Executes the tag replacement and returns a string. TIP: if all the tags don't match, an exception will be thrown. Declaration public string ToString() Returns Type Description System.String"
  },
  "api/MongoDB.Entities.Template-1.html": {
    "href": "api/MongoDB.Entities.Template-1.html",
    "title": "Class Template<T> | MongoDB.Entities",
    "keywords": "Class Template<T> A helper class to build a JSON command from a string with tag replacement Inheritance System.Object Template Template <T, T> Template<T> Inherited Members Template<T, T>.Collection<TEntity>() Template<T, T>.Property(Expression<Func<T, Object>>) Template<T, T>.PropertyOfResult(Expression<Func<T, Object>>) Template<T, T>.Property<TOther>(Expression<Func<TOther, Object>>) Template<T, T>.Path(Expression<Func<T, Object>>) Template<T, T>.PathOfResult(Expression<Func<T, Object>>) Template<T, T>.Path<TOther>(Expression<Func<TOther, Object>>) Template<T, T>.Paths(Expression<Func<T, Object>>) Template<T, T>.PathsOfResult(Expression<Func<T, Object>>) Template<T, T>.Paths<TOther>(Expression<Func<TOther, Object>>) Template<T, T>.PosFiltered(Expression<Func<T, Object>>) Template<T, T>.PosFilteredOfResult(Expression<Func<T, Object>>) Template<T, T>.PosFiltered<TOther>(Expression<Func<TOther, Object>>) Template<T, T>.PosAll(Expression<Func<T, Object>>) Template<T, T>.PosAllOfResult(Expression<Func<T, Object>>) Template<T, T>.PosAll<TOther>(Expression<Func<TOther, Object>>) Template<T, T>.PosFirst(Expression<Func<T, Object>>) Template<T, T>.PosFirstOfResult(Expression<Func<T, Object>>) Template<T, T>.PosFirst<TOther>(Expression<Func<TOther, Object>>) Template<T, T>.Elements(Expression<Func<T, Object>>) Template<T, T>.ElementsOfResult(Expression<Func<T, Object>>) Template<T, T>.Elements<TOther>(Expression<Func<TOther, Object>>) Template<T, T>.Elements(Int32, Expression<Func<T, Object>>) Template<T, T>.ElementsOfResult(Int32, Expression<Func<T, Object>>) Template<T, T>.Elements<TOther>(Int32, Expression<Func<TOther, Object>>) Template<T, T>.Tag(String, String) Template<T, T>.ToPipeline() Template<T, T>.ToArrayFilters() Template.Collection<TEntity>() Template.Property<T>(Expression<Func<T, Object>>) Template.Path<T>(Expression<Func<T, Object>>) Template.Paths<T>(Expression<Func<T, Object>>) Template.PosFiltered<T>(Expression<Func<T, Object>>) Template.PosAll<T>(Expression<Func<T, Object>>) Template.PosFirst<T>(Expression<Func<T, Object>>) Template.Elements<T>(Expression<Func<T, Object>>) Template.Elements<T>(Int32, Expression<Func<T, Object>>) Template.Tag(String, String) Template.ToString() Template.ToStages() Template.ToPipeline<TInput, TOutput>() Template.ToArrayFilters<T>() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public class Template<T> : Template<T, T> where T : IEntity Type Parameters Name Description T Any type that implements IEntity Constructors Template(String) Initializes a template with a tagged input string. Declaration public Template(string template) Parameters Type Name Description System.String template The template string with tags for targeting replacements such as \"<Author.Name>\""
  },
  "api/MongoDB.Entities.Template-2.html": {
    "href": "api/MongoDB.Entities.Template-2.html",
    "title": "Class Template<TInput, TResult> | MongoDB.Entities",
    "keywords": "Class Template<TInput, TResult> A helper class to build a JSON command from a string with tag replacement Inheritance System.Object Template Template<TInput, TResult> Template<T> Inherited Members Template.Property<T>(Expression<Func<T, Object>>) Template.Path<T>(Expression<Func<T, Object>>) Template.Paths<T>(Expression<Func<T, Object>>) Template.PosFiltered<T>(Expression<Func<T, Object>>) Template.PosAll<T>(Expression<Func<T, Object>>) Template.PosFirst<T>(Expression<Func<T, Object>>) Template.Elements<T>(Expression<Func<T, Object>>) Template.Elements<T>(Int32, Expression<Func<T, Object>>) Template.ToString() Template.ToStages() Template.ToPipeline<TInput, TOutput>() Template.ToArrayFilters<T>() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public class Template<TInput, TResult> : Template where TInput : IEntity Type Parameters Name Description TInput The input type TResult The output type Constructors Template(String) Initializes a template with a tagged input string. Declaration public Template(string template) Parameters Type Name Description System.String template The template string with tags for targeting replacements such as \"<Author.Name>\" Methods Collection<TEntity>() Gets the collection name of a given entity type and replaces matching tags in the template such as \"<EntityName>\" Declaration public Template<TInput, TResult> Collection<TEntity>() where TEntity : IEntity Returns Type Description Template <TInput, TResult> Type Parameters Name Description TEntity The type of entity to get the collection name of Elements(Int32, Expression<Func<TInput, Object>>) Turns the given index and expression (of input type) to a path with the filtered positional identifier prepended to the property path like \"a.Name\" and replaces matching tags in the template such as \"<a.Name>\" Declaration public Template<TInput, TResult> Elements(int index, Expression<Func<TInput, object>> expression) Parameters Type Name Description System.Int32 index 0=a 1=b 2=c 3=d and so on... System.Linq.Expressions.Expression < System.Func <TInput, System.Object >> expression x => x.SomeProp Returns Type Description Template <TInput, TResult> Elements(Expression<Func<TInput, Object>>) Turns the given expression (of input type) to a path without any filtered positional identifier prepended to it like \"Name\" and replaces matching tags in the template such as \"<Name>\" Declaration public Template<TInput, TResult> Elements(Expression<Func<TInput, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TInput, System.Object >> expression x => x.SomeProp Returns Type Description Template <TInput, TResult> Elements<TOther>(Int32, Expression<Func<TOther, Object>>) Turns the given index and expression (of any type) to a path with the filtered positional identifier prepended to the property path like \"a.Name\" and replaces matching tags in the template such as \"<a.Name>\" Declaration public Template<TInput, TResult> Elements<TOther>(int index, Expression<Func<TOther, object>> expression) Parameters Type Name Description System.Int32 index 0=a 1=b 2=c 3=d and so on... System.Linq.Expressions.Expression < System.Func <TOther, System.Object >> expression x => x.SomeProp Returns Type Description Template <TInput, TResult> Type Parameters Name Description TOther Elements<TOther>(Expression<Func<TOther, Object>>) Turns the given expression (of any type) to a path without any filtered positional identifier prepended to it like \"Name\" and replaces matching tags in the template such as \"<Name>\" Declaration public Template<TInput, TResult> Elements<TOther>(Expression<Func<TOther, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TOther, System.Object >> expression x => x.SomeProp Returns Type Description Template <TInput, TResult> Type Parameters Name Description TOther ElementsOfResult(Int32, Expression<Func<TResult, Object>>) Turns the given index and expression (of output type) to a path with the filtered positional identifier prepended to the property path like \"a.Name\" and replaces matching tags in the template such as \"<a.Name>\" Declaration public Template<TInput, TResult> ElementsOfResult(int index, Expression<Func<TResult, object>> expression) Parameters Type Name Description System.Int32 index 0=a 1=b 2=c 3=d and so on... System.Linq.Expressions.Expression < System.Func <TResult, System.Object >> expression x => x.SomeProp Returns Type Description Template <TInput, TResult> ElementsOfResult(Expression<Func<TResult, Object>>) Turns the given expression (of output type) to a path without any filtered positional identifier prepended to it like \"Name\" and replaces matching tags in the template such as \"<Name>\" Declaration public Template<TInput, TResult> ElementsOfResult(Expression<Func<TResult, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TResult, System.Object >> expression x => x.SomeProp Returns Type Description Template <TInput, TResult> Path(Expression<Func<TInput, Object>>) Turns the given expression (of input type) to a dotted path like \"SomeList.SomeProp\" and replaces matching tags in the template such as \"<SomeList.SomeProp>\" Declaration public Template<TInput, TResult> Path(Expression<Func<TInput, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TInput, System.Object >> expression x => x.SomeList[0].SomeProp Returns Type Description Template <TInput, TResult> Path<TOther>(Expression<Func<TOther, Object>>) Turns the given expression (of any type) to a dotted path like \"SomeList.SomeProp\" and replaces matching tags in the template such as \"<SomeList.SomeProp>\" Declaration public Template<TInput, TResult> Path<TOther>(Expression<Func<TOther, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TOther, System.Object >> expression x => x.SomeList[0].SomeProp Returns Type Description Template <TInput, TResult> Type Parameters Name Description TOther PathOfResult(Expression<Func<TResult, Object>>) Turns the given expression (of output type) to a dotted path like \"SomeList.SomeProp\" and replaces matching tags in the template such as \"<SomeList.SomeProp>\" Declaration public Template<TInput, TResult> PathOfResult(Expression<Func<TResult, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TResult, System.Object >> expression x => x.SomeList[0].SomeProp Returns Type Description Template <TInput, TResult> Paths(Expression<Func<TInput, Object>>) Turns the property paths in the given new expression (of input type) into paths like \"Prop1.Child1 & Prop2.Child2\" and replaces matching tags in the template. Declaration public Template<TInput, TResult> Paths(Expression<Func<TInput, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TInput, System.Object >> expression x => new { x.Prop1.Child1, x.Prop2.Child2 } Returns Type Description Template <TInput, TResult> Paths<TOther>(Expression<Func<TOther, Object>>) Turns the property paths in the given new expression (of any type) into paths like \"Prop1.Child1 & Prop2.Child2\" and replaces matching tags in the template. Declaration public Template<TInput, TResult> Paths<TOther>(Expression<Func<TOther, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TOther, System.Object >> expression x => new { x.Prop1.Child1, x.Prop2.Child2 } Returns Type Description Template <TInput, TResult> Type Parameters Name Description TOther PathsOfResult(Expression<Func<TResult, Object>>) Turns the property paths in the given new expression (of output type) into paths like \"Prop1.Child1 & Prop2.Child2\" and replaces matching tags in the template. Declaration public Template<TInput, TResult> PathsOfResult(Expression<Func<TResult, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TResult, System.Object >> expression x => new { x.Prop1.Child1, x.Prop2.Child2 } Returns Type Description Template <TInput, TResult> PosAll(Expression<Func<TInput, Object>>) Turns the given expression (of input type) to a path with the all positional operator like \"Authors.$[].Name\" and replaces matching tags in the template such as \"<Authors.$[].Name>\" Declaration public Template<TInput, TResult> PosAll(Expression<Func<TInput, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TInput, System.Object >> expression x => x.SomeList[0].SomeProp Returns Type Description Template <TInput, TResult> PosAll<TOther>(Expression<Func<TOther, Object>>) Turns the given expression (of any type) to a path with the all positional operator like \"Authors.$[].Name\" and replaces matching tags in the template such as \"<Authors.$[].Name>\" Declaration public Template<TInput, TResult> PosAll<TOther>(Expression<Func<TOther, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TOther, System.Object >> expression x => x.SomeList[0].SomeProp Returns Type Description Template <TInput, TResult> Type Parameters Name Description TOther PosAllOfResult(Expression<Func<TResult, Object>>) Turns the given expression (of output type) to a path with the all positional operator like \"Authors.$[].Name\" and replaces matching tags in the template such as \"<Authors.$[].Name>\" Declaration public Template<TInput, TResult> PosAllOfResult(Expression<Func<TResult, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TResult, System.Object >> expression x => x.SomeList[0].SomeProp Returns Type Description Template <TInput, TResult> PosFiltered(Expression<Func<TInput, Object>>) Turns the given expression (of input type) to a positional filtered path like \"Authors.$[a].Name\" and replaces matching tags in the template such as \"<Authors.$[a].Name>\" TIP: Index positions start from [0] which is converted to $[a] and so on. Declaration public Template<TInput, TResult> PosFiltered(Expression<Func<TInput, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TInput, System.Object >> expression x => x.SomeList[0].SomeProp Returns Type Description Template <TInput, TResult> PosFiltered<TOther>(Expression<Func<TOther, Object>>) Turns the given expression (of any type) to a positional filtered path like \"Authors.$[a].Name\" and replaces matching tags in the template such as \"<Authors.$[a].Name>\" TIP: Index positions start from [0] which is converted to $[a] and so on. Declaration public Template<TInput, TResult> PosFiltered<TOther>(Expression<Func<TOther, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TOther, System.Object >> expression x => x.SomeList[0].SomeProp Returns Type Description Template <TInput, TResult> Type Parameters Name Description TOther PosFilteredOfResult(Expression<Func<TResult, Object>>) Turns the given expression (of output type) to a positional filtered path like \"Authors.$[a].Name\" and replaces matching tags in the template such as \"<Authors.$[a].Name>\" TIP: Index positions start from [0] which is converted to $[a] and so on. Declaration public Template<TInput, TResult> PosFilteredOfResult(Expression<Func<TResult, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TResult, System.Object >> expression x => x.SomeList[0].SomeProp Returns Type Description Template <TInput, TResult> PosFirst(Expression<Func<TInput, Object>>) Turns the given expression (of input type) to a path with the first positional operator like \"Authors.$.Name\" and replaces matching tags in the template such as \"<Authors.$.Name>\" Declaration public Template<TInput, TResult> PosFirst(Expression<Func<TInput, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TInput, System.Object >> expression x => x.SomeList[0].SomeProp Returns Type Description Template <TInput, TResult> PosFirst<TOther>(Expression<Func<TOther, Object>>) Turns the given expression (of any type) to a path with the first positional operator like \"Authors.$.Name\" and replaces matching tags in the template such as \"<Authors.$.Name>\" Declaration public Template<TInput, TResult> PosFirst<TOther>(Expression<Func<TOther, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TOther, System.Object >> expression x => x.SomeList[0].SomeProp Returns Type Description Template <TInput, TResult> Type Parameters Name Description TOther PosFirstOfResult(Expression<Func<TResult, Object>>) Turns the given expression (of output type) to a path with the first positional operator like \"Authors.$.Name\" and replaces matching tags in the template such as \"<Authors.$.Name>\" Declaration public Template<TInput, TResult> PosFirstOfResult(Expression<Func<TResult, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TResult, System.Object >> expression x => x.SomeList[0].SomeProp Returns Type Description Template <TInput, TResult> Property(Expression<Func<TInput, Object>>) Turns the given member expression (of input type) into a property name like \"SomeProp\" and replaces matching tags in the template such as \"<SomeProp>\" Declaration public Template<TInput, TResult> Property(Expression<Func<TInput, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TInput, System.Object >> expression x => x.RootProp.SomeProp Returns Type Description Template <TInput, TResult> Property<TOther>(Expression<Func<TOther, Object>>) Turns the given member expression (of any type) into a property name like \"SomeProp\" and replaces matching tags in the template such as \"<SomeProp>\" Declaration public Template<TInput, TResult> Property<TOther>(Expression<Func<TOther, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TOther, System.Object >> expression x => x.RootProp.SomeProp Returns Type Description Template <TInput, TResult> Type Parameters Name Description TOther PropertyOfResult(Expression<Func<TResult, Object>>) Turns the given member expression (of output type) into a property name like \"SomeProp\" and replaces matching tags in the template such as \"<SomeProp>\" Declaration public Template<TInput, TResult> PropertyOfResult(Expression<Func<TResult, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TResult, System.Object >> expression x => x.RootProp.SomeProp Returns Type Description Template <TInput, TResult> Tag(String, String) Replaces the given tag in the template like \"<search_term>\" with the supplied value. Declaration public Template<TInput, TResult> Tag(string tagName, string replacementValue) Parameters Type Name Description System.String tagName The tag name without the surrounding < and > System.String replacementValue The value to replace with Returns Type Description Template <TInput, TResult> ToArrayFilters() Executes the tag replacement and returns array filter definitions. TIP: if all the tags don't match, an exception will be thrown. Declaration public IEnumerable<ArrayFilterDefinition> ToArrayFilters() Returns Type Description System.Collections.Generic.IEnumerable < MongoDB.Driver.ArrayFilterDefinition > ToPipeline() Executes the tag replacement and returns a pipeline definition. TIP: if all the tags don't match, an exception will be thrown. Declaration public PipelineDefinition<TInput, TResult> ToPipeline() Returns Type Description MongoDB.Driver.PipelineDefinition <TInput, TResult>"
  },
  "api/MongoDB.Entities.Transaction.html": {
    "href": "api/MongoDB.Entities.Transaction.html",
    "title": "Class Transaction | MongoDB.Entities",
    "keywords": "Class Transaction Represents a transaction used to carry out inter-related write operations. TIP: Remember to always call .Dispose() after use or enclose in a 'Using' statement. IMPORTANT: Use the methods on this transaction to perform operations and not the methods on the DB class. Inheritance System.Object DBContext Transaction Implements System.IDisposable Inherited Members DBContext.session DBContext.CountAsync<T>(Expression<Func<T, Boolean>>, CancellationToken) DBContext.CountAsync<T>(CancellationToken) DBContext.CountAsync<T>(FilterDefinition<T>, CancellationToken) DBContext.CountAsync<T>(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>, CancellationToken) DBContext.Update<T>() DBContext.UpdateAndGet<T>() DBContext.UpdateAndGet<T, TProjection>() DBContext.Find<T>() DBContext.Find<T, TProjection>() DBContext.Fluent<T>(AggregateOptions) DBContext.Queryable<T>(AggregateOptions) DBContext.PipelineCursorAsync<T, TResult>(Template<T, TResult>, AggregateOptions, CancellationToken) DBContext.PipelineAsync<T, TResult>(Template<T, TResult>, AggregateOptions, CancellationToken) DBContext.PipelineSingleAsync<T, TResult>(Template<T, TResult>, AggregateOptions, CancellationToken) DBContext.PipelineFirstAsync<T, TResult>(Template<T, TResult>, AggregateOptions, CancellationToken) DBContext.GeoNear<T>(Coordinates2D, Expression<Func<T, Object>>, Boolean, Nullable<Int32>, Nullable<Int32>, Nullable<Int32>, BsonDocument, Nullable<Int32>, Expression<Func<T, Object>>, String, AggregateOptions) DBContext.SaveAsync<T>(T, CancellationToken) DBContext.SaveAsync<T>(IEnumerable<T>, CancellationToken) DBContext.SaveOnlyAsync<T>(T, Expression<Func<T, Object>>, CancellationToken) DBContext.SaveOnlyAsync<T>(IEnumerable<T>, Expression<Func<T, Object>>, CancellationToken) DBContext.SaveExceptAsync<T>(T, Expression<Func<T, Object>>, CancellationToken) DBContext.SaveExceptAsync<T>(IEnumerable<T>, Expression<Func<T, Object>>, CancellationToken) DBContext.SavePreservingAsync<T>(T, CancellationToken) DBContext.DeleteAsync<T>(String, CancellationToken) DBContext.DeleteAsync<T>(Expression<Func<T, Boolean>>, CancellationToken) DBContext.DeleteAsync<T>(IEnumerable<String>, CancellationToken) DBContext.FluentTextSearch<T>(Search, String, Boolean, Boolean, String, AggregateOptions) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public class Transaction : DBContext, IDisposable Constructors Transaction(String, ClientSessionOptions) Instantiates and begins a transaction. Declaration public Transaction(string database = null, ClientSessionOptions options = null) Parameters Type Name Description System.String database The name of the database to use for this transaction. default db is used if not specified MongoDB.Driver.ClientSessionOptions options Client session options for this transaction Properties Session Declaration public IClientSessionHandle Session { get; } Property Value Type Description MongoDB.Driver.IClientSessionHandle Methods AbortAsync(CancellationToken) Aborts and rolls back a transaction Declaration public Task AbortAsync(CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task CommitAsync(CancellationToken) Commits a transaction to MongoDB Declaration public Task CommitAsync(CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Implements System.IDisposable"
  },
  "api/MongoDB.Entities.Update-1.html": {
    "href": "api/MongoDB.Entities.Update-1.html",
    "title": "Class Update<T> | MongoDB.Entities",
    "keywords": "Class Update<T> Represents an update command TIP: Specify a filter first with the .Match(). Then set property values with .Modify() and finally call .Execute() to run the command. Inheritance System.Object Update<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public class Update<T> where T : IEntity Type Parameters Name Description T Any class that implements IEntity Methods AddToQueue() Queue up an update command for bulk execution later. Declaration public Update<T> AddToQueue() Returns Type Description Update <T> ExecuteAsync(CancellationToken) Run the update command in MongoDB. Declaration public Task<UpdateResult> ExecuteAsync(CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.UpdateResult > ExecutePipelineAsync(CancellationToken) Run the update command with pipeline stages Declaration public Task<UpdateResult> ExecutePipelineAsync(CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task < MongoDB.Driver.UpdateResult > Match(Template) Specify the Entity matching criteria with a Template Declaration public Update<T> Match(Template template) Parameters Type Name Description Template template The filter Template Returns Type Description Update <T> Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>) Specify the Entity matching criteria with a filter expression Declaration public Update<T> Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>> filter) Parameters Type Name Description System.Func < MongoDB.Driver.FilterDefinitionBuilder <T>, MongoDB.Driver.FilterDefinition <T>> filter f => f.Eq(x => x.Prop, Value) & f.Gt(x => x.Prop, Value) Returns Type Description Update <T> Match(Expression<Func<T, Boolean>>) Specify the IEntity matching criteria with a lambda expression Declaration public Update<T> Match(Expression<Func<T, bool>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> expression A lambda expression to select the Entities to update Returns Type Description Update <T> Match(String) Specify the Entity matching criteria with a JSON string Declaration public Update<T> Match(string jsonString) Parameters Type Name Description System.String jsonString { Title : 'The Power Of Now' } Returns Type Description Update <T> MatchID(String) Specify an IEntity ID as the matching criteria Declaration public Update<T> MatchID(string ID) Parameters Type Name Description System.String ID A unique IEntity ID Returns Type Description Update <T> Modify(Template) Specify an update with a Template to modify the Entities (use multiple times if needed) Declaration public Update<T> Modify(Template template) Parameters Type Name Description Template template A Template with a single update Returns Type Description Update <T> Modify(Func<UpdateDefinitionBuilder<T>, UpdateDefinition<T>>) Specify the update definition builder operation to modify the Entities (use multiple times if needed) Declaration public Update<T> Modify(Func<UpdateDefinitionBuilder<T>, UpdateDefinition<T>> operation) Parameters Type Name Description System.Func < MongoDB.Driver.UpdateDefinitionBuilder <T>, MongoDB.Driver.UpdateDefinition <T>> operation b => b.Inc(x => x.PropName, Value) Returns Type Description Update <T> Modify(String) Specify an update (json string) to modify the Entities (use multiple times if needed) Declaration public Update<T> Modify(string update) Parameters Type Name Description System.String update { $set: { 'RootProp.$[x].SubProp' : 321 } } Returns Type Description Update <T> Modify<TProp>(Expression<Func<T, TProp>>, TProp) Specify the property and it's value to modify (use multiple times if needed) Declaration public Update<T> Modify<TProp>(Expression<Func<T, TProp>> property, TProp value) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, TProp>> property x => x.Property TProp value The value to set on the property Returns Type Description Update <T> Type Parameters Name Description TProp Option(Action<UpdateOptions>) Specify an option for this update command (use multiple times if needed) TIP: Setting options is not required Declaration public Update<T> Option(Action<UpdateOptions> option) Parameters Type Name Description System.Action < MongoDB.Driver.UpdateOptions > option x => x.OptionName = OptionValue Returns Type Description Update <T> WithArrayFilter(Template) Specify a single array filter using a Template to target nested entities for updates Declaration public Update<T> WithArrayFilter(Template template) Parameters Type Name Description Template template Returns Type Description Update <T> WithArrayFilter(String) Specify an array filter to target nested entities for updates (use multiple times if needed). Declaration public Update<T> WithArrayFilter(string filter) Parameters Type Name Description System.String filter { 'x.SubProp': { $gte: 123 } } Returns Type Description Update <T> WithArrayFilters(Template) Specify multiple array filters with a Template to target nested entities for updates. Declaration public Update<T> WithArrayFilters(Template template) Parameters Type Name Description Template template The template with an array [...] of filters Returns Type Description Update <T> WithPipeline(Template) Specify an update pipeline with multiple stages using a Template to modify the Entities. NOTE: pipeline updates and regular updates cannot be used together. Declaration public Update<T> WithPipeline(Template template) Parameters Type Name Description Template template A Template object containing multiple pipeline stages Returns Type Description Update <T> WithPipelineStage(Template) Specify an update pipeline stage using a Template to modify the Entities (use multiple times if needed) NOTE: pipeline updates and regular updates cannot be used together. Declaration public Update<T> WithPipelineStage(Template template) Parameters Type Name Description Template template A Template object containing a pipeline stage Returns Type Description Update <T> WithPipelineStage(String) Specify an update pipeline stage to modify the Entities (use multiple times if needed) NOTE: pipeline updates and regular updates cannot be used together. Declaration public Update<T> WithPipelineStage(string stage) Parameters Type Name Description System.String stage { $set: { FullName: { $concat: ['$Name', ' ', '$Surname'] } } } Returns Type Description Update <T>"
  },
  "api/MongoDB.Entities.UpdateAndGet-1.html": {
    "href": "api/MongoDB.Entities.UpdateAndGet-1.html",
    "title": "Class UpdateAndGet<T> | MongoDB.Entities",
    "keywords": "Class UpdateAndGet<T> Update and retrieve the first document that was updated. TIP: Specify a filter first with the .Match(). Then set property values with .Modify() and finally call .Execute() to run the command. Inheritance System.Object UpdateAndGet <T, T> UpdateAndGet<T> Inherited Members UpdateAndGet<T, T>.MatchID(String) UpdateAndGet<T, T>.Match(Expression<Func<T, Boolean>>) UpdateAndGet<T, T>.Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>) UpdateAndGet<T, T>.Match(Template) UpdateAndGet<T, T>.Match(String) UpdateAndGet<T, T>.Modify<TProp>(Expression<Func<T, TProp>>, TProp) UpdateAndGet<T, T>.Modify(Func<UpdateDefinitionBuilder<T>, UpdateDefinition<T>>) UpdateAndGet<T, T>.Modify(String) UpdateAndGet<T, T>.Modify(Template) UpdateAndGet<T, T>.WithPipeline(Template) UpdateAndGet<T, T>.WithPipelineStage(String) UpdateAndGet<T, T>.WithPipelineStage(Template) UpdateAndGet<T, T>.WithArrayFilter(String) UpdateAndGet<T, T>.WithArrayFilter(Template) UpdateAndGet<T, T>.WithArrayFilters(Template) UpdateAndGet<T, T>.Option(Action<FindOneAndUpdateOptions<T, T>>) UpdateAndGet<T, T>.Project(Expression<Func<T, T>>) UpdateAndGet<T, T>.Project(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, T>>) UpdateAndGet<T, T>.ExecuteAsync(CancellationToken) UpdateAndGet<T, T>.ExecutePipelineAsync(CancellationToken) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public class UpdateAndGet<T> : UpdateAndGet<T, T> where T : IEntity Type Parameters Name Description T Any class that implements IEntity"
  },
  "api/MongoDB.Entities.UpdateAndGet-2.html": {
    "href": "api/MongoDB.Entities.UpdateAndGet-2.html",
    "title": "Class UpdateAndGet<T, TProjection> | MongoDB.Entities",
    "keywords": "Class UpdateAndGet<T, TProjection> Update and retrieve the first document that was updated. TIP: Specify a filter first with the .Match(). Then set property values with .Modify() and finally call .Execute() to run the command. Inheritance System.Object UpdateAndGet<T, TProjection> UpdateAndGet<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public class UpdateAndGet<T, TProjection> where T : IEntity Type Parameters Name Description T Any class that implements IEntity TProjection The type to project to Methods ExecuteAsync(CancellationToken) Run the update command in MongoDB and retrieve the first document modified Declaration public Task<TProjection> ExecuteAsync(CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task <TProjection> ExecutePipelineAsync(CancellationToken) Run the update command with pipeline stages and retrieve the first document modified Declaration public Task<TProjection> ExecutePipelineAsync(CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellation An optional cancellation token Returns Type Description System.Threading.Tasks.Task <TProjection> Match(Template) Specify the Entity matching criteria with a Template Declaration public UpdateAndGet<T, TProjection> Match(Template template) Parameters Type Name Description Template template The filter Template Returns Type Description UpdateAndGet <T, TProjection> Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>) Specify the Entity matching criteria with a filter expression Declaration public UpdateAndGet<T, TProjection> Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>> filter) Parameters Type Name Description System.Func < MongoDB.Driver.FilterDefinitionBuilder <T>, MongoDB.Driver.FilterDefinition <T>> filter f => f.Eq(x => x.Prop, Value) & f.Gt(x => x.Prop, Value) Returns Type Description UpdateAndGet <T, TProjection> Match(Expression<Func<T, Boolean>>) Specify the IEntity matching criteria with a lambda expression Declaration public UpdateAndGet<T, TProjection> Match(Expression<Func<T, bool>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Boolean >> expression A lambda expression to select the Entities to update Returns Type Description UpdateAndGet <T, TProjection> Match(String) Specify the Entity matching criteria with a JSON string Declaration public UpdateAndGet<T, TProjection> Match(string jsonString) Parameters Type Name Description System.String jsonString { Title : 'The Power Of Now' } Returns Type Description UpdateAndGet <T, TProjection> MatchID(String) Specify an IEntity ID as the matching criteria Declaration public UpdateAndGet<T, TProjection> MatchID(string ID) Parameters Type Name Description System.String ID A unique IEntity ID Returns Type Description UpdateAndGet <T, TProjection> Modify(Template) Specify an update with a Template to modify the Entities (use multiple times if needed) Declaration public UpdateAndGet<T, TProjection> Modify(Template template) Parameters Type Name Description Template template A Template with a single update Returns Type Description UpdateAndGet <T, TProjection> Modify(Func<UpdateDefinitionBuilder<T>, UpdateDefinition<T>>) Specify the update definition builder operation to modify the Entities (use multiple times if needed) Declaration public UpdateAndGet<T, TProjection> Modify(Func<UpdateDefinitionBuilder<T>, UpdateDefinition<T>> operation) Parameters Type Name Description System.Func < MongoDB.Driver.UpdateDefinitionBuilder <T>, MongoDB.Driver.UpdateDefinition <T>> operation b => b.Inc(x => x.PropName, Value) Returns Type Description UpdateAndGet <T, TProjection> Modify(String) Specify an update (json string) to modify the Entities (use multiple times if needed) Declaration public UpdateAndGet<T, TProjection> Modify(string update) Parameters Type Name Description System.String update { $set: { 'RootProp.$[x].SubProp' : 321 } } Returns Type Description UpdateAndGet <T, TProjection> Modify<TProp>(Expression<Func<T, TProp>>, TProp) Specify the property and it's value to modify (use multiple times if needed) Declaration public UpdateAndGet<T, TProjection> Modify<TProp>(Expression<Func<T, TProp>> property, TProp value) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, TProp>> property x => x.Property TProp value The value to set on the property Returns Type Description UpdateAndGet <T, TProjection> Type Parameters Name Description TProp Option(Action<FindOneAndUpdateOptions<T, TProjection>>) Specify an option for this update command (use multiple times if needed) TIP: Setting options is not required Declaration public UpdateAndGet<T, TProjection> Option(Action<FindOneAndUpdateOptions<T, TProjection>> option) Parameters Type Name Description System.Action < MongoDB.Driver.FindOneAndUpdateOptions <T, TProjection>> option x => x.OptionName = OptionValue Returns Type Description UpdateAndGet <T, TProjection> Project(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, TProjection>>) Specify how to project the results using a projection expression Declaration public UpdateAndGet<T, TProjection> Project(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, TProjection>> projection) Parameters Type Name Description System.Func < MongoDB.Driver.ProjectionDefinitionBuilder <T>, MongoDB.Driver.ProjectionDefinition <T, TProjection>> projection p => p.Include(\"Prop1\").Exclude(\"Prop2\") Returns Type Description UpdateAndGet <T, TProjection> Project(Expression<Func<T, TProjection>>) Specify how to project the results using a lambda expression Declaration public UpdateAndGet<T, TProjection> Project(Expression<Func<T, TProjection>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, TProjection>> expression x => new Test { PropName = x.Prop } Returns Type Description UpdateAndGet <T, TProjection> WithArrayFilter(Template) Specify a single array filter using a Template to target nested entities for updates Declaration public UpdateAndGet<T, TProjection> WithArrayFilter(Template template) Parameters Type Name Description Template template Returns Type Description UpdateAndGet <T, TProjection> WithArrayFilter(String) Specify an array filter to target nested entities for updates (use multiple times if needed). Declaration public UpdateAndGet<T, TProjection> WithArrayFilter(string filter) Parameters Type Name Description System.String filter { 'x.SubProp': { $gte: 123 } } Returns Type Description UpdateAndGet <T, TProjection> WithArrayFilters(Template) Specify multiple array filters with a Template to target nested entities for updates. Declaration public UpdateAndGet<T, TProjection> WithArrayFilters(Template template) Parameters Type Name Description Template template The template with an array [...] of filters Returns Type Description UpdateAndGet <T, TProjection> WithPipeline(Template) Specify an update pipeline with multiple stages using a Template to modify the Entities. NOTE: pipeline updates and regular updates cannot be used together. Declaration public UpdateAndGet<T, TProjection> WithPipeline(Template template) Parameters Type Name Description Template template A Template object containing multiple pipeline stages Returns Type Description UpdateAndGet <T, TProjection> WithPipelineStage(Template) Specify an update pipeline stage using a Template to modify the Entities (use multiple times if needed) NOTE: pipeline updates and regular updates cannot be used together. Declaration public UpdateAndGet<T, TProjection> WithPipelineStage(Template template) Parameters Type Name Description Template template A Template object containing a pipeline stage Returns Type Description UpdateAndGet <T, TProjection> WithPipelineStage(String) Specify an update pipeline stage to modify the Entities (use multiple times if needed) NOTE: pipeline updates and regular updates cannot be used together. Declaration public UpdateAndGet<T, TProjection> WithPipelineStage(string stage) Parameters Type Name Description System.String stage { $set: { FullName: { $concat: ['$Name', ' ', '$Surname'] } } } Returns Type Description UpdateAndGet <T, TProjection>"
  },
  "api/MongoDB.Entities.Watcher-1.html": {
    "href": "api/MongoDB.Entities.Watcher-1.html",
    "title": "Class Watcher<T> | MongoDB.Entities",
    "keywords": "Class Watcher<T> Watcher for subscribing to mongodb change streams. Inheritance System.Object Watcher<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : MongoDB.Entities Assembly : MongoDB.Entities.dll Syntax public class Watcher<T> where T : IEntity Type Parameters Name Description T The type of entity Properties CanRestart Returns true if watching can be restarted if it was stopped due to an error or invalidate event. Will always return false after cancellation is requested via the cancellation token. Declaration public bool CanRestart { get; } Property Value Type Description System.Boolean Name The name of this watcher instance Declaration public string Name { get; } Property Value Type Description System.String ResumeToken The last resume token received from mongodb server. Can be used to resume watching with .StartWithToken() method. Declaration public BsonDocument ResumeToken { get; } Property Value Type Description MongoDB.Bson.BsonDocument Methods ReStart() If the watcher stopped due to an error or invalidate event, you can try to restart the watching again with this method. Declaration public void ReStart() Start(EventType, Expression<Func<ChangeStreamDocument<T>, Boolean>>, Int32, Boolean, Boolean, CancellationToken) Starts the watcher instance with the supplied parameters Declaration public void Start(EventType eventTypes, Expression<Func<ChangeStreamDocument<T>, bool>> filter = null, int batchSize = 25, bool onlyGetIDs = false, bool autoResume = true, CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description EventType eventTypes Type of event to watch for. Specify multiple like: EventType.Created | EventType.Updated | EventType.Deleted System.Linq.Expressions.Expression < System.Func < MongoDB.Driver.ChangeStreamDocument <T>, System.Boolean >> filter x => x.FullDocument.Prop1 == \"SomeValue\" System.Int32 batchSize The max number of entities to receive for a single event occurence System.Boolean onlyGetIDs Set to true if you don't want the complete entity details. All properties except the ID will then be null. System.Boolean autoResume Set to false if you'd like to skip the changes that happened while the watching was stopped. This will also make you unable to retrieve a ResumeToken. System.Threading.CancellationToken cancellation A cancellation token for ending the watching/change stream StartWithToken(BsonDocument, EventType, Expression<Func<ChangeStreamDocument<T>, Boolean>>, Int32, Boolean, CancellationToken) Starts the watcher instance with the supplied configuration Declaration public void StartWithToken(BsonDocument resumeToken, EventType eventTypes, Expression<Func<ChangeStreamDocument<T>, bool>> filter = null, int batchSize = 25, bool onlyGetIDs = false, CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description MongoDB.Bson.BsonDocument resumeToken A resume token to start receiving changes after some point back in time EventType eventTypes Type of event to watch for. Specify multiple like: EventType.Created | EventType.Updated | EventType.Deleted System.Linq.Expressions.Expression < System.Func < MongoDB.Driver.ChangeStreamDocument <T>, System.Boolean >> filter x => x.FullDocument.Prop1 == \"SomeValue\" System.Int32 batchSize The max number of entities to receive for a single event occurence System.Boolean onlyGetIDs Set to true if you don't want the complete entity details. All properties except the ID will then be null. System.Threading.CancellationToken cancellation A cancellation token for ending the watching/change stream Events OnChanges This event is fired when the desired types of events have occured. Will have a list of entities that was received as input. Declaration public event Action<IEnumerable<T>> OnChanges Event Type Type Description System.Action < System.Collections.Generic.IEnumerable <T>> OnError This event is fired when an exception is thrown in the change-stream. Declaration public event Action<Exception> OnError Event Type Type Description System.Action < System.Exception > OnStop This event is fired when the internal cursor get closed due to an 'invalidate' event or cancellation is requested via the cancellation token. Declaration public event Action OnStop Event Type Type Description System.Action"
  },
  "cheat-sheet/change-streams.html": {
    "href": "cheat-sheet/change-streams.html",
    "title": "Change Streams | MongoDB.Entities",
    "keywords": "Change Streams This content requires community contributions. Please click here to see how to contribute."
  },
  "cheat-sheet/connections.html": {
    "href": "cheat-sheet/connections.html",
    "title": "Connections | MongoDB.Entities",
    "keywords": "Connections This category showcases the different methods of setting up the connections to mongodb. Connect to localhost await DB.InitAsync(\"db-name\",\"localhost\"); Connect using a connection string await DB.InitAsync(MongoClientSettings.FromConnectionString( \"mongodb+srv://user:password@cluster.mongodb.net/db-name\"), \"db-name\"); Connect with a username & password await DB.InitAsync(new MongoClientSettings() { Server = new MongoServerAddress(\"localhost\", 27017), Credential = MongoCredential.CreateCredential(\"db-name\", \"username\", \"password\") }, \"db-name\"); Increase connection pool limit await DB.InitAsync( \"db-name\", new MongoClientSettings { MinConnectionPoolSize = 25, MaxConnectionPoolSize = 250, });"
  },
  "cheat-sheet/create.html": {
    "href": "cheat-sheet/create.html",
    "title": "Create Entities | MongoDB.Entities",
    "keywords": "Create Entities This content requires community contributions. Please click here to see how to contribute."
  },
  "cheat-sheet/data-migrations.html": {
    "href": "cheat-sheet/data-migrations.html",
    "title": "Data Migrations | MongoDB.Entities",
    "keywords": "Data Migrations This content requires community contributions. Please click here to see how to contribute."
  },
  "cheat-sheet/delete.html": {
    "href": "cheat-sheet/delete.html",
    "title": "Delete Entities | MongoDB.Entities",
    "keywords": "Delete Entities This content requires community contributions. Please click here to see how to contribute."
  },
  "cheat-sheet/entities.html": {
    "href": "cheat-sheet/entities.html",
    "title": "Define Entities | MongoDB.Entities",
    "keywords": "Define Entities This category showcases differnt ways of defining entities and other handy methods. Basic entity public class Book : Entity { public string Title { get; set; } } Ignore a property when saving public class Book : Entity { public string Title { get; set; } [Ignore] public int SomeProperty { get; set; } } Customize the collection name for an entity type [Name(\"Publication\")] public class Book : Entity { ... } Automatically set creation date public class Book : Entity, ICreatedOn { public string Title { get; set; } public DateTime CreatedOn { get; set; } } Automatically set modified date public class Book : Entity, IModifiedOn { public string Title { get; set; } public DateTime ModifiedOn { get; set; } } Store properties as ObjectId in the database public class Book : Entity { [ObjectId] public string AuthorID { get; set; } [ObjectId] public string[] EditorIDs { get; set; } } BYO entities public class Book : IEntity { [BsonId, ObjectId] public string ID { get; set; } public string GenerateNewID() => ObjectId.GenerateNewId().ToString(); } Customize ID format public class Book : IEntity { [BsonId] public string ID { get; set; } public string GenerateNewID() => $\"{Guid.NewGuid()}-{DateTime.UtcNow.Ticks}\"; } Get the collection for an entity type IMongoCollection<Book> collection = DB.Collection<Book>(); Get the collection name for an entity type string collectionName = DB.CollectionName<Book>(); Entity creation factory Book book = DB.Entity<Book>(); Entity creation factory with ID Book book = DB.Entity<Book>(\"ID\"); Set a new ID on an entity book.ID = book.GenerateNewID();"
  },
  "cheat-sheet/extras.html": {
    "href": "cheat-sheet/extras.html",
    "title": "Extras | MongoDB.Entities",
    "keywords": "Extras This content requires community contributions. Please click here to see how to contribute."
  },
  "cheat-sheet/file-storage.html": {
    "href": "cheat-sheet/file-storage.html",
    "title": "File Storage | MongoDB.Entities",
    "keywords": "File Storage This content requires community contributions. Please click here to see how to contribute."
  },
  "cheat-sheet/index.html": {
    "href": "cheat-sheet/index.html",
    "title": "The Cheat-Sheet | MongoDB.Entities",
    "keywords": "The Cheat-Sheet The cheat-sheet exists to showcase how things are done; the MongoDB.Entities way. Choose a category on the left to start browsing. Help improve the cheat-sheet If you're interested in contributing to the cheat-sheet section of the documentation, please send in your PR's to the cheat-sheet branch of the github repository . Guidelines to follow: Only add non-existing code Add your contribution to the appropriate category Create new categories if needed Only use the domain/context of a bookshop or library which would have entities such as: Author Book Publisher Editor Genre etc. Optionally add your name/github profile link right below your code like: Contributed by: YourName How to edit/build the docs: Clone the repo and checkout the cheat-sheet branch Download DocFX from here Add DocFX to your system path or place the executable in the MongoDB.Entities > Documentation folder Change the current working directory to MongoDB.Entities > Documentation folder Run DocFX with the command docfx --serve Open a browser and visit: http://localhost:8080 Make your changes to the markdown files inside MongoDB.Entities > Documentation > cheat-sheet folder To see your changes in the browser, CTRL+C and run docfx --serve again"
  },
  "cheat-sheet/indexes.html": {
    "href": "cheat-sheet/indexes.html",
    "title": "Indexes | MongoDB.Entities",
    "keywords": "Indexes This content requires community contributions. Please click here to see how to contribute."
  },
  "cheat-sheet/multi-db.html": {
    "href": "cheat-sheet/multi-db.html",
    "title": "Multiple Databases | MongoDB.Entities",
    "keywords": "Multiple Databases This content requires community contributions. Please click here to see how to contribute."
  },
  "cheat-sheet/queries.html": {
    "href": "cheat-sheet/queries.html",
    "title": "Queries | MongoDB.Entities",
    "keywords": "Queries This content requires community contributions. Please click here to see how to contribute."
  },
  "cheat-sheet/relationships.html": {
    "href": "cheat-sheet/relationships.html",
    "title": "Relationships | MongoDB.Entities",
    "keywords": "Relationships This content requires community contributions. Please click here to see how to contribute."
  },
  "cheat-sheet/string-templates.html": {
    "href": "cheat-sheet/string-templates.html",
    "title": "String Templates | MongoDB.Entities",
    "keywords": "String Templates This content requires community contributions. Please click here to see how to contribute."
  },
  "cheat-sheet/transactions.html": {
    "href": "cheat-sheet/transactions.html",
    "title": "Transactions | MongoDB.Entities",
    "keywords": "Transactions This content requires community contributions. Please click here to see how to contribute."
  },
  "cheat-sheet/update.html": {
    "href": "cheat-sheet/update.html",
    "title": "Update Entities | MongoDB.Entities",
    "keywords": "Update Entities This content requires community contributions. Please click here to see how to contribute."
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome | MongoDB.Entities",
    "keywords": "What is it? A light-weight .net standard library which simplifies access to mongodb by abstracting away the official .net mongodb driver and providing some additional features on top of it. The API is clean and intuitive resulting in less lines of code that is more human friendly than driver code. Why use it? Don't have to deal with ObjectIds , BsonDocuments & magic strings unless you want to. Built-in support for One-To-One , One-To-Many and Many-To-Many relationships. Async only API for scalable application development. Query data using LINQ, lambda expressions, filters and aggregation pipelines. Sorting, paging and projecting is made convenient. Simple data migration framework similar to EntityFramework. Programatically define indexes. Full text search (including fuzzy matching) with text indexes. Multi-document transaction support. Multiple database support. Easy bulk operations. Easy Change-stream support. GeoSpatial search. Stream files in chunks to and from mongodb (GridFS alternative). Project types supported: .Net Standard 2.0 (.Net Core 2.0 & .Net Framework 4.6.1 or higher) Get Started Code Samples"
  },
  "wiki/Async-Support.html": {
    "href": "wiki/Async-Support.html",
    "title": "Async-only api | MongoDB.Entities",
    "keywords": "Async-only api This library no longer supports synchronous operations after version 20 as it was discovered that the official mongodb driver is doing faux sync (sync-over-async anti-pattern) under the hood in order to maintain backward compatibility. \"One caveat is that the synchronous legacy API in 2.0 is implemented by calling the low level async API and blocking, waiting for the Task to complete. This is not considered a performant way to use async APIs, so for performance-sensitive code you may prefer to use the 1.10 version of the driver until you are ready to convert your application to use the new async API.\" - Robert Stem stress/load testing showed that it is inefficient at handling large volumes leading to thread-pool starvation. since the official driver has been made fully async after v2.0, it was decided to discourage consumers of this library from using the faux-sync api of the driver by removing all sync wrapper methods and only support async operations for IO bound work going forward. it is highly recommended you build applications that run in server environments fully async from top to bottom in order to make sure they scale well. however, in places where you can't call async code, you can wrap the async methods in a Task.Run() like so: Task.Run(async () => { await DB.InitAsync(\"MyDatabase\", \"127.0.0.1\"); }) .GetAwaiter() .GetResult(); Tip try not to do that except for calling the init method once at app start-up. LINQ async extensions in order to write async LINQ queries, make sure to import the mongodb linq extensions and write queries as follows: using MongoDB.Driver; using MongoDB.Driver.Linq; var lastAuthor = await (from a in author.Queryable() orderby a.ModifiedOn descending select a).FirstOrDefaultAsync();"
  },
  "wiki/Change-Streams.html": {
    "href": "wiki/Change-Streams.html",
    "title": "Change-streams | MongoDB.Entities",
    "keywords": "Change-streams change-stream support is provided via the DB.Watcher<T> registry. you can use a watcher to receive notifications when a given entity type gets either created, updated or deleted. only monitoring at the collection level is supported. 1. Retrieve a watcher instance var watcher = DB.Watcher<Author>(\"some-unique-name-for-the-watcher\"); pass a unique string to get a watcher instance. if a watcher by that name already exists in the registry, that instance will be returned. if no such watcher exists, a fresh watcher will be returned. 2. Configure and start the watcher watcher.Start( eventTypes: EventType.Created | EventType.Updated | EventType.Deleted, filter: null, batchSize: 25, onlyGetIDs: false, autoResume: true, cancellation: default); Note all except the eventTypes parameter are optional and the default values are shown above. eventTypes: specify what kind of change event you'd like to watch for. multiple types can be specified as shown. filter: if you'd like to receive only a subset of change events, you can do so by supplying a lambda expression to this parameter. for example, if you're interesed in being notified about changes to Authors who are aged 25 and above, set the filter to the following: x => x.FullDocument.Age >= 25 Note filtering cannot be done if the types of change you're interested in includes deletions. because the entity data no longer exists in the database when a deletion occurs and mongodb only returns the entity ID with the change event. batchSize: specify the maximum number of entities you'd like to receive per change notificatin/ a single event firing. the default is 25. onlyGetIDs: set to true if you don't want the complete entity details. in which case all properties except the ID will be null on the received entities. autoResume: change-streams will be auto-resumed by default unless you set this parameter to false. what that means is, say for example you start a watcher and after a while the watcher stops due to an error or an invalidate event . you can then re-start the watcher and it will start receiving notifications from where it left off and you won't lose any changes that occured while the watcher was stopped. if you set this to false, then those changes are skipped and only new changes are received. cancellation: if you'd like to cancel/abort a watcher and close the change-stream permanantly at a future time, pass a cancellation token to this parameter. 3. Subscribe to the events OnChanges watcher.OnChanges += authors => { foreach (var author in authors) { Console.WriteLine(\"received: \" + author.Name); } }; this event is fired when desired change events have been received from mongodb. for the above example, when author entities have been either created, updated or deleted, this event/action will receive those entities in batches. you can access the received entities via the input action parameter called authors . OnError watcher.OnError += exception => { Console.WriteLine(\"error: \" + exception.Message); if (watcher.CanRestart) { watcher.ReStart(); Console.WriteLine(\"Watching restarted!\"); } }; in case the change-stream ends due to an error, the OnError event will be fired with the exception. you can try to restart the watcher as shown above. OnStop watcher.OnStop += () => { Console.WriteLine(\"Watching stopped!\"); if (watcher.CanRestart) { watcher.ReStart(); Console.WriteLine(\"Watching restarted!\"); } else { Console.WriteLine(\"This watcher is dead!\"); } }; this event will be fired when the internal cursor gets closed due to either you requesting cancellation or an invalidate event occuring such as renaming or dropping of the watched collection. if the cause of stopping is due to aborting via cancellation-token, the watcher has already purged all the event subscribers and no longer can be restarted. if the cause was an invalidate event, you can restart watching as shown above. the existing event subscribers will continue to receive change events. Resuming across app restarts you can retrieve a resume token from the ResumeToken property of the watcher like so: var token = watcher.ResumeToken; persist this token to a non-volatile medium and use it upon app startup to initiate a watcher to continue/resume from where the app left off last time it was running. watcher.StartWithToken(token, ...); Access all watchers in the registry var watchers = DB.Watchers<Author>(); foreach (var w in watchers) { Console.WriteLine(\"watcher: \" + w.Name); } Note there's a watcher registry per entity type and the watcher names need only be unique to each registry. Notes on resource usage each unique watcher instance you create in the registry will consume a thread from the .net thread-pool for iterating the internal change-stream cursor in the background. try to keep the number of watchers in the registry to a minimum due to this reason. Note the threads are not blocked (and released back to the pool) while there are no change events being received as the change-stream cursor is iterated using async/await pattern. but if there's a constant stream of change events being received, these threads will be busy and unavailable to the system."
  },
  "wiki/Code-Samples.html": {
    "href": "wiki/Code-Samples.html",
    "title": "Code Samples | MongoDB.Entities",
    "keywords": "Code Samples Initialize connection await DB.InitAsync(\"bookshop\",\"localhost\"); Persist an entity var book = new Book { Title = \"The Power Of Now\" }; await book.SaveAsync(); Embed as document var dickens = new Author { Name = \"Charles Dickens\" }; book.Author = dickens.ToDocument(); await book.SaveAsync(); Update entity properties await DB.Update<Book>() .Match(b => b.Title == \"The Power Of Now\") .Modify(b => b.Publisher, \"New World Order\") .Modify(b => b.ISBN, \"SOMEISBNNUMBER\") .ExecuteAsync(); One-To-One relationship var hemmingway = new Author { Name = \"Ernest Hemmingway\" }; await hemmingway.SaveAsync(); book.MainAuthor = hemmingway; await book.SaveAsync(); One-To-Many relationship var tolle = new Author { Name = \"Eckhart Tolle\" }; await tolle.SaveAsync(); await book.Authors.AddAsync(tolle); Many-To-Many relationship var genre = new Genre { Name = \"Self Help\" }; await genre.SaveAsync(); await book.AllGenres.AddAsync(genre); await genre.AllBooks.AddAsync(book); Queries var author = await DB.Find<Author>().OneAsync(\"ID\"); var authors = await DB.Find<Author>().ManyAsync(a => a.Publisher == \"Harper Collins\"); var eckhart = await DB.Queryable<Author>() .Where(a => a.Name.Contains(\"Eckhart\")) .SingleOrDefaultAsync(); var powerofnow = await genre.AllBooks.ChildrenQueryable() .Where(b => b.Title.Contains(\"Power\")) .SingleOrDefaultAsync(); var selfhelp = await book.AllGenres.ChildrenQueryable().FirstAsync(); Delete await book.MainAuthor.DeleteAsync(); await book.AllAuthors.DeleteAllAsync(); await book.DeleteAsync(); await DB.DeleteAsync<Genre>(\"ID\"); await DB.DeleteAsync<Book>(b => b.Title == \"The Power Of Now\"); Get Started Tutorials Beginners Guide Fuzzy Text Search GeoSpatial Search More Examples .Net core console project Asp.net core web-api project A collection of gists Integration/unit test project Solutions to stackoverflow questions"
  },
  "wiki/Data-Migrations.html": {
    "href": "wiki/Data-Migrations.html",
    "title": "Migration system | MongoDB.Entities",
    "keywords": "Migration system there's a simple data migration system similar to that of EntityFramework where you can write migration classes with logic for transforming the database and content in order to bring it up-to-date with the current shape of your c# entity schema. Migration classes create migration classes that has names starting with _number_ followed by anything you'd like and implement the interface IMigration . here are a couple of valid migration class definitions: public class _001_i_will_be_run_first : IMigration { } public class _002_i_will_be_run_second : IMigration { } public class _003_i_will_be_run_third : IMigration { } next implement the UpgradeAsync() method of IMigration and place your migration logic there. Run Migrations in order to execute the migrations, simply call DB.MigrateAsync() whenever you need the database brought up to date. the library keeps track of the last migration run and will execute all newer migrations in the order of their number. in most cases, you'd place the following line of code in the startup of your app right after initializing the database. await DB.MigrateAsync() the above will try to discover all migrations from all assemblies of the application if it's a multi-project solution. you can speed things up a bit by specifying a type so that migrations will only be discovered from the same assembly/project as the specified type, like so: await DB.MigrateAsync<SomeType>(); Examples Merge two properties let's take the scenario of having the first and last names of an Author entity stored in two separate properties and later on deciding to merge them into a single property called \"FullName\". public class _001_merge_first_and_last_name_to_fullname_field : IMigration { private class Author : Entity { public string Name { get; set; } public string Surname { get; set; } public string FullName { get; set; } } public async Task UpgradeAsync() { await DB.Fluent<Author>() .Project(a => new { id = a.ID, fullname = a.Name + \" \" + a.Surname }) .ForEachAsync(async a => { await DB.Update<Author>() .Match(_ => true) .Modify(x => x.FullName, a.fullname) .ExecuteAsync(); }); } } if your collection has many thousands of documents, the above code will be less efficient. below is another more efficient way to achieve the same result using a single mongodb command if your server version is v4.2 or newer. public class _001_merge_first_and_last_name_to_fullname_field : IMigration { public Task UpgradeAsync() { return DB.Update<Author>() .Match(_ => true) .WithPipelineStage(\"{$set:{FullName:{$concat:['$Name',' ','$Surname']}}}\") .ExecutePipelineAsync(); } } Rename a property public class _002_rename_fullname_to_authorname : IMigration { public Task UpgradeAsync() { return DB.Update<Author>() .Match(_ => true) .Modify(b => b.Rename(\"FullName\", \"AuthorName\")) .ExecuteAsync(); } } Rename a collection public class _003_rename_author_collection_to_writer : IMigration { public Task UpgradeAsync() { return DB.Database<Author>() .RenameCollectionAsync(\"Author\", \"Writer\"); } }"
  },
  "wiki/Entities.html": {
    "href": "wiki/Entities.html",
    "title": "Define entities | MongoDB.Entities",
    "keywords": "Define entities add the import statement shown below and create your entities by inheriting the Entity base class. using MongoDB.Entities; public class Book : Entity { public string Title { get; set; } } Ignore properties if there are some properties on entities you don't want persisted to mongodb, simply use the IgnoreAttribute public class Book : Entity { [Ignore] public string SomeProperty { get; set; } } Customize collection names by default, mongodb collections will use the names of the entity classes. you can customize the collection names by decorating your entities with the NameAttribute as follows: [Name(\"Writer\")] public class Author : Entity { ... } Optional auto-managed properties there are 2 optional interfaces ICreatedOn & IModifiedOn that you can add to entity class definitions like so: public class Book : Entity, ICreatedOn, IModifiedOn { public string Title { get; set; } public DateTime CreatedOn { get; set; } public DateTime ModifiedOn { get; set; } } if your entity classes implements these interfaces, the library will automatically set the appropriate values so you can use them for sorting operations and other queries. The IEntity interface if for whatever reason, you're unable to inherit the Entity base class, you can simply implement the IEntity interface to make your classes compatible with the library like so: public class Book : IEntity { [BsonId, ObjectId] public string ID { get; set; } public string GenerateNewID() => ObjectId.GenerateNewId().ToString(); } Customizing the ID format the default format of the IDs automatically generated for new entities is ObjectId . if you'd like to change the format of the ID, simply override the GenerateNewID method of the Entity class or implement the IEntity interface and place the logic for generating new IDs inside the GenerateNewID method. make sure to only return truly unique strings in order to avoid mongodb server from complaining as there's a unique index on the ID field. if implementing IEntity , don't forget to decorate the ID property with the [BsonId] attribute. public class Book : IEntity { [BsonId] public string ID { get; set; } public string GenerateNewID() => $\"{Guid.NewGuid()}-{DateTime.UtcNow.Ticks}\"; } Note the type of the ID property cannot be changed to something other than string . PRs are welcome for removing this limitation."
  },
  "wiki/Entities-Delete.html": {
    "href": "wiki/Entities-Delete.html",
    "title": "Delete entities | MongoDB.Entities",
    "keywords": "Delete entities deleting entities can be achieved in any of the following ways: Delete a single entity await book.DeleteAsync(); Delete embeded entities await book.OtherAuthors.DeleteAllAsync(); Delete by ID await DB.DeleteAsync<Author>(\"ID\"); Delete by multiple IDs await DB.DeleteAsync<Book>(new[] { \"ID1\", \"ID2\" }); Delete by lambda expression await DB.DeleteAsync<Book>(b => b.Title.Contains(\"Trump\"));"
  },
  "wiki/Entities-Save.html": {
    "href": "wiki/Entities-Save.html",
    "title": "Save an entity | MongoDB.Entities",
    "keywords": "Save an entity call SaveAsync() on any entity to persist it to the database. var book = new Book { Title = \"The Power Of Now\" }; await book.SaveAsync(); new entities are automatically assigned an ID when saved. saving an entity that has the ID already populated will replace the matching entity in the database if it exists. if an entity with that ID does not exist in the database, a new one will be created. aka upserted. Save multiple entities multiple entities can be saved in a single bulk operation like so: var books = new[] { new Book{ Title = \"Book One\" }, new Book{ Title = \"Book Two\" }, new Book{ Title = \"Book Three\"} }; await books.SaveAsync(); Save via DB static class you can also use the DB static class for saving entities like so: await DB.SaveAsync(book); await DB.SaveAsync(books); Save entities partially the above-mentioned SaveAsync methods will replace the entire document in the database with the values from the entity. if the goal is to only save the values of a subset of the properties, you have two choices to make your life easier. Save only a few specified properties await book.SaveOnlyAsync(x => new { x.Title, x.Price }); this will save only the Title and Price properties and exclude all other properties of the entity. Save all others except for the specified properties await book.SaveExceptAsync(x => new { x.AuthorName }) this will save all other properties of the entity except the AuthorName property. Note you should only specify root level properties with the New expression. i.e. x => x.Author.Name is not valid. Tip if the ID value of the entity being saved is null , a new document will be created in the database. if the ID has a value, then the matching document will be updated instead. Partial save with attributes if you find specifying New expressions everywhere in your code as above tedious when needing to omit properties while saving an entity, you can use the SavePreservingAsync() method together with the use of an attribute. simply decorate the properties you want to omit with the [ Preserve ] attribute and call book.SavePreservingAsync() without having to supply an expression everytime. whatever properties you have decorated with [Preserve] attribute, will not be updated. all other properties of the entity will be updated with the values from your entity. you can also do the opposite with the use of [ DontPreserve ] attribute. if you decorate properties with [DontPreserve] , only the values of those properties are written to the database and all other properties are implicitly ignored when calling SavePreservingAsync() . Note both [DontPreserve] and [Preserve] cannot be used together on the same entity type due to the conflicting nature of what they do. Embed an entity to store an unlinked copy of an entity, call the ToDocument() method. doing so will store an independant duplicate (with a new ID) of the original entity that has no relationship to the original entity. book.Author = author.ToDocument(); book.OtherAuthors = (new Author[] { author2, author3 }).ToDocuments(); await book.SaveAsync();"
  },
  "wiki/Entities-Update.html": {
    "href": "wiki/Entities-Update.html",
    "title": "Update without retrieving | MongoDB.Entities",
    "keywords": "Update without retrieving you can update a single or batch of entities on the mongodb server by supplying a filter criteria and a subset of properties and the data/ values to be set on them as shown below. await DB.Update<Author>() .Match(a => a.Surname == \"Stark\") .Modify(a => a.Name, \"Brandon\") .Modify(a => a.Surname, \"The Broken\") .ExecuteAsync(); specify the filter criteria with a lambda expression using the .Match() method to indicate which entities/documents you want to target for the update. then use multiples of the .Modify() method to specify which properties you want updated with what data. finally call the .ExecuteAsync() method to run the update command which will take place remotely on the database server. Update by ID if you'd like to update a single entity, simply target it by ID like below: await DB.Update<Author>() .MatchID(\"xxxxxxxxxxx\") .Modify(a => a.Surname, \"The Broken\") .ExecuteAsync(); Update by matching with filters you can use filter definition builder methods to match entities. all of the filters of the official driver are available for use as follows. await DB.Update<Author>() .Match(f=> f.Eq(a=>a.Surname,\"Stark\") & f.Gt(a=>a.Age,35)) .Modify(a => a.Name, \"Brandon\") .ExecuteAsync(); Update with builder methods also you can use all the update definition builder methods supplied by the mongodb driver like so: await DB.Update<Author>() .Match(a => a.ID == \"xxxxxxx\") .Modify(x => x.Inc(a => a.Age, 10)) .Modify(x => x.Set(a => a.Name, \"Brandon\")) .Modify(x => x.CurrentDate(a => a.ModifiedOn)) .ExecuteAsync(); Bulk updates var bulkUpdate = DB.Update<Author>(); bulkUpdate.Match(a => a.Age > 25) .Modify(a => a.Age, 35) .AddToQueue(); bulkUpdate.Match(a => a.Sex == \"Male\") .Modify(a => a.Sex, \"Female\") .AddToQueue(); await bulkUpdate.ExecuteAsync(); first get a reference to a Update<T> class. then specify matching criteria with Match() method and modifications with Modify() method just like you would with a regular update. then instead of calling ExecuteAsync() , simply call AddToQueue() in order to queue it up for batch execution. when you are ready commit the updates, call ExecuteAsync() which will issue a single bulkWrite command to the database. Update and retrieve in order to update an entity and retrieve the updated enity, use the .UpdateAndGet<T>() method on the DB class like so: var result = await DB.UpdateAndGet<Book>() .Match(b => b.ID == \"xxxxxxxxxxxxx\") .Modify(b => b.Title, \"updated title\") .ExecuteAsync(); Update and retrieve with projection projection of the returned entity is also possible by using the .Project() method before calling .ExecuteAsync() . var result = await DB.UpdateAndGet<Book>() .Match(b => b.ID == \"xxxxxxxxxxxxx\") .Modify(b => b.Title, \"updated title\") .Project(b => new Book { Title = b.Title }) .ExecuteAsync(); Aggregation pipeline updates starting from mongodb sever v4.2, we can refer to existing fields of the documents when updating as described here . the following example does 3 things. creates a 'FullName' field by concatenating the values from 'FirstName' and 'LastName' fields. creates a 'LowerCaseEmail' field by getting the value from 'Email' field and lower-casing it. removes the Email field. await DB.Update<Author>() .Match(_ => true) .WithPipelineStage(\"{ $set: { FullName: { $concat: ['$FirstName',' ','$LastName'] }}}\") .WithPipelineStage(\"{ $set: { LowerCaseEmail: { $toLower: '$Email' } } }\") .WithPipelineStage(\"{ $unset: 'Email'}\") .ExecutePipelineAsync(); note: pipeline updates and regular updates cannot be used together in one command as it's not supported by the official c# driver. Array filter updates await DB.Update<Book>() .Match(_ => true) .WithArrayFilter(\"{ 'x.Age' : { $gte : 30 } }\") .Modify(\"{ $set : { 'Authors.$[x].Age' : 25 } }\") .ExecuteAsync(); the above update command will set the age of all authors of books where the age is 30 years or older to 25. refer to this document for more info on array filters."
  },
  "wiki/Extras-Date.html": {
    "href": "wiki/Extras-Date.html",
    "title": "The 'Date' Type | MongoDB.Entities",
    "keywords": "The 'Date' Type there's a special Date type you can use to store date/time values in mongodb instead of the regular System.DateTime type. the benefits of using it would be: preserves date/time precision can query using ticks can extend it by inheriting implicitly assignable to and from System.DateTime Examples // define the entity public class Book : Entity { public Date PublishedOn { get; set; } } // save the entity new Book { PublishedOn = DateTime.UtcNow } .Save(); // query with 'Ticks' var book = await DB.Find<Book>() .Match(b => b.PublishedOn.Ticks < DateTime.UtcNow.Ticks) .ExecuteFirstAsync(); // query with 'DateTime' var book = await DB.Find<Book>() .Match(b => b.PublishedOn.DateTime < DateTime.UtcNow) .ExecuteFirstAsync(); // assign to 'DateTime' from 'Date' DateTime dt = book.PublishedOn; // assign from 'DateTime' to 'Date' Date date = dt; // set/change value with 'Ticks' date.Ticks = DateTime.UtcNow.Ticks; // set/change value with 'DateTime' date.DateTime = DateTime.UtcNow;"
  },
  "wiki/Extras-Prop.html": {
    "href": "wiki/Extras-Prop.html",
    "title": "The 'Prop' Class | MongoDB.Entities",
    "keywords": "The 'Prop' Class this static class has several handy methods for getting string property paths from lambda expressions. which can help to eliminate magic strings from your code during advanced scenarios. Prop.Path() returns the full dotted path for a given member expression. Authors[0].Books[0].Title > Authors.Books.Title var path = Prop.Path<Book>(b => b.Authors[0].Books[0].Title); Prop.Property() returns the last property name for a given member expression. Authors[0].Books[0].Title > Title var propName = Prop.Property<Book>(b => b.Authors[0].Books[0].Title); Prop.Collection() returns the collection/entity name for a given entity type. var collectionName = Prop.Collection<Book>(); Prop.PosAll() returns a path with the all positional operator $[] for a given expression. Authors[0].Name > Authors.$[].Name var path = Prop.PosAll<Book>(b => b.Authors[0].Name); Prop.PosFirst() returns a path with the first positional operator $ for a given expression. Authors[0].Name > Authors.$.Name var path = Prop.PosFirst<Book>(b => b.Authors[0].Name); Prop.PosFiltered() returns a path with filtered positional identifiers $[x] for a given expression. Authors[0].Name > Authors.$[a].Name Authors[1].Age > Authors.$[b].Age Authors[2].Books[3].Title > Authors.$[c].Books.$[d].Title index positions start from [0] which is converted to $[a] and so on. var path = Prop.PosFiltered<Book>(b => b.Authors[2].Books[3].Title); Prop.Elements(index, expression) returns a path with the filtered positional identifier prepended to the property path. (0, x => x.Rating) > a.Rating (1, x => x.Rating) > b.Rating index positions start from '0' which is converted to 'a' and so on. var res = Prop.Elements<Book>(0, x => x.Rating); Prop.Elements() returns a path without any filtered positional identifier prepended to it. b => b.Tags > Tags var path = Prop.Elements<Book>(b => b.Tags);"
  },
  "wiki/Extras-Sequence.html": {
    "href": "wiki/Extras-Sequence.html",
    "title": "Sequential number generation | MongoDB.Entities",
    "keywords": "Sequential number generation we can get mongodb to return a sequentially incrementing number everytime the method .NextSequentialNumber() on an Entity is called. it can be useful when you need to generate custom IDs like in the example below: public class Person : Entity { public string CustomID { get; set; } } var person = new Person(); var number = await person.NextSequentialNumberAsync(); person.CustomID = $\"PID-{number:00000000}-X\"; person.Save(); the value of CustomID would be PID-0000001-X . the next Person entities you create/save would have PID-0000002-X , PID-0000003-X , PID-0000004-X and so on. Alternative static method if you don't have an instance of an Entity you can simply call the static method on the DB class like so: var number = await DB.NextSequentialNumberAsync<Person>(); Generation for any sequence name there's also an overload for generating sequential numbers for any given sequence name like so: var number = await DB.NextSequentialNumberAsync(\"SequenceName\"); Considerations keep in mind that there will be a separate sequence of numbers for each Entity type. calling this method issues a single db call in order to increment a counter document in the database and retrieve the number. concurrent access won't result in duplicate numbers being generated but it would cause write locking and performance could suffer. multi db support and async methods with task cancellation support are also available. there is no transaction support in order to avoid number generation unpredictability. however, you can call this method from within a transaction without any trouble."
  },
  "wiki/File-Storage.html": {
    "href": "wiki/File-Storage.html",
    "title": "GridFS alternative | MongoDB.Entities",
    "keywords": "GridFS alternative this library features a GridFS alternative where you can stream upload & download files in chunks to keep memory usage at a minimum when dealing with large files. there is no limitation on the size or type of file you can store and the API is designed to be much simpler than GridFS. Define a file entity inherit from FileEntity abstract class instead of the usual Entity class for defining your file entities like below. You can add any other properties you wish to store with it. public class Picture : FileEntity { public string Title { get; set; } public int Width { get; set; } public int Height { get; set; } } the FileEntity is a sub class of Entity class. so all operations supported by the library can be performed with these file entities. Upload data before uploading data for a file entity, you must save the file entity first. then simply call the upload method like below by supplying a stream object for it to read the data from: var kitty = new Picture { Title = \"NiceKitty.jpg\", Width = 4000, Height = 4000 }; await kitty.SaveAsync(); var streamTask = new HttpClient() .GetStreamAsync(\"https://placekitten.com/g/4000/4000\"); using (var stream = await streamTask) { await kitty.Data.UploadAsync(stream); } the Data property on the file entity gives you access to a couple of methods for uploading and downloading. with those methods, you can specify upload chunk size , download batch size , operation timeout period , as well as cancellation token for controlling the process. in addition to the properties you added, there will also be FileSize , ChunkCount & UploadSuccessful properties on the file entity. the file size reports how much data has been read from the stream in bytes if the upload is still in progress or the total file size if the upload is complete. chunk count reports how many number of pieces the file has been broken into for storage. UploadSuccessful will only return true if the process completed without any issues. Download data var picture = await DB.Find<Picture>() .Match(p => p.Title == \"NiceKitty.jpg\") .ExecuteSingleAsync(); using (var stream = File.OpenWrite(\"kitty.jpg\")) { await picture.Data.DownloadAsync(stream); } first retrieve the file entity you want to work with and then call the .Data.DownloadAsync() method by supplying it a stream object to write the data to. alternatively, if the ID of the file entity is known, you can avoid fetching the file entity from the database and access the data directly like so: await DB.File<Picture>(\"xxxxxxxxx\").DownloadAsync(stream); Transaction support uploading & downloading file data within a transaction requires passing in a session to the upload and download methods. see here for an example."
  },
  "wiki/Get-Started.html": {
    "href": "wiki/Get-Started.html",
    "title": "Install | MongoDB.Entities",
    "keywords": "Install install the nuget package with command: Install-Package MongoDB.Entities Initialize first import the package with using MongoDB.Entities; then initialize the database connection like so: Basic initialization await DB.InitAsync(\"DatabaseName\", \"HostAddress\", PortNumber); Advanced initialization await DB.InitAsync(new MongoClientSettings() { Server = new MongoServerAddress(\"localhost\", 27017), Credential = MongoCredential.CreateCredential(\"DatabaseName\", \"username\", \"password\") }, \"DatabaseName\"); Using a connection string await DB.InitAsync(MongoClientSettings.FromConnectionString( \"mongodb+srv://user:password@cluster.mongodb.net/DatabaseName\"), \"DatabaseName\");"
  },
  "wiki/Indexes.html": {
    "href": "wiki/Indexes.html",
    "title": "Index creation | MongoDB.Entities",
    "keywords": "Index creation use the Index<T> method to define indexes as shown below. specify index keys by chaining calls to the .Key() method. first parameter of the method is a lambda pointing to a property on your entity. second parameter specifies the type of key. finally chain in a call to .CreateAsync() to finish defining the index. Tip you should define your indexes at the startup of your application so they only run once at launch. alternatively you can define indexes in the static constructor of your entity classes. Text indexes await DB.Index<Author>() .Key(a => a.Name, KeyType.Text) .Key(a => a.Surname, KeyType.Text) .CreateAsync(); if the field you want to index is nested within arrays or lists, specify an expression with a [-1] index position like so: .Key(a => a.Books[-1].Reviews[-1].Content, KeyType.Text) in order to index all text properties of an entity, you can create a wildcard text index as follows: .Key(a => a, KeyType.Text) Full-text search you can do full text searches after defining a text index as described above with the following: await DB.Find<Book>() .Match(Search.Full, \"search term\") .ExecuteAsync(); you can also start a fluent aggregation pipeline with a $text stage as follows: DB.FluentTextSearch<Book>(Search.Full, \"search term\") Tip click here to see more info on how to do text searches for phrases, negations, any words, etc. Fuzzy-text search in order to run a fuzzy text match, simply change the first parameter to Search.Fuzzy as shown here: await DB.Find<Book>() .Match(Search.Fuzzy, \"search term\") .ExecuteAsync(); Note fuzzy text searching requires a bit of special handling, please see here for detailed information. Other index types use the same Index<T> method as above but with the type parameters of the keys set to one of the following: Ascending Descending Geo2D Geo2DSphere Hashed Wildcard Indexing options To specify options for index creation, chain in calls to the .Option() method before calling the .Create() method. await DB.Index<Book>() .Key(x => x.Title, KeyType.Descending) .Option(o => o.Background = true) .Option(o => o.Unique = true) .CreateAsync(); Retrieve the name of created index The .CreateAsync() method returns the name of the index that was created. var name = await DB.Index<Book>() .Key(x => x.Title, KeyType.Ascending) .Key(x=> x.Price, KeyType.Descending) .CreateAsync(); Delete an index by name await DB.Index<Book>().DropAsync(name); Delete all indexes for an entity type await DB.Index<Book>().DropAllAsync();"
  },
  "wiki/Indexes-Fuzzy-Text-Search.html": {
    "href": "wiki/Indexes-Fuzzy-Text-Search.html",
    "title": "Fuzzy Text Search | MongoDB.Entities",
    "keywords": "Fuzzy Text Search fuzzy text matching is done using the double metaphone algorythm. with it you can find non-exact matches that sounds similar to your search term. fuzzy matching will only work on properties that are of the type FuzzyString which is supplied by this library. it also requires adding these properties to a text index. here's how you'd typically get the fuzzy search to work: 1. Define entity class public class Book : Entity { public FuzzyString AuthorName { get; set; } } 2. Create text index await DB.Index<Book>() .Key(b => b.AuthorName, KeyType.Text) .CreateAsync(); 3. Store the entity await new Book { AuthorName = \"Eckhart Tolle\" }.SaveAsync(); 4. Do a fuzzy search on the index var results = await DB.Find<Book>() .Match(Search.Fuzzy, \"ekard tole\") .ExecuteAsync(); that's all there's to it... in case you need to start a flunt aggregation pipeline with fuzzy text matching, you can do it like so: DB.FluentTextSearch<Book>(Search.Fuzzy, \"ekard tole\") How it works when you store text using FuzzyString class, the resulting mongodb document will look like this: { ... \"AuthorName\": { \"Value\": \"Eckhart Tolle\", \"Hash\": \"AKRT TL\" } ... } the text is stored in both the original form and also a hash consisting of double metaphone key codes for each word. when you perform a fuzzy search, your search term is converted to double metaphone key codes on the fly and matched against the stored hash to find results using standard mongodb full text functionality. Sorting Fuzzy Results: if you'd like to sort the results by relevence (closeness to the original search term) you can use the following utility method: var sortedResults = results.SortByRelevance(\"ekard tole\", b => b.AuthorName); this sorting is done client-side after the fuzzy search retrieves the entities from mongodb. what this extension method does is; it will compare your search term with the value of the property you specify as the second argument to see how close it is using levenshtein distance algorythm. then it will return a new list with the closest matches at the top. you can also exclude items from the resulting list that has a greater edit distance than a given value by specifiying the maxDistance optional parameter like so: var sortedResults = results.SortByRelevance(\"ekard tole\", b => b.AuthorName, 10); Performance considerations: by default, you are only allowed to store strings of up to 250 characters in length, which is roughly about 25 to 30 words max. if the you try to store strings larger than that, an exception will be thrown. this is to discourage abuse of this feature which would lead to performance degradation and wasted resources. however, you have the option of changing the default limit at application startup by setting the following static property: FuzzyString.CharacterLimit = 500;"
  },
  "wiki/Multiple-Databases.html": {
    "href": "wiki/Multiple-Databases.html",
    "title": "Multiple database support | MongoDB.Entities",
    "keywords": "Multiple database support you can store and retrieve Entities in multiple databases on either a single server or multiple servers. the only requirement is to have unique names for each database. the following example demonstrates how to use multiple databases. Usage example: use the DB.DatabaseFor<T>() method to specify which database you want the Entities of a given type to be stored in. it is only neccessary to do that for the entities you want to store in a non-default database. the default database is the very first database your application initializes. all entities by default are stored in the default database unless specified otherwise using DatabaseFor . as such, the Book entities will be stored in the \"BookShop\" database and the Picture entities are stored in the \"BookShopFILES\" database considering the following code. await DB.InitAsync(\"BookShop\"); await DB.InitAsync(\"BookShopFILES\"); DB.DatabaseFor<Picture>(\"BookShopFILES\"); var book = new Book { Title = \"Power Of Now\" }; await book.SaveAsync(); //alternative: //// await DB.SaveAsync(book); var pic = new Picture { BookID = book.ID, Name = \"Power Of Now Cover Photo\" }; await pic.SaveAsync(); //alternative: //// await DB.SaveAsync(pic); await DB.Update<Picture>() .Match(p => p.ID == pic.ID) .Modify(p => p.Name, \"Updated Cover Photo\") .ExecuteAsync(); var result = await DB.Find<Picture>().OneAsync(pic.ID); Note an entity type is tied to a specific database by calling the DatabaseFor method with the database name on startup. that entity type will always be stored in and retrieved from that specific database only. it is not possible to save a single entity type in multiple databases. if you prefer to keep your database specifications inside the entity classes themselves, you could even call DatabaseFor in the static constructor like so: public class Picture : Entity { static Picture() => DB.DatabaseFor<Picture>(\"BookShopFILES\"); } Get database name from an entity instance or type var dbName = pic.DatabaseName(); var dbName = DB.DatabaseName<Book>(); the above methods will return the name of the database that the entity is stored in. if not specifically attached to seperate db, it will return the name of the default database. Limitations cross-database relationships with Many<T> is not supported. no cross-database joins/ look-ups as the driver doesn't support it. storing a single entity type in multiple datbases is not supported. Removal of DB instances in v20 if you've used an earlier verion than v20 of this library, you may have used DB instances for performing operations rather than using the static DB class as the entrypoint. In v20, the DB instance support was removed in order to simplify the codebase and optimize performance as that release was a major jump in version with breaking changes to the API. DB instances were a neccessity before v13 in order to support multiple database access. that requirement was removed in v13 after re-architecting the library internals and it was optional to use DB instances up until v20. it can be argued that DB instances are useful for dependency injection but, ideally you should be injecting your repositories (that wrap up the DB methods) into your controllers/ services, not the DB instances directly. if you don't need to unit test or plan to swap persistance technology at a future date, then there's no need to use dependency injection and you are free to do everything via the DB static methods. it is however, recommended that you encapsulate all data access logic in repository or manager classes in order to isolate data persistance logic from your application logic. Tip as an alternative, have a look at vertical slice architecture as done here for a far superior developer experience compared to the commonly used layerd+di+repositories mess. UPDATE: a DBContext class has been added to the library due to popular demand with the v20.7 release."
  },
  "wiki/Queries-Count.html": {
    "href": "wiki/Queries-Count.html",
    "title": "Count entities | MongoDB.Entities",
    "keywords": "Count entities there are a couple of ways to get the count of entities stored in a collection. Count estimated total var count = await DB.CountEstimatedAsync<Author>(); you can get a fast estimate of total entities for a given entity type at the expense of accuracy. the above will give you a rough estimate of the total entities using collection meta-data. Count total entities var count = await DB.CountAsync<Author>(); the above will give you an accurate count of total entities by running an aggregation query. Count matches with an expression var count = await DB.CountAsync<Author>(a => a.Title == \"The Power Of Now\"); Count matches with a filter builder function var count = await DB.CountAsync<Author>(b => b.Eq(a => a.Name, \"Eckhart Tolle\")); Count matches with a filter definition var filter = DB.Filter<Author>() .Eq(a => a.Name, \"Eckhart Tolle\"); var count = await DB.CountAsync(filter);"
  },
  "wiki/Queries-Find.html": {
    "href": "wiki/Queries-Find.html",
    "title": "Find queries | MongoDB.Entities",
    "keywords": "Find queries several overloads are available for finding entities as shown below. Find one by ID var author = await DB.Find<Author>().OneAsync(\"ID\"); Find many by lambda var authors = await DB.Find<Author>().ManyAsync(a => a.Publisher == \"Harper Collins\"); Find many by filter var authors = await DB.Find<Author>() .ManyAsync(f=> f.Eq(a=>a.Surname,\"Stark\") & f.Gt(a=>a.Age,35)); Tip all the filter definition builder methods of the official driver are available for use as shown above. Find by 2D coordinates var cafes = await DB.Find<Cafe>() .Match(c => c.Location, new Coordinates2D(48.857908, 2.295243), 1000) .ExecuteAsync() Tip see this tutorial for a detailed walkthrough. Find by aggregation expression ($expr) var authors = await DB.Find<Author>() .MatchExpression(\"{$gt:['$TotalSales','$SalesGoal']}\") .ExecuteAsync(); Tip aggregation expressions lets you refer to properties of the same entity using the $ notation as shown above. Advanced find Sorting, paging and projecting var authors = await DB.Find<Author>() .Match(a => a.Age > 30) .Sort(a => a.Age, Order.Descending) .Sort(a => a.Name, Order.Ascending) .Skip(1).Limit(1) .Project(a => new Author { Name = a.Name }) .ExecuteAsync(); the search criteria is specified using .Match() which takes either an ID , lambda expression , filter expression , geospatial , or full/fuzzy text search query . sorting is specified using .Sort() which takes in a lambda for the property to sort by and in which order. .Sort() can be used multiple times in order to specify multiple sorting stages. when doing text queries, you can sort the results by mongodb's 'meta text score' by using the .SortByTextScore() method. how many items to skip and take are specified using .Skip() and .Limit() Projections to avoid the complete entity being returned, you can use .Project() with a lambda expression to get back only the properties you need as shown above. it is also possible to use projection builder methods like so: .Project(p => p.Include(\"Name\").Exclude(\"Surname\")) Tip to be able to chain projection builder methods like above, please add the import statement using MongoDB.Driver; to your class. Projection with exclusions it is also possible to specify an exclusion projection with a new expression like so: var res = await DB.Find<Author>() .Match(a => a.ID == \"xxxxxxxxxxx\") .ProjectExcluding(a => new { a.Age, a.Name }) .ExecuteSingleAsync(); doing so will return an Author entity with all the properties populated except for the Age and Name properties. Project to a different type in order to project to a different result type than the input entity type, simply use the generic overload like so: var name = await DB.Find<Author,string>() .Match(a => a.ID == \"xxxxxxxxxxx\") .Project(a => a.FirstName + \" \" + a.LastName) .ExecuteSingleAsync(); Execute an .Execute*() method is called finally to get back the result of the find command. you can also get a cursor back instead of materialized results by calling .ExecuteCursorAsync() at the end. Tip there are 3 variations of Execute () * you can use. ExecuteAsync() which will return a list of matched entities. ExecuteSingleAsync() which will return only 1 matched entity and will throw an exception if more than 1 entity is matched. ExecuteFirstAsync() which will return the first matched entity. all variations will return a null/default value if nothing was matched."
  },
  "wiki/Queries-Linq.html": {
    "href": "wiki/Queries-Linq.html",
    "title": "LINQ queries | MongoDB.Entities",
    "keywords": "LINQ queries see the mongodb c# driver linq documentation to see which LINQ operations are available. also see the c# driver expressions documentation to see all supported expressions. Tip don't forget to first import the mongodb linq extensions with using MongoDB.Driver.Linq; Query collections var author = await (from a in DB.Queryable<Author>() where a.Name.Contains(\"Eckhart\") select a).FirstOrDefaultAsync(); Collection shortcut var authors = from a in author.Queryable() select a; this .Queryable() is an IQueryable for the whole collection of Authors which you can write queries against. Forward relationship access every Many<T> property gives you access to an IQueryable of child entities. var authors = from a in book.Authors.ChildrenQueryable() select a; this .ChildrenQueryable() is an already filtered IQueryable of child entities. For ex: the above .ChildrenQueryable() is limited to only the Authors of that particular Book entity. It does not give you access to all of the Author entities in the Authors collection. Reverse relationship access for example, if you'd like to get all the books belonging to a genre, you can do it with the help of .ParentsQueryable() like so: var books = book.Genres .ParentsQueryable<Book>(\"GenreID\"); you can also pass in an IQueryable of genres and get back an IQueryable of books like shown below: var query = genre.Queryable() .Where(g => g.Name.Contains(\"Music\")); var books = book.Genres .ParentsQueryable<Book>(query); it is basically a convenience method instead of having to do a manual join like the one shown below in order to access parents of one-to-many or many-to-many relationships. Relationship joins Many<T>.JoinQueryable() gives you access to all the join records of that particular relationship. A join record has two properties ParentID and ChildID that you can use to gain access to parent Entities like so: var books = from j in book.Authors.JoinQueryable() join b in book.Queryable() on j.ParentID equals b.ID select b; Counting children you can get how many entities are there in the opposite side of any relationship as shown below: var authorCount = await book.Authors.ChildrenCountAsync(); var bookCount = await author.Books.ChildrenCountAsync();"
  },
  "wiki/Queries-Pipelines.html": {
    "href": "wiki/Queries-Pipelines.html",
    "title": "Fluent aggregation pipelines | MongoDB.Entities",
    "keywords": "Fluent aggregation pipelines 99% of querying requirements can be catered to with the Find & Queryable APIs. in case you need to build fluent aggregation pipelines, use the Fluent method for getting access to the IAggregateFluent<T> interface for a given entity type like so: var author = await DB.Fluent<Author>() .Match(a => a.Surname == \"Stark\" && a.Age > 10) .SortByDescending(a => a.Age) .ThenByAscending(a => a.Name) .Skip(1).Limit(1) .Project(a => new { Test = a.Name }) .SingleOrDefaultAsync(); Tip you'll have to add using MongoDB.Driver; import statement for the async extension methods such as SingleOrDefaultAsync() to work. GeoNear aggregation pipelines in order to start a fluent aggregation pipeline with a GeoNear query, simply do the following: var query = DB.FluentGeoNear<Place>( NearCoordinates: new Coordinates2D(48.857908, 2.295243), DistanceField: x => x.DistanceMeters, MaxDistance: 20000); the above code builds an aggregation pipeline that will find all the documents tagged with locations within 20Km from the eiffel tower in paris. you can then add more pipeline stages to the above query in order to do further processing. you can specify all the supported options for $geoNear using the constructor above. Other fluent interfaces there are also fluent counterparts of other methods such as: Many<T>.ChildrenFluent() //pre-filtered children of the parent Many<T>.ParentsFluent() //access parents of a given child Many<T>.JoinFluent() //all records of the join collection Transaction.Fluent<T>() //transactional variation of DB.Fluent<T>() DB.FluentTextSearch<T>() //full text search DB.FluentGeoNear<T>() //geospatial fluent pupeline Transaction.FluentTextSearch<T>() //transactional full text search DB.Fluent<T>().MatchExpression() //$expr queries author.Fluent() //shortcut for DB.Fluent<Author>()"
  },
  "wiki/Relationships-Embeded.html": {
    "href": "wiki/Relationships-Embeded.html",
    "title": "Embedded Relationships | MongoDB.Entities",
    "keywords": "Embedded Relationships Tip If you are going to store more than a handful of entities within another entity, it is best to store them by reference as described in this page . One-to-one var author = new Author { Name = \"Eckhart Tolle\" } await author.SaveAsync(); book.Author = author; await book.SaveAsync() as mentioned earlier, calling SaveAsync() persists author to the \"Authors\" collection in the database. it is also stored in book.Author property. so, the author entity now lives in two locations (in the collection and also inside the book entity) and are linked by the ID . if the goal is to embed something as an independant/unlinked document, it is best to use a class that does not inherit from the Entity class or simply use the .ToDocument() method of an entity as explained earlier. Embed removal to remove the embedded author , simply do: book.Author = null; await book.SaveAsync(); the original author in the Authors collection is unaffected. Entity deletion if you call book.Author.DeleteAsync() , the author entity is deleted from the Authors collection if it was a linked entity. One-to-many book.OtherAuthors = new Author[] { author1, author2 }; await book.SaveAsync(); Embed removal: book.OtherAuthors = null; await book.SaveAsync(); the original author1, author2 entities in the Authors collection are unaffected. Entity deletion: if you call book.OtherAuthors.DeleteAllAsync() the respective author1, author2 entities are deleted from the Authors collection if they were linked entities."
  },
  "wiki/Relationships-Referenced.html": {
    "href": "wiki/Relationships-Referenced.html",
    "title": "Referenced Relationships | MongoDB.Entities",
    "keywords": "Referenced Relationships referenced relationships require a bit of special handling. a one-to-one relationship is defined using the One<T> class and one-to-many as well as many-to-many relationships are defined using the Many<T> class and you have to initialize the Many<T> child properties in the constructor of the parent entity as shown below. public class Book : Entity { public One<Author> MainAuthor { get; set; } public Many<Author> CoAuthors { get; set; } [OwnerSide] public Many<Genre> Genres { get; set; } public Book() { this.InitOneToMany(() => CoAuthors); this.InitManyToMany(() => Genres, genre => genre.Books); } } public class Genre : Entity { [InverseSide] public Many<Book> Books { get; set; } public Genre() { this.InitManyToMany(() => Books, book => book.Genres); } } notice the parameters of the InitOneToMany and InitManyToMany methods above. the first method only takes one parameter which is just a lambda pointing to the property you want to initialize. the next method takes 2 parameters. first is the property to initialize. second is the property of the other side of the relationship. also note that you specify which side of the relationship a property is using the attributes [OwnerSide] or [InverseSide] for defining many-to-many relationsips. One-to-one call the ToReference() method of the entity you want to store as a reference like so: book.MainAuthor = author.ToReference(); await book.SaveAsync(); alternatively you can use the implicit operator functionality by simply assigning an instance or the string ID like so: book.MainAuthor = author; book.MainAuthor = author.ID; Reference removal book.MainAuthor = null; await book.SaveAsync(); the original author in the Authors collection is unaffected. Entity deletion If you delete an entity that is referenced as above by calling author.DeleteAsync() all references pointing to that entity are automatically deleted. as such, book.MainAuthor.ToEntityAsync() will then return null . the .ToEntityAsync() method is described below. One-to-many & many-to-many await book.Authors.AddAsync(author); //one-to-many await book.Genres.AddAsync(genre); //many-to-many there's no need to call book.SaveAsync() because references are automatically saved using special join collections. you can read more about them in the Schema Changes section. there are other overloads for adding relationships with multiple entities or just the string IDs. click here to see a full example of a referenced one-to-many relationship. Reference removal await book.Authors.RemoveAsync(author); await book.Genres.RemoveAsync(genre); the original author in the Authors collection is unaffected. also the genre entity in the Genres collection is unaffected. only the relationship between entities are deleted. there are other overloads for adding relationships with multiple entities or just the string IDs. Entity deletion If you delete an entity that is referenced as above by calling author.DeleteAsync() all references pointing to that author entity are automatically deleted. as such, book.Authors will not have author as a child. the same applies to Many-To-Many relationships. deleting any entity that has references pointing to it from other entities results in those references getting deleted and the relationships being invalidated. ToEntityAsync() shortcut a reference can be turned back in to an entity with the ToEntityAsync() method. var author = await book.MainAuthor.ToEntityAsync(); you can also project the properties you need instead of getting back the complete entity like so: var author = await book.MainAuthor .ToEntityAsync(a => new Author { Name = a.Name, Age = a.Age }); Transaction support adding and removing related entities require passing in the session when used within a transaction. see here for an example."
  },
  "wiki/Schema-Changes.html": {
    "href": "wiki/Schema-Changes.html",
    "title": "Schema changes | MongoDB.Entities",
    "keywords": "Schema changes be mindful when changing the schema of your entities. the documents/entities stored in mongodb are overwritten with the current schema/ shape of your entities when you call SaveAsync . for example: Old schema public class Book : Entity { public int Price { get; set; } } New schema public class Book : Entity { public int SellingPrice { get; set; } } the data stored in mongodb under Price will be lost upon saving if you do not manually handle the transfer of data from the old property to the new property. Renaming entities if you for example rename the Book entity to Test when you run you app, a new collection called \"Test\" will be created and the old collection called \"Book\" will be orphaned. Any new entities you save will be added to the \"Test\" collection. To avoid that, you can simply rename the collection called \"Book\" to \"Test\" before running your app. or you can tie down the name of the collection using the [Name] attribute Reference collections Reference(Join) collections use the naming format [Parent~Child(PropertyName)] for One-To-Many and [(PropertyName)Parent~Child(PropertyName)] for Many-To-Many . you don't have to pay any attention to these special collections unless you rename your entities or properties. for ex: if you rename the Book entity to AwesomeBook and property holding it to GoodAuthors just rename the corresponding join collection from [Book~Author(Authors)] to [AwesomeBook~Author(GoodAuthors)] in order to get the references working again. Indexes some care is needed to make sure there won't be any orphaned/ redundant indexes in mongodb after changing your schema. Renaming entities if you rename an entity, simply rename the corresponding collection in mongodb before running your app as mentioned in the previous section and all indexes will continue to work because indexes are tied to the collections they're in. or simply tie down the collection name with the [Name] attribute. Changing entity properties or index definitions after running the app with changed property names or modified index definitions, new indexes will be automatically created to match the current shape of index definitions in your code. you should manually drop indexes that have old schema in order to get rid of redundant/ orphaned indexes. Note the only exception to the above is text indexes. text indexes don't require any manual handling. since there can only be one text index per collection, the library automatically drops and re-creates text indexes when a schema change is detected. Migration system now that you understand how schema changes affect the database, you can automate the needed changes using the newly introduced migration system as explained in the Data Migrations section."
  },
  "wiki/String-Templates.html": {
    "href": "wiki/String-Templates.html",
    "title": "String templates | MongoDB.Entities",
    "keywords": "String templates the mongodb driver has it's limits and sometimes you need to compose queries either by hand or using a query editor/composer. to be able to run those queries and inject values from your C# code, you're required to compose BsonDocuments or do string concatenation which leads to an ugly, unreadable, magic string infested mess. in order to combat this problem and also to couple your C# entity schema to raw queries, this library offers a templating system based on tag replacements. take the following find query for example: db.Book.find( { Title : 'book_name', Price : book_price } ) to couple this text query to your C# models and pass in the values for title and price, you simply surround the parts you want replaced with < and > in order to turn them in to replacement tags/markers like this: db.Book.find( { <Title> : '<book_name>', <Price> : <book_price> } ) the templating system is based on a special class called Template . You simply instantiate a 'Template' object supplying the tagged/marked text query to the constructor. then you chain method calls on the Template object to replace each tag you've marked on the query like so: var query = new Template<Book>(@\" { <Title> : '<book_name>', <Price> : <book_price> }\") .Path(b => b.Title) .Path(b => b.Price) .Tag(\"book_name\",\"The Power Of Now\") .Tag(\"book_price\",\"10.95\"); var result = await DB.Find<Book>() .Match(query) .ExecuteAsync(); the resulting query sent to mongodb is this: db.Book.find( { Title : 'The Power Of Now', Price : 10.95 } ) the .Tag() method simply replaces matching tags on the text query with the supplied value. you don't have to use the < and > characters while using the .Tag() method. infact, avoid it as the tags won't match if you use them. the .Path() method is one of many offered by the Prop class you can use to get the full 'dotted' path of a property by supplying a lambda/member expression. please see the documentation of the 'Prop' class here for the other methods available. notice, that most of these 'Prop' methods only require a single parameter. whatever member expression you supply to them gets converted to a property/field path like this: expression: x => x.Authors[0].Books[0].Title resulting path: Authors.Books.Title if your text query has a tag <Authors.Books.Title> it will get replaced by the resulting path from the 'Prop' class method. the template system will throw an exception in the event of the following 3 scenarios. the input query/text has no tags marked using < and > characters. the input query has tags that you forget to specify replacements for. you have specified replacements that doesn't have a matching tag in the query. this kind of runtime errors are preferable than your code failing silently because the queries didn't produce any results or produced the wrong results. Examples Aggregation pipeline var pipeline = new Template<Book>(@\" [ { $match: { <Title>: '<book_name>' } }, { $sort: { <Price>: 1 } }, { $group: { _id: '$<AuthorId>', product: { $first: '$$ROOT' } } }, { $replaceWith: '$product' } ]\") .Path(b => b.Title) .Path(b => b.Price) .Path(b => b.AuthorId) .Tag(\"book_name\", \"MongoDB Templates\"); var book = await DB.PipelineSingleAsync(pipeline); Aggregation pipeline with different result type var pipeline = new Template<Book, Author>(@\" [ { $match: { _id: <book_id> } }, { $lookup: { from: '<author_collection>', localField: '<AuthorID>', foreignField: '_id', as: 'authors' } }, { $replaceWith: { $arrayElemAt: ['$authors', 0] } }, { $set: { <Age> : 34 } } ]\") .Tag(\"book_id\", \"ObjectId('5e572df44467000021005692')\") .Tag(\"author_collection\", DB.Entity<Author>().CollectionName()) .Path(b => b.AuthorID) .PathOfResult(a => a.Age); var authors = await DB.PipelineAsync(pipeline); Find with match expression var query = new Template<Author>(@\" { $and: [ { $gt: [ '$<Age>', <author_age> ] }, { $eq: [ '$<Surname>', '<author_surname>' ] } ] }\") .Path(a => a.Age) .Path(a => a.Surname) .Tag(\"author_age\", \"54\") .Tag(\"author_surname\", \"Tolle\"); var authors = await DB.Find<Author>() .MatchExpression(query) .ExecuteAsync(); Update with aggregation pipeline var pipeline = new Template<Author>(@\" [ { $set: { <FullName>: { $concat: ['$<Name>',' ','$<Surname>'] } } }, { $unset: '<Age>'} ]\") .Path(a => a.FullName) .Path(a => a.Name) .Path(a => a.Surname) .Path(a => a.Age); await DB.Update<Author>() .Match(a => a.ID == \"xxxxx\") .WithPipeline(pipeline) .ExecutePipelineAsync(); Update with array filters var filters = new Template<Author>(@\" [ { '<a.Age>': { $gte: <age> } }, { '<b.Name>': 'Echkart Tolle' } ]\") .Elements(0, author => author.Age) .Elements(1, author => author.Name); .Tag(\"age\", \"55\") var update = new Template<Book>(@\" { $set: { '<Authors.$[a].Age>': <age>, '<Authors.$[b].Name>': '<name>' } }\") .PosFiltered(book => book.Authors[0].Age) .PosFiltered(book => book.Authors[1].Name) .Tag(\"age\", \"55\") .Tag(\"name\", \"Updated Name\"); await DB.Update<Book>() .Match(book => book.ID == \"xxxxxxxx\") .WithArrayFilters(filters) .Modify(update) .ExecuteAsync();"
  },
  "wiki/Transactions.html": {
    "href": "wiki/Transactions.html",
    "title": "ACID compliant transactions | MongoDB.Entities",
    "keywords": "ACID compliant transactions multi-document transactions are performed as shown below: var book1 = new Book { Title = \"book one\" }; var book2 = new Book { Title = \"book two\" }; await DB.SaveAsync(new[] { book1, book2 }); using (var TN = DB.Transaction()) { var author1 = new Author { Name = \"one\" }; var author2 = new Author { Name = \"two\" }; await TN.SaveAsync(new[] { author1, author2 }); await TN.DeleteAsync<Book>(new[] { book1.ID, book2.ID }); await TN.CommitAsync(); } in the above code, book1 and book2 are saved before the transaction begins. author1 and author2 is created within the transaction and book1 and book2 are deleted within the transaction. a transaction is started when you instantiate a Transaction object either via the factory method DB.Transaction() or new Transaction() . you then perform all transaction logic using the methods supplied by that class such as .SaveAsync() , .DeleteAsync() , .Update() , .Find() instead of the methods supplied by the DB static class like you'd normally do. the methods of the DB class also supports transactions but you would have to supply a session to each method call, which would be less convenient than using the Transaction class. whatever transactional operations you do are only saved to the database once you call the .CommitAsync() method. if you do not call .CommitAsync(), then nothing changes in the database. if an exception occurs before the .CommitAsync() line is reached, all changes are rolled back and the transaction is implicitly terminated. it is best to always wrap the transaction in a using statement because reaching the end of the using statement will automatically end the transaction and dispose the underlying session. if no using statement is used, you will have to manually dispose the transaction object you created in order to finalize things. you can also call .AbortAsync() to abort a transaction prematurely if needed at which point all changes will be rolled back. Relationship Manipulation relationships within a transaction requires passing down the session to the .Add() and .Remove() methods as shown below. using (var TN = DB.Transaction()) { var author = new Author { Name = \"author one\" }; await TN.SaveAsync(author); var book = new Book { Title = \"book one\" }; await TN.SaveAsync(book); await author.Books.AddAsync(book, TN.Session); await author.Books.RemoveAsync(book, TN.Session); await TN.CommitAsync(); } File Storage file storage within a transaction also requires passing down the session like so: using (var TN = DB.Transaction()) { var picture = new Picture { Title = \"my picture\" }; await TN.SaveAsync(picture); var streamTask = new HttpClient() .GetStreamAsync(\"https://placekitten.com/g/4000/4000\"); using (var stream = await streamTask) { await picture.Data.UploadAsync(stream, session: TN.Session); } await TN.CommitAsync(); } Multiple Databases a transaction is always tied to a single database. you can specify which database to use for a transaction in a couple of ways. var TN = DB.Transaction(\"DatabaseName\") // manually specify the database name var TN = DB.Transaction<Book>() // gets the database from the entity type if you try to perform an operation on an entity type that is not connected to the same database as the transaction, mongodb server will throw an exception. Note please read the page on multiple databases to understand how multi-db support works."
  }
}