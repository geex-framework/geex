schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

scalar ObjectId

scalar Any

enum AppPermission {
  authorization_mutation_authorize
  identity_mutation_createOrg
  identity_mutation_createRole
  identity_mutation_createUser
  identity_mutation_editOrg
  identity_mutation_editRole
  identity_mutation_editUser
  identity_query_orgs
  identity_query_roles
  identity_query_users
  multiTenant_mutation_createTenant
  multiTenant_mutation_deleteTenant
  multiTenant_mutation_editTenant
  multiTenant_query_tenants
  settings_mutation_editSetting
}

"inherit this enumeration to customise your own business exceptions"
enum GeexExceptionType {
  Conflict
  ExternalError
  NotFound
  OnPurpose
  Unknown
  ValidationFailed
}

enum GeexClaimType {
  ClientId
  Expires
  FullName
  Nickname
  Org
  Provider
  Role
  Sub
  Tenant
}

enum LoginProviderEnum {
  Geex
  Local
  Trusted
}

enum BlobStorageType {
  AliyunOss
  Db
  RedisCache
}

enum OrgTypeEnum {
  Default
}

enum MultiTenantPermission {
  multiTenant_mutation_createTenant
  multiTenant_mutation_deleteTenant
  multiTenant_mutation_editTenant
  multiTenant_query_tenants
}

enum TenantPermission {
  multiTenant_mutation_createTenant
  multiTenant_mutation_deleteTenant
  multiTenant_mutation_editTenant
  multiTenant_query_tenants
}

enum IdentityPermission {
  identity_mutation_createOrg
  identity_mutation_createRole
  identity_mutation_createUser
  identity_mutation_editOrg
  identity_mutation_editRole
  identity_mutation_editUser
  identity_query_orgs
  identity_query_roles
  identity_query_users
}

enum UserPermission {
  identity_mutation_createUser
  identity_mutation_editUser
  identity_query_users
}

enum RolePermission {
  identity_mutation_createRole
  identity_mutation_editRole
  identity_query_roles
}

enum OrgPermission {
  identity_mutation_createOrg
  identity_mutation_editOrg
  identity_query_orgs
}

enum MessagingSettings {
  MessagingModuleName
}

enum FrontendCallType {
  CacheDataChange
  NewMessage
}

enum BlobStorageSettings {
  BlobStorageModuleName
}

enum SettingsPermission {
  settings_mutation_editSetting
}

enum SettingDefinition {
  AppAppMenu
  AppAppName
  AppPermissions
  BlobStorageModuleName
  CommercialModuleName
  LocalizationData
  LocalizationLanguage
  MessagingModuleName
}

enum SettingScopeEnumeration {
  Global
  Tenant
  User
}

enum AuthorizationPermission {
  authorization_mutation_authorize
}

enum AuthorizeTargetType {
  Role
  User
}

enum CaptchaProvider {
  Image
  Sms
}

enum AppSettings {
  AppAppMenu
  AppAppName
  AppPermissions
}

enum LocalizationSettings {
  LocalizationData
  LocalizationLanguage
}

"缓存数据变更类型"
enum CacheDataType {
  Org
}

enum PlatformFrontCallType {
  CacheDataChange
}

enum PlatformLoginProviderEnum {
  Geex
}

enum CommercialSettings {
  CommercialModuleName
}

type Query {
  _: String
  "列表获取Tenant"
  tenants(skip: Int take: Int where: ITenantFilterInput): TenantsCollectionSegment
  "列表获取User"
  users(skip: Int take: Int where: IUserFilterInput): UsersCollectionSegment
  currentUser: IUser!
  orgs(skip: Int take: Int where: OrgFilterInput): OrgsCollectionSegment
  roles(skip: Int take: Int where: RoleFilterInput): RolesCollectionSegment
  "列表获取message"
  messages(skip: Int take: Int where: IMessageFilterInput): MessagesCollectionSegment
  "列表获取message"
  unreadMessages(input: GetUnreadMessagesInput!): [IMessage!]!
  "列表获取BlobObject"
  blobObjects(skip: Int take: Int where: IBlobObjectFilterInput): BlobObjectsCollectionSegment
  "根据provider获取全量设置"
  settings(skip: Int take: Int input: GetSettingsInput! where: ISettingFilterInput): SettingsCollectionSegment
  "获取初始化应用所需的settings"
  initSettings: [ISetting!]!
  myPermissions: [String!]!
  _hint: HintType
  orgsCache: [OrgCacheItem!]!
  "列表获取order"
  orders(skip: Int take: Int input: QueryOrderInput! where: OrderFilterInput order: [OrderSortInput!]): OrdersCollectionSegment
  "列表获取order"
  orderById(id: String!): Order!
}

type Mutation {
  _: String
  authenticate(input: AuthenticateInput!): UserToken!
  federateAuthenticate(input: FederateAuthenticateInput!): UserToken!
  cancelAuthentication: Boolean!
  "创建Tenant"
  createTenant(input: CreateTenantRequestInput!): ITenant!
  "编辑Tenant"
  editTenant(input: EditTenantRequestInput!): Boolean!
  "切换Tenant可用状态\n\n\n**Returns:**\n当前租户的可用性"
  toggleTenantAvailability(input: ToggleTenantAvailabilityRequestInput!): Boolean!
  "校验Tenant可用性"
  checkTenant(code: String!): ITenant
  "更新设置"
  changePassword(input: ChangePasswordRequestInput!): Boolean!
  register(input: RegisterUserRequestInput!): Boolean!
  assignRoles(input: AssignRoleRequestInput!): Boolean!
  assignOrgs(input: AssignOrgRequestInput!): Boolean!
  editUser(input: EditUserRequestInput!): Boolean!
  createUser(input: CreateUserRequestInput!): Boolean!
  resetUserPassword(input: ResetUserPasswordRequestInput!): Boolean!
  createOrg(input: CreateOrgInput!): Org!
  fixUserOrg: Boolean!
  createRole(input: CreateRoleInput!): Role!
  setRoleDefault(input: SetRoleDefaultInput!): Boolean!
  "标记消息已读"
  markMessagesRead(input: MarkMessagesReadInput!): Boolean!
  "删除消息分配"
  deleteMessageDistributions(input: DeleteMessageDistributionsInput!): Boolean!
  "发送消息"
  sendMessage(input: SendNotificationMessageRequestInput!): Boolean!
  "创建消息"
  createMessage(input: CreateMessageRequestInput!): IMessage!
  "编辑消息"
  editMessage(input: EditMessageRequestInput!): Boolean!
  "创建BlobObject"
  createBlobObject(input: CreateBlobObjectRequestInput!): IBlobObject!
  "删除BlobObject"
  deleteBlobObject(input: DeleteBlobObjectRequestInput!): Boolean!
  "更新设置"
  editSetting(input: EditSettingRequestInput!): ISetting!
  authorize(input: AuthorizeInput!): Boolean!
  generateCaptcha(input: SendCaptchaInput!): Captcha!
  validateCaptcha(input: ValidateCaptchaInput!): Boolean!
  submitOrder(ids: [String] remark: String): Boolean
  auditOrder(ids: [String] remark: String): Boolean
  unsubmitOrder(ids: [String] remark: String): Boolean
  unauditOrder(ids: [String] remark: String): Boolean
  "创建Order"
  createOrder(input: CreateOrderInput!): Order!
  "编辑Order"
  editOrder(id: String! input: EditOrderInput!): Boolean!
  "删除Order"
  deleteOrder(ids: [String!]!): Boolean!
}

type Subscription {
  _: String
  "订阅服务器对单个用户的前端调用"
  onFrontendCall: IFrontendCall!
  "订阅广播"
  onBroadcast: IFrontendCall!
  "测试"
  echo(text: String!): String!
  onCacheDataChange: IFrontendCall!
}

"The contract for Entity classes"
interface IEntityBase {
  "The Id property for this entity type.\n注意: dbcontext会根据entity是否有id值来判断当前entity是否为新增"
  id: String!
  createdOn: DateTime!
}

interface IAuditEntity {
  "对象审批状态"
  auditStatus: AuditStatus!
  "是否满足提交条件"
  submittable: Boolean!
  "The Id property for this entity type.\n注意: dbcontext会根据entity是否有id值来判断当前entity是否为新增"
  id: String!
  createdOn: DateTime!
}

interface IPagedList {
  pageIndex: Int!
  pageSize: Int!
  totalPage: Int!
  totalCount: Int!
}

"^\\[1\\]\\(\\[3-9\\]\\)[0-9]{9}$"
scalar ChinesePhoneNumberType

type UserToken {
  token: String
  user: IUser!
  loginProvider: LoginProviderEnum
  userId: String!
  name: String!
}

type Tenant implements ITenant & IEntityBase {
  id: String!
  createdOn: DateTime!
  modifiedOn: DateTime!
  code: String!
  name: String!
  isEnabled: Boolean!
  "额外信息"
  externalInfo: Any
}

type User implements IUser & IEntityBase {
  id: String!
  createdOn: DateTime!
  modifiedOn: DateTime!
  avatarFile: IBlobObject
  claims(where: UserClaimFilterInput): [UserClaim!]!
  checkPassword(password: String!): Boolean!
  setPassword(password: String): User!
  phoneNumber: String
  isEnable: Boolean!
  username: String!
  nickname: String
  email: String
  password: String!
  orgs: [IOrg!]!
  orgCodes: [String!]!
  permissions: [String!]!
  roleIds: [String!]!
  avatarFileId: String
  roles: [IRole!]!
  roleNames: [String!]!
  loginProvider: LoginProviderEnum!
  openId: String
  tenantCode: String
}

type Org implements IEntityBase & IOrg {
  id: String!
  createdOn: DateTime!
  modifiedOn: DateTime!
  "编码"
  code: String!
  name: String!
  "组织类型"
  orgType: OrgTypeEnum!
  "所有子组织编码"
  allSubOrgCodes: [String!]!
  "直系子组织编码"
  directSubOrgCodes: [String!]!
  "所有子组织"
  allSubOrgs: [IOrg!]!
  "直系子组织"
  directSubOrgs: [IOrg!]!
  "父组织编码"
  parentOrgCode: String!
  "父组织"
  parentOrg: IOrg!
  "所有父组织编码"
  allParentOrgCodes: [String!]!
  "所有父组织"
  allParentOrgs: [IOrg!]!
}

"role为了方便和string的相互转化, 采用class的形式"
type Role implements IEntityBase & IRole {
  id: String!
  createdOn: DateTime!
  modifiedOn: DateTime!
  name: String!
  code: String!
  users: [IUser!]!
  permissions: [String!]!
  tenantCode: String
  isDefault: Boolean!
  isStatic: Boolean!
  isEnabled: Boolean!
}

type FrontendCall implements IFrontendCall {
  data: Any
  frontendCallType: FrontendCallType!
}

interface IFrontendCall {
  data: Any
  frontendCallType: FrontendCallType!
}

type IMessageContent {
  _: String!
}

"普通message"
type Message implements IMessage & IEntityBase {
  id: String!
  createdOn: DateTime!
  modifiedOn: DateTime!
  fromUserId: String
  messageType: MessageType!
  content: IMessageContent!
  toUserIds: [String!]!
  title: String!
  time: DateTime!
  severity: MessageSeverityType!
}

"this is a aggregate root of this module, we name it the same as the module feel free to change it to its real name"
type BlobObject implements IBlobObject & IEntityBase {
  id: String!
  createdOn: DateTime!
  modifiedOn: DateTime!
  fileName: String!
  md5: String!
  url: String!
  fileSize: Long!
  mimeType: String!
  storageType: BlobStorageType!
}

"The `Upload` scalar type represents a file upload."
scalar Upload

type Setting implements ISetting & IEntityBase {
  id: String!
  createdOn: DateTime!
  modifiedOn: DateTime!
  scope: SettingScopeEnumeration!
  validScopes: [SettingScopeEnumeration!]!
  scopedKey: String
  name: SettingDefinition!
  value: Any
}

type Captcha {
  captchaType: CaptchaType!
  key: String!
  bitmap: String
}

"this is a aggregate root of this module, we name it the same as the module feel free to change it to its real name"
type Order implements IEntityBase & IAuditEntity {
  id: String!
  createdOn: DateTime!
  modifiedOn: DateTime!
  "对象审批状态"
  auditStatus: AuditStatus!
  "是否满足提交条件"
  submittable: Boolean!
  name: String!
  "审批操作备注文本"
  auditRemark: String
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

interface ITenant {
  code: String!
  name: String!
  isEnabled: Boolean!
  "The Id property for this entity type.\n注意: dbcontext会根据entity是否有id值来判断当前entity是否为新增"
  id: String!
  createdOn: DateTime!
}

input UserClaimFilterInput {
  and: [UserClaimFilterInput!]
  or: [UserClaimFilterInput!]
  claimType: StringOperationFilterInput
  claimValue: StringOperationFilterInput
}

interface IUser {
  checkPassword(password: String!): Boolean!
  phoneNumber: String
  username: String!
  nickname: String
  email: String
  loginProvider: LoginProviderEnum!
  openId: String
  isEnable: Boolean!
  roleIds: [String!]!
  orgCodes: [String!]!
  "The Id property for this entity type.\n注意: dbcontext会根据entity是否有id值来判断当前entity是否为新增"
  id: String!
  createdOn: DateTime!
}

"this is a aggregate root of this module, we name it the same as the module feel free to change it to its real name"
interface IMessage {
  fromUserId: String
  messageType: MessageType!
  content: IMessageContent!
  toUserIds: [String!]!
  severity: MessageSeverityType!
  title: String!
  time: DateTime!
  "The Id property for this entity type.\n注意: dbcontext会根据entity是否有id值来判断当前entity是否为新增"
  id: String!
  createdOn: DateTime!
}

"this is a aggregate root of this module, we name it the same as the module feel free to change it to its real name"
interface IBlobObject {
  fileName: String
  md5: String
  fileSize: Long!
  mimeType: String
  url: String
  storageType: BlobStorageType
  "The Id property for this entity type.\n注意: dbcontext会根据entity是否有id值来判断当前entity是否为新增"
  id: String!
  createdOn: DateTime!
}

interface ISetting {
  scope: SettingScopeEnumeration!
  scopedKey: String
  value: Any
  name: SettingDefinition!
  "The Id property for this entity type.\n注意: dbcontext会根据entity是否有id值来判断当前entity是否为新增"
  id: String!
  createdOn: DateTime!
}

input ITenantFilterInput {
  and: [ITenantFilterInput!]
  or: [ITenantFilterInput!]
  code: StringOperationFilterInput
  name: StringOperationFilterInput
  isEnabled: BooleanOperationFilterInput
}

"A segment of a collection."
type TenantsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [ITenant!]
  totalCount: Int!
}

input IUserFilterInput {
  and: [IUserFilterInput!]
  or: [IUserFilterInput!]
  username: StringOperationFilterInput
  nickname: StringOperationFilterInput
  isEnable: BooleanOperationFilterInput
  phoneNumber: StringOperationFilterInput
  orgCodes: ListStringOperationFilterInput
  roleIds: ListStringOperationFilterInput
  "The Id property for this entity type.\n注意: dbcontext会根据entity是否有id值来判断当前entity是否为新增"
  id: StringOperationFilterInput
}

"A segment of a collection."
type UsersCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [User]
  totalCount: Int!
}

input OrgFilterInput {
  and: [OrgFilterInput!]
  or: [OrgFilterInput!]
  name: StringOperationFilterInput
  "编码"
  code: StringOperationFilterInput
  "父组织编码"
  parentOrgCode: StringOperationFilterInput
  "组织类型"
  orgType: ClassEnumOperationFilterInputOfOrgTypeEnumFilterInput
}

"A segment of a collection."
type OrgsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Org]
  totalCount: Int!
}

"role为了方便和string的相互转化, 采用class的形式"
input RoleFilterInput {
  and: [RoleFilterInput!]
  or: [RoleFilterInput!]
  name: StringOperationFilterInput
  id: StringOperationFilterInput
  users: ListFilterInputTypeOfIUserFilterInput
}

"A segment of a collection."
type RolesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Role]
  totalCount: Int!
}

"this is a aggregate root of this module, we name it the same as the module feel free to change it to its real name"
input IMessageFilterInput {
  and: [IMessageFilterInput!]
  or: [IMessageFilterInput!]
  messageType: MessageTypeOperationFilterInput
  "The Id property for this entity type.\n注意: dbcontext会根据entity是否有id值来判断当前entity是否为新增"
  id: StringOperationFilterInput
  fromUserId: StringOperationFilterInput
  content: IMessageContentFilterInput
  toUserIds: ListStringOperationFilterInput
  severity: MessageSeverityTypeOperationFilterInput
  title: StringOperationFilterInput
  time: DateTimeOperationFilterInput
}

"A segment of a collection."
type MessagesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Message]
  totalCount: Int!
}

"this is a aggregate root of this module, we name it the same as the module feel free to change it to its real name"
input IBlobObjectFilterInput {
  and: [IBlobObjectFilterInput!]
  or: [IBlobObjectFilterInput!]
  "The Id property for this entity type.\n注意: dbcontext会根据entity是否有id值来判断当前entity是否为新增"
  id: StringOperationFilterInput
  md5: StringOperationFilterInput
  mimeType: StringOperationFilterInput
  storageType: ClassEnumOperationFilterInputOfBlobStorageTypeFilterInput
  fileSize: LongOperationFilterInput
  fileName: StringOperationFilterInput
}

"A segment of a collection."
type BlobObjectsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [BlobObject]
  totalCount: Int!
}

input ISettingFilterInput {
  and: [ISettingFilterInput!]
  or: [ISettingFilterInput!]
  "The Id property for this entity type.\n注意: dbcontext会根据entity是否有id值来判断当前entity是否为新增"
  id: StringOperationFilterInput
  name: SettingDefinitionOperationFilterInput
  scope: SettingScopeEnumerationOperationFilterInput
  scopedKey: StringOperationFilterInput
}

"A segment of a collection."
type SettingsCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Setting]
  totalCount: Int!
}

type HintType {
  _: String!
}

"this is a aggregate root of this module, we name it the same as the module feel free to change it to its real name"
input OrderFilterInput {
  and: [OrderFilterInput!]
  or: [OrderFilterInput!]
  name: StringOperationFilterInput
  "对象审批状态"
  auditStatus: AuditStatusOperationFilterInput
  "审批操作备注文本"
  auditRemark: StringOperationFilterInput
  "是否满足提交条件"
  submittable: BooleanOperationFilterInput
  modifiedOn: DateTimeOperationFilterInput
  id: StringOperationFilterInput
  createdOn: DateTimeOperationFilterInput
}

"this is a aggregate root of this module, we name it the same as the module feel free to change it to its real name"
input OrderSortInput {
  name: SortEnumType
  "对象审批状态"
  auditStatus: SortEnumType
  "审批操作备注文本"
  auditRemark: SortEnumType
  "是否满足提交条件"
  submittable: SortEnumType
  modifiedOn: SortEnumType
  id: SortEnumType
  createdOn: SortEnumType
}

"A segment of a collection."
type OrdersCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Order]
  totalCount: Int!
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

input ListStringOperationFilterInput {
  all: StringOperationFilterInput
  none: StringOperationFilterInput
  some: StringOperationFilterInput
  any: Boolean
}

input ClassEnumOperationFilterInputOfOrgTypeEnumFilterInput {
  eq: OrgTypeEnum
  neq: OrgTypeEnum
  in: [OrgTypeEnum]
  nin: [OrgTypeEnum]
}

input ListFilterInputTypeOfIUserFilterInput {
  all: IUserFilterInput
  none: IUserFilterInput
  some: IUserFilterInput
  any: Boolean
}

input MessageTypeOperationFilterInput {
  eq: MessageType
  neq: MessageType
  in: [MessageType!]
  nin: [MessageType!]
}

input IMessageContentFilterInput {
  and: [IMessageContentFilterInput!]
  or: [IMessageContentFilterInput!]
  _: StringOperationFilterInput
}

input MessageSeverityTypeOperationFilterInput {
  eq: MessageSeverityType
  neq: MessageSeverityType
  in: [MessageSeverityType!]
  nin: [MessageSeverityType!]
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ClassEnumOperationFilterInputOfBlobStorageTypeFilterInput {
  eq: BlobStorageType
  neq: BlobStorageType
  in: [BlobStorageType]
  nin: [BlobStorageType]
}

input LongOperationFilterInput {
  eq: Long
  neq: Long
  in: [Long]
  nin: [Long]
  gt: Long
  ngt: Long
  gte: Long
  ngte: Long
  lt: Long
  nlt: Long
  lte: Long
  nlte: Long
}

input SettingDefinitionOperationFilterInput {
  eq: SettingDefinition
  neq: SettingDefinition
  in: [SettingDefinition]
  nin: [SettingDefinition]
}

input SettingScopeEnumerationOperationFilterInput {
  eq: SettingScopeEnumeration
  neq: SettingScopeEnumeration
  in: [SettingScopeEnumeration]
  nin: [SettingScopeEnumeration]
}

input AuditStatusOperationFilterInput {
  eq: AuditStatus
  neq: AuditStatus
  in: [AuditStatus!]
  nin: [AuditStatus!]
}

enum SortEnumType {
  ASC
  DESC
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

enum AuditStatus {
  "待上报\/默认"
  DEFAULT
  "已上报"
  SUBMITTED
  "已审批"
  AUDITED
}

type UserClaim {
  claimType: String!
  claimValue: String!
}

interface IOrg {
  "所有父组织编码"
  allParentOrgCodes: [String!]!
  "所有子组织编码"
  allSubOrgCodes: [String!]!
  "直系子组织编码"
  directSubOrgCodes: [String!]!
  "父组织编码"
  parentOrgCode: String!
  "以.作为分割线的编码"
  code: String!
  name: String!
  "组织类型"
  orgType: OrgTypeEnum!
  "所有父组织"
  allParentOrgs: [IOrg!]!
  "所有子组织"
  allSubOrgs: [IOrg!]!
  "直系子组织"
  directSubOrgs: [IOrg!]!
  "父组织"
  parentOrg: IOrg!
  "The Id property for this entity type.\n注意: dbcontext会根据entity是否有id值来判断当前entity是否为新增"
  id: String!
  createdOn: DateTime!
}

interface IRole {
  name: String!
  code: String!
  users: [IUser!]!
  permissions: [String!]!
  isDefault: Boolean!
  isStatic: Boolean!
  isEnabled: Boolean!
  "The Id property for this entity type.\n注意: dbcontext会根据entity是否有id值来判断当前entity是否为新增"
  id: String!
  createdOn: DateTime!
}

enum MessageType {
  "通知, 告知某个信息的消息\n区别于单独的toast, 这个消息会留档"
  NOTIFICATION
  "待办, 带有链接跳转\/当前状态等交互功能的消息"
  TODO
  "用户交互消息, 通常有一个非系统的触发者"
  INTERACT
}

enum MessageSeverityType {
  "Info."
  INFO
  "Success."
  SUCCESS
  "Warn."
  WARN
  "Error."
  ERROR
  "Fatal."
  FATAL
}

enum CaptchaType {
  NUMBER
  ENGLISH
  NUMBER_AND_LETTER
  CHINESE
}

input AuthenticateInput {
  userIdentifier: String!
  password: String!
}

input FederateAuthenticateInput {
  "登陆提供方"
  loginProvider: LoginProviderEnum!
  "OAuth Code"
  code: String!
}

input CreateTenantRequestInput {
  code: String!
  name: String!
  externalInfo: Any
}

input EditTenantRequestInput {
  code: String!
  name: String!
}

input ToggleTenantAvailabilityRequestInput {
  code: String!
}

input ChangePasswordRequestInput {
  "原密码"
  originPassword: String!
  "新密码(建议前端二次确认)"
  newPassword: String!
}

input RegisterUserRequestInput {
  password: String!
  username: String!
  phoneNumber: String
  email: String
}

input AssignRoleRequestInput {
  userIds: [String!]!
  roles: [String!]!
}

input AssignOrgRequestInput {
  userOrgsMap: [UserOrgMapItemInput!]!
}

input EditUserRequestInput {
  id: String!
  isEnable: Boolean
  email: String
  roleIds: [String!]!
  orgCodes: [String!]!
  avatarFileId: String
  claims: [UserClaimInput!]!
  phoneNumber: String
  username: String!
}

input CreateUserRequestInput {
  username: String!
  isEnable: Boolean!
  email: String
  roleIds: [String!]
  orgCodes: [String!]
  avatarFileId: String
  claims: [UserClaimInput!]
  phoneNumber: String
  password: String
  nickname: String
  openId: String
  provider: LoginProviderEnum
}

input ResetUserPasswordRequestInput {
  "用户ID"
  userId: String!
  "新密码"
  password: String!
}

input CreateOrgInput {
  name: String!
  code: String!
  orgType: OrgTypeEnum
  createUserId: String
}

input CreateRoleInput {
  roleCode: String!
  roleName: String!
  isDefault: Boolean
  isStatic: Boolean
}

input SetRoleDefaultInput {
  roleId: String!
}

input MarkMessagesReadInput {
  messageIds: [String!]!
  userId: String!
}

input DeleteMessageDistributionsInput {
  messageId: String!
  userIds: [String!]!
}

input SendNotificationMessageRequestInput {
  toUserIds: [String!]!
  messageId: String!
}

input CreateMessageRequestInput {
  text: String!
  severity: MessageSeverityType!
}

input EditMessageRequestInput {
  text: String
  severity: MessageSeverityType
  id: String!
  messageType: MessageType
}

input GetUnreadMessagesInput {
  _: String!
}

input CreateBlobObjectRequestInput {
  file: Upload!
  storageType: BlobStorageType!
  md5: String!
}

input DeleteBlobObjectRequestInput {
  ids: [String!]!
  storageType: BlobStorageType!
}

input EditSettingRequestInput {
  name: SettingDefinition!
  value: Any
  scopedKey: String
  scope: SettingScopeEnumeration!
}

input GetSettingsInput {
  scope: SettingScopeEnumeration!
  settingDefinitions: [SettingDefinition!]!
  filterByName: String!
  _: String
}

input AuthorizeInput {
  authorizeTargetType: AuthorizeTargetType!
  allowedPermissions: [AppPermission!]!
  "授权目标:\n用户or角色id"
  target: String!
}

input SendCaptchaInput {
  captchaProvider: CaptchaProvider!
  smsCaptchaPhoneNumber: ChinesePhoneNumberType
}

input ValidateCaptchaInput {
  captchaKey: String!
  captchaProvider: CaptchaProvider!
  captchaCode: String!
}

type OrgCacheItem {
  orgType: OrgTypeEnum
  code: String
  name: String
  parentOrgCode: String!
}

input CreateOrderInput {
  name: String!
}

input EditOrderInput {
  name: String
}

input QueryOrderInput {
  name: String
  _: String
}

input UserClaimInput {
  claimType: String!
  claimValue: String!
}

input UserOrgMapItemInput {
  userId: String!
  orgCodes: [String!]!
}

directive @first(count: Int = 1) on FIELD

directive @last(count: Int = 1) on FIELD